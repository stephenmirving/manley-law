@use "sass:math";
@use "sass:list";


/// Absolutely centers the element inside of its first parent using a method
/// combining positioning and translation. The parent element must be non-static.
///
/// @group Utilities
/// @alias abs-center

@mixin absolute-center {
  left: 50%;
  position: relative;
  top: 50%;
  transform: translate(-50%, -50%);
}

/// Absolutely centers the element inside of its first parent using a method
/// combining positioning and translation.
///
/// @group Utilities
/// @alias absolute-center
@mixin abs-center {
  left: 50%;
  position: relative;
  top: 50%;
  transform: translate(-50%, -50%);
}


/// Horizontally aligns an alement using absolute positioning and transform. You
/// can modify the $pos argument to change the left property's value to alter
/// the horizontal alignment. Parent element must be non-static.
///
/// @param {Position} $pos [50%] - The top property value. 50% will put the
/// element in the vertical center.
///
/// @group Utilities
/// @throw $pos value out of range
@mixin align-horizontally($pos: 50%) {
  @if $pos == 'middle' or $pos == 'center' or $pos == 'c' or $pos == 'm' {
    $pos: 50%;
  }

  @if unitless($pos) {
    $pos: $pos * 1%;
  }

  @if $pos < 0% or $pos > 100% {
    @error 'The left position value of `#{inspect($pos)}` is out of range for' +
        'the `align-horizontally` mixin. You must choose a value between 0% ' +
        'and 100%, inclusive.';
  }

  left: $pos;
  position: absolute;
  transform: translateX(-50%);
}

/// Horizontally centers the element inside of its first parent using a method
/// combining positioning and translation.
///
/// @group Utilities
/// @alias horizontal-center
@mixin center-horizontally {
  left: 50%;
  position: relative;
  transform: translateX(-50%);
}

/// Horizontally centers the element inside of its first parent using a method
/// combining positioning and translation.
///
/// @group Utilities
/// @alias center-horizontally
@mixin horizontal-center {
  left: 50%;
  position: relative;
  transform: translateX(-50%);
}


/// Vertically aligns an alement using absolute positioning and transform. You
/// can modify the $pos argument to change the top property's value to alter
/// the vertical alignment. Parent element must be non-static.
///
/// @param {Position} $pos [50%] - The top property value. 50% will put the
/// element in the vertical center.
///
/// @group Utilities
/// @throw $pos value out of range
@mixin align-vertically($pos: 50%) {
  @if $pos == 'middle' or $pos == 'center' or $pos == 'c' or $pos == 'm' {
    $pos: 50%;
  }
  @if unitless($pos) {
    $pos: $pos * 1%;
  }
  @if $pos < 0% or $pos > 100% {
    @error 'The top position value of `#{inspect($pos)}` is out of range for ' +
        'the `vert-align` mixin. You must choose a value between 0% and 100%,' +
        ' inclusive.';
  }

  position: relative;
  top: $pos;
  transform: translateY(-50%);
}

/// Vertically centers the element inside of its first parent using a method
/// combining positioning and translation.
///
/// @group Utilities
/// @alias vertical-center
@mixin center-vertically {
  position: relative;
  top: 50%;
  transform: translateY(-50%);
}

/// Vertically centers the element inside of its first parent using a method
/// combining positioning and translation.
///
/// @group Utilities
/// @alias center-vertically
@mixin vertical-center {
  position: relative;
  top: 50%;
  transform: translateY(-50%);
}


/// Applied to the child element of the element with the a 3-d transform effect
/// to represent the back-face of the card that the animation flips to or past.
///
/// @param {String} $flip-axis [horizontal] - Set this value equal to the axis
/// the element will flip over in order to ensure that the content of the
/// back-face of the element is oriented correctly.
/// @param {Number} $z-val [10] - The z-index value.
///
/// @group Animations
/// @group Utilities
/// @throw Invalid $z-val z-index value
/// @require {placeholder} animation-faces
@mixin animation-back-face($flip-axis: horizontal, $z-val: 10) {
  // Default rotation for the flip-axis value of horizontal
  $trans-val: rotateX(180deg);

  @if (
    to-lower-case($flip-axis) == 'vertical' or
    to-lower-case($flip-axis) == 'vert' or
    to-lower-case($flip-axis) == 'v'
  ) {
    $trans-val: rotateY(180deg);
  } @else if (
    to-lower-case($flip-axis) == 'diagonal' or
    to-lower-case($flip-axis) == 'diagonal1' or
    to-lower-case($flip-axis) == 'diag' or
    to-lower-case($flip-axis) == 'diag1' or
    to-lower-case($flip-axis) == 'd' or
    to-lower-case($flip-axis) == 'd1'
  ) {
    $trans-val: rotate3d(1, 1, 0, 180deg);
  } @else if (
    to-lower-case($flip-axis) == 'diagonal2' or
    to-lower-case($flip-axis) == 'diag2' or
    to-lower-case($flip-axis) == 'd2'
  ) {
    $trans-val: rotate3d(-1, 1, 0, -180deg);
  } @else if (
    to-lower-case($flip-axis) != 'horizontal' and
    to-lower-case($flip-axis) != 'horiz' and
    to-lower-case($flip-axis) != 'horz' and
    to-lower-case($flip-axis) != 'h'
  ) {
    @error 'Invalid flip-axis value of `#{inspect($flip-axis)}` for the ' +
        '`animation-back-face` mixin';
  }

  @extend %animation-faces;

  transform: $trans-val;
  @if ($z-val and type-of($z-val) == 'number' and unitless($z-val)) {
    z-index: $z-val;
  }
}


/// Applied to the child element of the element with the `animation` mixin
/// to represent the front-face of the card that the animation flips to the
/// back of.
///
/// @param {Number} $z-val [99] - The z-index value.
///
/// @group Animations
/// @group Utilities
/// @throw Invalid $z-val z-index value
/// @require {placeholder} animation-faces
@mixin animation-front-face($z-val: 99) {
  @extend %animation-faces;
  @if ($z-val and type-of($z-val) == 'number' and unitless($z-val)) {
    z-index: $z-val;
  }
}


/// Applied to the parent element of an element that includes a 3-D animation.
///
/// @param {Length|Keyword} $perspective [500px] - The perspective value that
/// will effect the child element's 3-d animation.
/// @param {Keyword|Length Percentage|List} $p-origin [55% 50%] - The
/// perspecitve-origin value that will effect the child element's 3-d animation
/// The syntax for this property can be just an x-position which can be the
/// keyword, `left` (equal to a 0 value), `center` (equal to 50%), or `right`
/// (equal to 100%), or can be a length-percentage. It can be also be in an
/// x-position y-position 2-value format. The y-position value can be the
/// keyword, `top` (equal to 0), `center` (equal to 50%), or `bottom` (equal to
/// 100%), or can it can be a length-percentage. (Ex: `left bottom` or
/// `100% 50%` or `left 30%). This property also accepts the global values of
/// inherit, initial, and unset as valid.
/// @param {Length-Percentage} $width [null] - The width of the element.
/// @param {Number} $z-val [null] - Sets the z-value property if passed
/// @param {Length-Percentage} $height [$width] - The height of the element.
///
/// @group Animations
/// @group Utilities
/// @throw Invalid $perspective value
/// @throw Invalid $z-val value
@mixin animation-stage(
  $perspective: 500px,
  $p-origin: 55% 50%,
  $width: null,
  $z-val: null,
  $height: null
) {
  @if $height {
    height: $height;
  }

  @if (type-of($perspective) == 'number' and $perspective > 0
      and index('px' 'em' 'rem', unit($perspective)))
      or $perspective == 'initial'
      or $perspective == 'inherit' {
    perspective: $perspective;
  }

  perspective-origin: $p-origin;
  -webkit-user-select: none;
  user-select: none;

  @if $width {
    width: $width;
  }
  @if $z-val and type-of($z-val) == 'number' and unitless($z-val) {
    z-index: $z-val;
  }
}


/// Uses clip path to change an element to the shape of an arrow.
///
/// @param {String} $direction [right] The direction the arrow is pointing
/// @param {Color|Mixed} $bg [#fb8c00] The color or background value.
/// @param {Length-Percentage} $size [15rem] - The size of the arrow. If
/// the $height property is not set explicitly, it is both height and width, if
/// $height is set explicitly, then this value sets only the width.
/// @param {Color} $fg-color [null] The color of any text in the arrow.
/// @param {Length-Percentage} $height [$size] The height of the arrow.
///
/// @group Shapes
@mixin arrow(
  $direction: right,
  $bg: #fb8c00,
  $size: 15rem,
  $fg-color: null,
  $height: $size
) {
  background: $bg;

  @if ($fg-color) {
    color: $fg-color;
  }
  @if (
    to-lower-case($direction) == 'right' or to-lower-case($direction) == 'r'
  ) {
    clip-path:
      polygon(
        0 20%,
        60% 20%,
        60% 0,
        100% 50%,
        60% 100%,
        60% 80%,
        0 80%
      );
  } @else if
    (to-lower-case($direction) == 'left' or to-lower-case($direction) == 'l') {
    clip-path:
      polygon(
        40% 0,
        40% 20%,
        100% 20%,
        100% 80%,
        40% 80%,
        40% 100%,
        0 50%
      );
  } @else if (
    to-lower-case($direction) == 'up' or to-lower-case($direction) == 'u' or
    to-lower-case($direction) == 'top' or to-lower-case($direction) == 't'
  ) {
    clip-path:
      polygon(
        100% 50%,
        75% 50%,
        75% 100%,
        25% 100%,
        25% 50%,
        0 50%,
        50% 0
      );
  } @else if (
    to-lower-case($direction) == 'down' or to-lower-case($direction) == 'd' or
    to-lower-case($direction) == 'bottom' or to-lower-case($direction) == 'b'
  ) {
    clip-path:
      polygon(
        75% 0,
        75% 50%,
        100% 50%,
        50% 100%,
        0 50%,
        25% 50%,
        25% 0
      );
  } @else {
    @error 'Invalid direction of `#{inspect($direction)}` for the `arrow` mixin';
  }

  height: $height;
  width: $size;
}


/// Uses psuedo-elements and transform to turn an element into the shape of an
/// arrow with a curved tail.
///
/// @param {String|Angle} $direction ['bottom-right'] The direction that the
/// arrow is pointing. Can either be a direction or an angle in degrees.
/// @param {Color|Mixed} $bg-color [#F00] The color of the arrow.
/// @param {Length} $size [2rem] - The size of the arrow is calculated based on
/// this value.
///
/// @group Shapes
/// @throw Invalid unit type for $direction
/// @throw Invalid $direction value
@mixin arrow-curved-tail(
  $direction: 'bottom-right',
  $bg-color: #F00,
  $size: 2rem
) {
  // Default angle for the 'bottom-right' direction
  $angle: 10deg;

  @if (
    $direction and type-of($direction) == 'number' and
    unit($direction) != 'deg' and not unitless($direction)
  ) {
    @error 'Invalid unit type for the $direction parameter of the ' +
        '`arrow-curved-tail` mixin.';
  }
  @if (
    $direction and type-of($direction) == 'number' and
    (unitless($direction) or unit($direction) == 'deg')
  ) {
    $angle: $direction;
    @if (unitless($angle)) {
      $angle: $angle * 1deg;
    }
    // Correct the angle so when the user enters 0deg, the arrow faces
    // directly to the right when at 0deg
    $angle: $angle - 45deg;
  } @else if (
    $direction == 'top' or $direction == 'up' or
    $direction == 't' or $direction == 'u'
  ) {
    $angle: 225deg;
  } @else if ($direction == 'right' or $direction == 'r') {
    $angle: -45deg;
  } @else if ($direction == 'left' or $direction == 'l') {
    $angle: 135deg;
  } @else if (
    $direction == 'down' or $direction == 'bottom' or $direction == 'd' or
    $direction == 'b' or $direction == 'btm' or $direction == 'dwn'
  ) {
    $angle: 45deg;
  } @else if (
    $direction == 'down-left' or $direction == 'left-down' or
    $direction == 'd-l' or $direction == 'l-d' or $direction == 'dl' or
    $direction == 'ld' or $direction == 'bottom-left' or
    $direction == 'left-bottom' or $direction == 'bl' or $direction == 'lb' or
    $direction == 'b-l' or $direction == 'l-b'
  ) {
    $angle: 100deg;
  } @else if (
    $direction == 'top-left' or $direction == 'left-top' or
    $direction == 't-l' or $direction == 'l-t' or $direction == 'tl' or
    $direction == 'lt' or $direction == 'up-left' or $direction == 'u-l' or
    $direction == 'ul' or $direction == 'left-up' or $direction == 'l-u' or
    $direction == 'lu'
  ) {
    $angle: 190deg;
  } @else if (
    $direction == 'top-right' or $direction == 'right-top' or
    $direction == 't-r' or $direction == 'r-t' or $direction == 'tr' or
    $direction == 'rt' or $direction == 'up-right' or $direction == 'u-r' or
    $direction == 'ur' or $direction =='right-up' or $direction == 'r-u' or
    $direction == 'ru'
  ) {
    $angle: -80deg;
  } @else if (
    $direction != 'down-right' and $direction != 'right-down' and
    $direction != 'dr' and $direction != 'rd' and $direction != 'd-r' and
    $direction != 'r-d' and $direction != 'bottom-right' and
    $direction != 'right-bottom' and $direction != 'b-r' and
    $direction != 'r-b' and $direction != 'br' and $direction != 'rb'
  ) {
    @error 'Invalid direction value for the `arrow-curved-tail` mixin.';
  }

  border-right: ($size * .75) solid $bg-color;
  border-top: ($size * .75) solid transparent;
  height: 0;
  position: relative;
  transform: rotate($angle);
  width: 0;

  &:after {
    border-radius: ($size * 1.6666666667) 0 0;
    border: 0 solid transparent;
    border-top: ($size * 0.25) solid $bg-color;
    content: '';
    height: $size;
    left: $size * -.75;
    position: absolute;
    top: -$size;
    transform: rotate(45deg);
    width: $size;
  }
}


/// Block Element - Used with BEM (Block-Element-Modifier) naming convention
/// @content
///
/// @group Utilities
/// @param {String} $element - Element's name
@mixin elem($element) {
  &__#{$element} {
    @content;
  }
}

/// Block Modifier - Used with BEM (Block-Element-Modifier) naming convention
/// @content
///
/// @group Utilities
/// @param {String} $modifier - Modifier's name
@mixin mod($modifier) {
  &--#{$modifier} {
    @content;
  }
}


/// Uses clip path to change an element to an octagonal beveled shape
///
/// @param {Color|Mixed} $bg [#fb8c00] The color or background value.
/// @param {Length-Percentage} $size [15rem] - The size of the shape. If
/// the $height property is not set explicitly, it is both height and width, if
/// $height is set explicitly, then this value sets only the width.
/// @param {Color} $fg-color [null] The color of any text in the shape
/// @param {Length-Percentage} $height [$size] The height of the shape.
///
/// @group Shapes
@mixin bevel($bg: #fb8c00, $size: 15rem, $fg-color: null, $height: $size) {
  background: $bg;

  @if ($fg-color) {
    color: $fg-color;
  }
  clip-path: polygon( 20% 0, 80% 0, 100% 20%, 100% 80%,
                      80% 100%, 20% 100%, 0 80%, 0 20%);
  height: $height;
  width: $size;
}


/// Apply a background image with a version that is scaled to 2x for Retina and
/// other HiDPI displays.
///
/// @param {URL} $img-name - File path for the image. Must either be a
/// quoted string or inside a function to be read correctly.
/// @param {Length-Percentage} $bg-width - Width component of the background-size
/// property value for the image.
/// @param {Length-Percentage} $bg-height [$bg-width] - Height component of the
/// background-size property value for the image.
/// @param {Number} $ratio [1.3] - A minimum pixel ratio resolution value used
/// to calculate the media query targeting Retina and other HiDPI screens.
/// Common targeting ratios are 1.25, 1.3, 1.5, and 2.
/// @param {String} $img-2x-suffix [$image-2x-suffix|'@2x']- The suffix that is
/// appended to the end of image name to designate that it is the 2x version for
/// HiDPI displays. Must be a quoted string to be ready correctly.
/// @param {Map} $extra-hidpi-properties [null] - You can pass this argument
/// a map of property: value pairs that will be added to the HiDPI/Retina
/// media query.
///
/// @group Utilities
/// @throw Value of $bg-width must not be null
/// @throw Invalid $bg-width or $bg-height data type
/// @throw Invalid $img filename
@mixin bg-image(
  $img-name,
  $bg-width,
  $bg-height: $bg-width,
  $ratio: 1.3,
  $img-2x-suffix:
    if(global-variable-exists(image-2x-suffix), $image-2x-suffix, '@2x'),
  $extra-hidpi-properties: null
) {
  $hidpi-img: $img-name;

  @if (
    not $extra-hidpi-properties or $extra-hidpi-properties == 'none' or
    $extra-hidpi-properties == 'no' or $extra-hidpi-properties == nil or
    $extra-hidpi-properties == 'n/a' or $extra-hidpi-properties == ' ' or
    $extra-hidpi-properties == () or $extra-hidpi-properties == ( )
  ) {
    $extra-hidpi-properties: null;
  }

  @if not $bg-width {
    @error 'You must enter an image width for the $bg-width parameter of the ' +
        '`bg-image` mixin.';
  } @else if (
    type-of($bg-width) != 'number' or
    ($bg-height and $bg-height != auto and type-of($bg-height) != 'number')
  ) {
    @error 'Invalid type for the dimensions used in the `bg-image` mixin.';
  } @else {
    $bg-width: if(
      (type-of($bg-width) == 'number' and unitless($bg-width)),
      $bg-width * 1px,
      $bg-width
    );
    $bg-height: if(
      (type-of($bg-height) == 'number' and unitless($bg-height)),
      $bg-height * 1px,
      $bg-height
    );
  }

  $size: if(
    not $bg-height or $bg-height == auto,
    $bg-width,
    $bg-width $bg-height
  );

  @if (
    str-index($img-name, '.png') or str-index($img-name, '.svg') or
    str-index($img-name, '.gif') or str-index($img-name, '.jpg') or
    str-index($img-name, '.jpx') or str-index($img-name, '.jp2') or
    str-index($img-name, '.j2c') or str-index($img-name, '.j2k') or
    str-index($img-name, '.jps') or str-index($img-name, '.ppm') or
    str-index($img-name, '.iff') or str-index($img-name, '.tdi') or
    str-index($img-name, '.dmc') or str-index($img-name, '.dc3') or
    str-index($img-name, '.dic') or str-index($img-name, '.mpo') or
    str-index($img-name, '.bmp') or str-index($img-name, '.pxr') or
    str-index($img-name, '.tga') or str-index($img-name, '.vda') or
    str-index($img-name, '.icb') or str-index($img-name, '.vst') or
    str-index($img-name, '.pcx') or str-index($img-name, '.jpf') or
    (not str-index($img-name, '.jpeg') and str-index($img-name, '.jpe')) or
    (not str-index($img-name, '.tiff') and str-index($img-name, '.tif'))
  ) {
    $hidpi-img: str-insert($img-name, $img-2x-suffix, str-length($img-name) - 3);
  } @else if (
    str-index($img-name, '.tiff') or
    str-index($img-name, '.jpeg') or
    str-index($img-name, '.webp')
  ) {
    $hidpi-img: str-insert($img-name, $img-2x-suffix, str-length($img-name) - 4);
  } @else if str-index($img-name, '.') {
    $hidpi-img: str-insert($img-name, $img-2x-suffix, str-index($img-name, '.'));

    @warn 'You are using an unknown file type on the image you referenced in ' +
        'the `bg-image` mixin. Please ensure you are using a valid image file' +
        ' type. If you use an unknown file type with multiple `.` characters ' +
        'the `bg-image` mixin may not work correctly.';
  } @else {
    @error 'The image you referenced in the `bg-image` mixin does not have a ' +
        'file extension. Please use the full image name including the ' +
        'image\'s file extension.';
  }
  // Normal sized image
  background-image: url(#{$img-name});

  // Scaled up version of the image for HiDPI displays
  @media screen and (min-device-pixel-ratio: $ratio),
         screen and (min-resolution: ($ratio * 96dpi)),
         screen and (min-resolution: ($ratio * 1dppx)) {
    background-image: url(#{$hidpi-img});
    background-size: $size;

    @if $extra-hidpi-properties {
      $key-list: map-keys($extra-hidpi-properties);
      @each $key in $key-list {
        #{$key}: map-get($extra-hidpi-properties, $key);
      }
    }
  }
}


/// Apply an SVG background image with a fall-back PNG version and a PNG version
/// that is scaled to 2x for Retina and other HiDPI displays.
///
/// @param {URL} $svg-img-name - File path for the image. The '.svg' file
/// extension is not required, but if it is included the string must either be
/// in quotes or inside a function to be read correctly.
/// @param {Length-Percentage} $bg-width - Width component of the
/// background-size property that sizes the image.
/// @param {Length-Percentage} $bg-height [null] - Height component of the
/// background-size property value for the image. If no height, or a height
/// of auto is entered, the background-size property will use one value syntax.
/// @param {Number} $ratio [1.3] - A minimum pixel ratio resolution value used
/// to calculate the media query targeting Retina and other HiDPI screens.
/// Common targeting ratios are 1.25, 1.3, 1.5, and 2.
/// @param {String} $img-2x-suffix [$image-2x-suffix|'@2x']- The suffix that is
/// appended to the end of image name to designate that it is the 2x version for
/// HiDPI displays. Must be a quoted string to be read correctly.
/// @param {Map} $extra-hidpi-properties [null] - You can pass this argument
/// a map of property: value pairs that will be added to the HiDPI/Retina
/// media query since the mixin will be the only way to access it.
///
/// @group Utilities
/// @throw Value of $bg-width must not be null
/// @throw Invalid $bg-width or $bg-height data type
@mixin bg-image-svg(
  $svg-img-name,
  $bg-width,
  $bg-height: null,
  $ratio: 1.3,
  $img-2x-suffix:
    if(global-variable-exists(image-2x-suffix), $image-2x-suffix, '@2x'),
  $extra-hidpi-properties: null
) {
  $ret-png-img: null;

  @if (
    not $extra-hidpi-properties or $extra-hidpi-properties == 'none' or
    $extra-hidpi-properties == 'no' or $extra-hidpi-properties == nil or
    $extra-hidpi-properties == 'n/a' or $extra-hidpi-properties == ' ' or
    $extra-hidpi-properties == () or $extra-hidpi-properties == ( )
  ) {
    $extra-hidpi-properties: null;
  }

  @if not $bg-width {
    @error 'You must enter an image width for the $bg-width parameter of the ' +
        '`bg-image-svg` mixin.';
  } @else if (
    type-of($bg-width) != 'number' or
    ($bg-height and $bg-height != auto and type-of($bg-height) != 'number')
  ) {
    @error 'Invalid type for the dimensions used in the `bg-image-svg` mixin.';
  } @else {
    $bg-width: if(
      (type-of($bg-width) == 'number' and unitless($bg-width)),
      $bg-width * 1px,
      $bg-width
    );
    $bg-height: if(
      (type-of($bg-height) == 'number' and unitless($bg-height)),
      $bg-height * 1px,
      $bg-height
    );
  }

  @if not $img-2x-suffix {
    $img-2x-suffix: if(
      global-variable-exists(image-2x-suffix),
      $image-2x-suffix,
      '@2x'
    );
  }

  @if not str-index(to-lower-case($svg-img-name), '.svg') {
    $svg-img-name: $svg-img-name + '.svg';
    $ret-png-img: $svg-img-name + $img-2x-suffix + '.png';
  }

  $size: if(
    not $bg-height or $bg-height == auto,
    $bg-width,
    $bg-width $bg-height
  );
  $png-img: str-slice($svg-img-name, 1, str-length($svg-img-name) - 4) + '.png';
  $ret-png-img: str-insert($png-img, $img-2x-suffix, str-length($png-img) - 3);

  // Normal sized PNG fallback image
  background: url(unquote($png-img));
  // SVG image with properties to ensure it overwrites PNG if SVG is supported
  background: url(#{$svg-img-name}), linear-gradient(transparent, transparent);

  // Scaled up version of the image for HiDPI displays
  @media screen and (min-device-pixel-ratio: $ratio),
         screen and (min-resolution: ($ratio * 96dpi)),
         screen and (min-resolution: ($ratio * 1dppx)) {
    background: url(#{$ret-png-img}); // 2x PNG fallback image
    background: url(#{$svg-img-name}), linear-gradient(transparent, transparent);
    background-size: $size;

    @if $extra-hidpi-properties {
      $key-list: map-keys($extra-hidpi-properties);
      @each $key in $key-list {
        #{$key}: map-get($extra-hidpi-properties, $key);
      }
    }
  }
}


/// Adds the border radius property along with the background-clip: padding box
/// property, value pair.
///
/// @param {Length-Percentage} $radius [8px] - The border-radius value.
///
/// @group Utlities
@mixin border-radius($radius: 8px) {
  @if ($radius == 'circle') {
    $radius: 50%;
  }
  background-clip: padding-box; // Stops bg color from leaking outside the border
  border-radius: $radius;
}


/// An animation that bounces an element in to view
///
/// @param {String|Boolean} $in-or-out [in] - Determines if the element will
/// bounce `in` (or true, `i`) our `out` (or false, `o`).
/// @param {String} $direction [top] - The direction the animation will appear
/// to be bouncing in from or bouncing out towards.
/// @param {Time} $timing [null] The duration of the animation (s or ms).
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {Number|String} $iterations [null] - The number of iterations
/// to complete. If the value passed is not a number, it will be set to infinite.
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// null assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for the
/// animation. The default of null applies the default timing function of ease.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $in-or-out value
/// @throw Invalid $direction value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $iterations value
/// @throw Invalid $anim-dir value
@mixin bounce(
  $in-or-out: in,
  $direction: top,
  $timing: null,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: null,
  $anim-num: null
) {
  // Default values for bounce in from the top $direction
  $dir-val1: translateY(-500px);
  $dir-val2: translateY(0);
  $dir-val3: translateY(-65px);
  $dir-val4: translateY(-28px);
  $dir-val5: translateY(-8px);
  $xtra-val: null;
  $fwd-bck: false;

  // Input scrubbing
  @if ($in-or-out == true or $in-or-out == 'in' or $in-or-out == 'i') {
    $in-or-out: true;
  } @else if ($in-or-out == false or $in-or-out == 'out' or $in-or-out == 'o') {
    $in-or-out: false;
  } @else {
    @error 'Invalid $in-or-out value of `#{inspect($in-or-out)}` for the `fade` mixin.';
  }

  @if (to-lower-case($direction) == 'bottom' or to-lower-case($direction) == 'b'
        or to-lower-case($direction) == 'down') {
      $direction: 'bottom';
    } @else if (
      to-lower-case($direction) == 'right' or to-lower-case($direction) == 'r'
    ) {
      $direction: 'right';
    } @else if (
      to-lower-case($direction) == 'left'or to-lower-case($direction) == 'l'
    ) {
      $direction: 'left';
    } @else if (to-lower-case($direction) == 'forward'
        or to-lower-case($direction) == 'forwards'
        or to-lower-case($direction) == 'fwd'
        or to-lower-case($direction) == 'f') {
      $direction: 'forward';
      $fwd-bck: true;
    } @else if (to-lower-case($direction) == 'backward'
        or to-lower-case($direction) == 'backwards'
        or to-lower-case($direction) == 'bckwrd'
        or to-lower-case($direction) == 'back'
        or to-lower-case($direction) == 'bck'
        or to-lower-case($direction) == 'b') {
      $direction: 'backward';
      $fwd-bck: true;
    } @else if (to-lower-case($direction) == 'top'
        or to-lower-case($direction) != 't'
        or to-lower-case($direction) != 'up'
        or to-lower-case($direction) != 'u') {
      $direction: 'top';
    } @else {
      @error '`#{inspect($direction)}` is not a valid direction for the `bounce` mixin.';
    }

  @if ($in-or-out) {
    @if ($direction == 'bottom') {
      $dir-val1: translateY(500px);
      $dir-val2: translateY(0);
      $dir-val3: translateY(65px);
      $dir-val4: translateY(28px);
      $dir-val5: translateY(8px);
    } @else if ($direction == 'right') {
      $dir-val1: translateX(600px);
      $dir-val2: translateX(0);
      $dir-val3: translateX(68px);
      $dir-val4: translateX(32px);
      $dir-val5: translateX(8px);
    } @else if ($direction == 'left') {
      $dir-val1: translateX(-600px);
      $dir-val2: translateX(0);
      $dir-val3: translateX(-68px);
      $dir-val4: translateX(-32px);
      $dir-val5: translateX(-8px);
    } @else if ($direction == 'forward') {
      $dir-val1: scale(0);
      $dir-val2: scale(1);
      $dir-val3: scale(.7);
      $dir-val4: scale(.84);
      $dir-val5: scale(.95);
    } @else if (to-lower-case($direction) == 'backward'
        or to-lower-case($direction) == 'bckwrd'
        or to-lower-case($direction) == 'back'
        or to-lower-case($direction) == 'bck'
        or to-lower-case($direction) == 'b') {
      $dir-val1: scale(7);
      $dir-val2: scale(1);
      $dir-val3: scale(1.5);
      $dir-val4: scale(1.24);
      $dir-val5: scale(1.04);
    }
  } @else {
    @if ($direction == 'top') {
      $dir-val1: translateY(0);
      $dir-val2: translateY(-30px);
      $dir-val3: translateY(-38px);
      $dir-val4: translateY(-75px);
      $dir-val5: translateY(-800px);
    } @else if ($direction == 'bottom') {
      $dir-val1: translateY(0);
      $dir-val2: translateY(30px);
      $dir-val3: translateY(38px);
      $dir-val4: translateY(75px);
      $dir-val5: translateY(800px);
    } @else if ($direction == 'right') {
      $dir-val1: translateX(0);
      $dir-val2: translateX(30px);
      $dir-val3: translateX(38px);
      $dir-val4: translateX(80px);
      $dir-val5: translateX(1000px);
    } @else if ($direction == 'left') {
      $dir-val1: translateX(0);
      $dir-val2: translateX(-30px);
      $dir-val3: translateX(-38px);
      $dir-val4: translateX(-80px);
      $dir-val5: translateX(-1000px);
    } @else if ($direction == 'forward') {
      $dir-val1: translateZ(0);
      $dir-val2: translateZ(90px);
      $dir-val3: translateZ(95px);
      $dir-val4: translateZ(150px);
      $dir-val5: translateZ(500px);
    } @else if (to-lower-case($direction) == 'backward'
        or to-lower-case($direction) == 'bckwrd'
        or to-lower-case($direction) == 'back'
        or to-lower-case($direction) == 'bck'
        or to-lower-case($direction) == 'b') {
      $dir-val1: translateZ(0);
      $dir-val2: translateZ(-100px);
      $dir-val3: translateZ(-110px);
      $dir-val4: translateZ(-200px);
      $dir-val5: translateZ(-900px) scale(0);
      $xtra-val: translateZ(0) scale(1);
    }
  }

  @if not $timing {
    $timing: if(($in-or-out), 1.1s, 1.5s);
  }
  @if type-of($timing) != 'number' {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `bounce` ' +
        'mixin. The timing property must be a number.';
  } @else if unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not index('s' 'ms', unit($timing)) {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `bounce` ' +
        'mixin. The timing property must be in either s or ms units.';
  } @else if (unit($timing) == 'ms' and $timing % 10 == 0ms) {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;
    // Get rid of possible leading zero in front of decimal place
    @if (str-slice($timing + '', 1, 2) == '0.') {
      $timing: unquote(str-slice($timing + '', 2));
    }
  }

  @if (
    $delay == 0 or $delay == 0s or $delay == 0ms or
    $delay == 'none' or $delay == 'no' or $delay == 'n' or
    $delay == 'n/a' or $delay == nil or not $delay
  ) {
    $delay: null;
  }
  @if $delay {
    @if type-of($delay) != 'number' {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `bounce` ' +
          'mixin. The delay property must be a number.';
    } @else if (unitless($delay)) {
      $delay: $delay * 1s;
    } @else if not index('s' 'ms', unit($delay)) {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `bounce` ' +
          'mixin. The delay property must be in either s or ms units.';
    } @else if (unit($delay) == 'ms' and $delay % 10 == 0ms) {
      $delay: math.div($delay, 1000ms) * 1s;
      @if (str-slice($delay + '', 1, 2) == '0.') {
        $delay: #{str-slice($delay + '', 2)};
      }
    }
  } @else {
    $delay: null;
  }

  @if ($iterations) {
    @if (
      $iterations == 'infinite' or $iterations == 'inf' or $iterations == 'i'
    ) {
      $iterations: infinite;
    } @else if (
      (unitless($iterations) and type-of($iterations) == 'number') or
      $iterations == initial or $iterations == inherit
    ) {
      $iterations: $iterations;
    } @else {
      @error 'Invalid iteration-count value of `#{inspect($iterations)}` for the ' +
          '`bounce` mixin.';
    }
  }

  @if (
    not $anim-dir or $anim-dir == 'none' or $anim-dir == 'no' or
    $anim-dir == 'n/a' or $anim-dir == 'n' or $anim-dir == 'default' or
    $anim-dir == 'def' or $anim-dir == 'normal' or $anim-dir == 'nor'
  ) {
    $anim-dir: null;
  } @else if (
    $anim-dir == 'reverse' or $anim-dir == 'rev' or $anim-dir == 'r'
  ) {
    $anim-drection: reverse;
  } @else if (
    $anim-dir == 'alternate' or $anim-dir == 'alt' or $anim-dir == 'a'
  ) {
    $anim-dir: alternate;
  } @else if ($anim-dir == 'alternate-reverse' or $anim-dir == 'alt-rev'
      or $anim-dir == 'alternatereverse' or $anim-dir == 'altrev'
      or $anim-dir == 'a-r' or $anim-dir == 'ar') {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of `#{inspect($anim-dir)}` for the ' +
        '`bounce` mixin';
  }

  @if (
    not $timing-func or $timing-func == true or $timing-func == 'none' or
    $timing-func == 'no' or $timing-func == 'n' or $timing-func == 'def' or
    $timing-func == 'default' or $timing-func == 'd' or
    $timing-func == 'ease'
  ) {
    // Take all potential values the user might pass to keep the default setting
    // and ensure that the timing function remains at that default
    $timing-func: null;
  }
  animation: bounce#{$anim-num} #{$timing} #{$timing-func}
              #{$delay} #{$iterations} #{$anim-dir} both;
  @if ($fwd-bck) {
    transform: translate3d(0, 0, 0);
    transform-style: preserve-3d;
  }

  @at-root {

    @keyframes bounce#{$anim-num} {
      @if ($in-or-out) {
        0% {
          animation-timing-function: ease-in;
          opacity: 0;
          transform: #{$dir-val1};
        }

        38% {
          animation-timing-function: ease-out;
          opacity: 1;
          transform: #{$dir-val2};
        }

        55% {
          animation-timing-function: ease-in;
          transform: #{$dir-val3};
        }

        @if (not $fwd-bck) {
          72%,
          90%,
          100% {
            animation-timing-function: ease-out;
            transform: #{$dir-val2};
          }
        } @else {
          72%,
          89%,
          100% {
            animation-timing-function: ease-out;
            transform: #{$dir-val2};
          }
        }

        81% {
          animation-timing-function: ease-in;
          transform: #{$dir-val4};
        }

        95% {
          animation-timing-function: ease-in;
          transform: #{$dir-val5};
        }
      } @else {
        0%,
        15%,
        38% {
          animation-timing-function: ease-out;
          transform: #{$dir-val1};
        }

        5% {
          animation-timing-function: ease-in;
          transform: #{$dir-val2};
        }

        25% {
          animation-timing-function: ease-in;
          transform: #{$dir-val3};
        }

        52% {
          animation-timing-function: ease-in;
          transform: #{$dir-val4};
        }

        70% {
          animation-timing-function: ease-out;
          transform: if(($direction != 'backward'), #{$dir-val1}, #{$xtra-val});
        }

        85% {
          opacity: 1;
        }

        100% {
          @if ($fwd-bck) {
            animation-timing-function: ease-in;
          }
          opacity: 0;
          transform: #{$dir-val5};
        }
      }
    }
  }
}


/// Adds bounciness to a given element, bouncing it in place.
///
/// @param {String} $direction [top] - The direction the animation will appear
/// to be bouncing towards.
/// @param {Time} $timing [.9s] The duration of the animation (s or ms).
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {Number|String} $iterations [null] - The number of iterations
/// to complete. If the value passed is not a number, it will be set to infinite
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// null assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for the
/// animation. The default of null applies the default timing function of ease.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $direction value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $iterations value
/// @throw Invalid $anim-dir value
@mixin bounciness(
  $direction: top,
  $timing: .9s,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: null,
  $anim-num: null
) {
  // Values for top $direction default
  $dir-val1: translateY(-45px);
  $dir-val2: translateY(-24px);
  $dir-val3: translateY(-12px);
  $dir-val4: translateY(-6px);
  $dir-val5: translateY(-4px);
  $dir-val6: translateY(0);

  @if (to-lower-case($direction) == 'bottom'
      or to-lower-case($direction) == 'b') {
    $dir-val1: translateY(45px);
    $dir-val2: translateY(24px);
    $dir-val3: translateY(12px);
    $dir-val4: translateY(6px);
    $dir-val5: translateY(4px);
    $dir-val6: translateY(0);
  } @else if (
    to-lower-case($direction) == 'left' or
    to-lower-case($direction) == 'l'
  ) {
    $dir-val1: translateX(-48px);
    $dir-val2: translateX(-26px);
    $dir-val3: translateX(-13px);
    $dir-val4: translateX(-6.5px);
    $dir-val5: translateY(-4px);
    $dir-val6: translateY(0);
  } @else if (
    to-lower-case($direction) == 'right' or to-lower-case($direction) == 'r'
  ) {
    $dir-val1: translateX(48px);
    $dir-val2: translateX(26px);
    $dir-val3: translateX(13px);
    $dir-val4: translateX(6.5px);
    $dir-val5: translateY(4px);
    $dir-val6: translateY(0);
  } @else if (to-lower-case($direction) != 'top'
      and to-lower-case($direction) != 't') {
    @error 'Invalid direction of `#{inspect($direction)}` for the `bounciness` mixin.';
  }

  @if type-of($timing) != 'number' {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `bounciness` ' +
        'mixin. The timing property must be a number.';
  } @else if unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not index('s' 'ms', unit($timing)) {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `bounciness` ' +
        'mixin. The timing property must be in either s or ms units.';
  } @else if unit($timing) == 'ms' and $timing % 10 == 0ms {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;
    // Get rid of possible leading zero in front of decimal place
    @if (str-slice($timing + '', 1, 2) == '0.') {
      $timing: unquote(str-slice($timing + '', 2));
    }
  }

  @if (
    $delay == 0 or $delay == 0s or $delay == 0ms or
    $delay == 'none' or $delay == 'no' or $delay == 'n' or
    $delay == 'n/a' or $delay == nil or not $delay
  ) {
    $delay: null;
  }
  @if $delay {
    @if (type-of($delay) != 'number') {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `bounciness` ' +
          'mixin. The delay property must be a number.';
    } @else if (unitless($delay)) {
      $delay: $delay * 1s;
    } @else if not index('s' 'ms', unit($delay)) {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `bounciness` ' +
          'mixin. The delay property must be in either s or ms units.';
    } @else if unit($delay) == 'ms' and $delay % 10 == 0ms {
      $delay: math.div($delay, 1000ms) * 1s;
      @if (str-slice($delay + '', 1, 2) == '0.') {
        $delay: #{str-slice($delay + '', 2)};
      }
    }
  } @else {
    $delay: null;
  }

  @if ($iterations) {
    @if (
      $iterations == 'infinite' or $iterations == 'inf' or $iterations == 'i'
    ) {
      $iterations: infinite;
    } @else if (
      (unitless($iterations) and type-of($iterations) == 'number') or
      $iterations == initial or $iterations == inherit
    ) {
      $iterations: $iterations;
    } @else {
      @error 'Invalid iteration-count value of `#{inspect($iterations)}` for the ' +
          '`slit` mixin.';
    }
  } @else {
    $iteratons: null;
  }

  @if (
    not $anim-dir or $anim-dir == 'none' or $anim-dir == 'no' or
    $anim-dir == 'n/a' or $anim-dir == 'n' or $anim-dir == 'default' or
    $anim-dir == 'def' or $anim-dir == 'normal' or $anim-dir == 'nor'
  ) {
    $anim-dir: null;
  } @else if ($anim-dir == 'reverse' or $anim-dir == 'rev' or $anim-dir == 'r') {
    $anim-drection: reverse;
  } @else if ($anim-dir == 'alternate' or $anim-dir == 'alt' or $anim-dir == 'a') {
    $anim-dir: alternate;
  } @else if (
    $anim-dir == 'alternate-reverse' or $anim-dir == 'alternatereverse' or
    $anim-dir == 'alt-rev' or $anim-dir == 'altrev' or $anim-dir == 'a-r' or
    $anim-dir == 'ar'
  ) {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of `#{inspect($anim-dir)}` for the ' +
        '`slit` mixin';
  }

  @if (not $timing-func or $timing-func == true or $timing-func == 'none'
      or $timing-func == 'no' or $timing-func == 'n' or $timing-func == 'def'
      or $timing-func == 'default' or $timing-func == 'd') {
    // Take all potential values the user might pass to keep the default setting
    // and ensure that the timing function remains at that default
    $timing-func: null;
  }

  @if not $anim-num {
    $anim-num: null;
  }
  animation: bounce#{$anim-num} #{$timing} #{$timing-func} #{$delay}
              #{$iterations} both;

  @at-root {
    @keyframes bounce#{$anim-num} {
      0% {
        animation-timing-function: ease-in;
        opacity: 1;
        transform: #{$dir-val1};
      }

      24% {
        opacity: 1;
      }

      25%,
      55%,
      75%,
      87% {
        animation-timing-function: ease-out;
        transform: #{$dir-val6};
      }

      40% {
        animation-timing-function: ease-in;
        transform: #{$dir-val2};
      }

      65% {
        animation-timing-function: ease-in;
        transform: #{$dir-val3};
      }

      82% {
        animation-timing-function: ease-in;
        transform: #{$dir-val4};
      }

      93% {
        animation-timing-function: ease-in;
        transform: #{$dir-val5};
      }

      100% {
        animation-timing-function: ease-out;
        opacity: 1;
        transform: #{$dir-val6};
      }
    }
  }
}


/// Generates the base visual styles for a button element.
///
/// @param {Color} $btn-background - The background of the button.
/// @param {Color} $btn-color - The button text color.
/// @param {Color} $btn-border - The border property for the buttton.
/// @param {Color} $btn-radius - The border radius property.
/// @param {Color} $btn-margin - The button's margin property.
/// @param {Color} $btn-padding - The button's padding property.
/// @param {Color} $btn-font-family - The button's font-family property.
/// @param {Color} $btn-font-size [1rem] - The button's font-size property.
/// @param {Color} $btn-font-weight [400] - The button's font-weight property.
/// @param {Color} $btn-transition [null] - The button's transition property.
/// By default, a null value here will have the mixin search for a global
/// $button-transition variable as is found in the variables file in this
/// library. If no global variable is found, it will apply the following
/// default: `background-color .2s ease-out, color .2s ease-out`.
///
/// @group Utilities
/// @require {mixin} disable-outline
/// @alias btn-base
@mixin button-base(
  $btn-background,
  $btn-color,
  $btn-border,
  $btn-radius,
  $btn-margin,
  $btn-padding,
  $btn-font-family,
  $btn-font-size: 1rem,
  $btn-font-weight: 400,
  $btn-transition: null
) {
  @if $btn-transition == null {
    $btn-transition: if(
      global-variable-exists(button-transition),
      $button-transition,
      (background-color .2s ease-out, color .2s ease-out)
    );
  } @else if (
    $btn-transition == false or $btn-transition == 'none' or
    $btn-transition == 'no' or $btn-transition == 'n/a'
  ) {
    $btn-transition: null;
  }
  @include disable-outline;
  background: $btn-background;
  border-radius: $btn-radius;
  border: $btn-border;
  color: $btn-color;
  cursor: pointer;
  display: inline-block;
  @if $btn-font-family and $btn-font-size {
    @if $btn-font-weight {
      font: $btn-font-weight $btn-font-size $btn-font-family;
    } @else {
      font: $btn-font-size $btn-font-family;
    }
  } @else {
    @if $btn-font-family {
      font-family: $btn-font-family;
    }
    @if $btn-font-size {
      font-size: $btn-font-size;
    }
    @if $btn-font-weight {
      font-weight: $btn-font-weight;
    }
  }
  margin: $btn-margin;
  padding: $btn-padding;
  text-align: center;
  @if $btn-transition {
    transition: $btn-transition;
  }
  vertical-align: middle;
}

/// Generates the base visual styles for a button element.
///
/// @param {Color} $btn-background - The background of the button.
/// @param {Color} $btn-color - The button text color.
/// @param {Color} $btn-border - The border property for the buttton.
/// @param {Color} $btn-radius - The border radius property.
/// @param {Color} $btn-margin - The button's margin property.
/// @param {Color} $btn-padding - The button's padding property.
/// @param {Color} $btn-font-family - The button's font-family property.
/// @param {Color} $btn-font-size [1rem] - The button's font-size property.
/// @param {Color} $btn-font-weight [400] - The button's font-weight property.
/// @param {Color} $btn-transition [null] - The button's transition property.
/// By default, a null value here will have the mixin search for a global
/// $button-transition variable as is found in the variables file in this
/// library. If no global variable is found, it will apply the following
/// default: `background-color .2s ease-out, color .2s ease-out`.
///
/// @group Utilities
/// @require {mixin} disable-outline
/// @alias button-base
@mixin btn-base(
  $btn-background,
  $btn-color,
  $btn-border,
  $btn-radius,
  $btn-margin,
  $btn-padding,
  $btn-font-family,
  $btn-font-size: 1rem,
  $btn-font-weight: 400,
  $btn-transition: null
) {
  @include button-base(
    $btn-background,
    $btn-color,
    $btn-border,
    $btn-radius,
    $btn-margin,
    $btn-padding,
    $btn-font-family,
    $btn-font-size,
    $btn-font-weight,
    $btn-transition
  );
}


/// Gives an element a depth effect based on Google's Material Design principles.
/// @link http://www.google.com/design/spec/layout/layout-principles.html#layout-principles-dimensionality
///
/// @param {Number} $depth - Depth level (must be between 0 and 5)
/// @param {Color} $color [#000] - The color of the s
///
/// @group Utilities
/// @require {function} top-shadow
/// @require {function} bottom-shadow
/// @throw Invalid $depth level
@mixin card-depth($depth, $color: #000) {
  @if ($depth == 0) {
    box-shadow: none;
  } @else if (type-of($depth) != 'number' or $depth < 0 or $depth > 5) {
    @error 'Invalid $depth of `#{inspect($depth)}` for `card` mixin. The ' +
        '$depth value must be a number greater than 0 and less than 5.';
  } @else {
    box-shadow: bottom-shadow($depth, $color), top-shadow($depth, $color);
  }
}


/// Uses clip path to change an element to the shape of a chevron arrow
///
/// @param {String} $direction [right] - The direction the chevron is pointing
/// @param {Color|Mixed} $bg [#fb8c00] - The color or background value.
/// @param {Length-Percentage} $size [15rem] - The size of the chevron.
/// If the $height property is not set explicitly, it is both height and width,
/// if $height is set explicitly, then this value sets only the width.
/// @param {Color} $fg-color [null] - The color of any text in the arrow.
/// @param {Length-Percentage} $height [$size] - The height of the chevron.
///
/// @group Shapes
/// @throw Invalid $direciton value
@mixin chevron(
  $direction: right,
  $bg: #fb8c00,
  $size: 15rem,
  $fg-color: null,
  $height: $size
) {
  background: $bg;

  @if ($fg-color) {
    color: $fg-color;
  }
  @if (to-lower-case($direction) == 'right'
      or to-lower-case($direction) == 'r') {
    clip-path: polygon( 75% 0, 100% 50%, 75% 100%, 0 100%,
                        25% 50%, 0 0);
  } @else if (
    to-lower-case($direction) == 'left' or
    to-lower-case($direction) == 'l'
  ) {
    clip-path: polygon( 100% 0, 75% 50%, 100% 100%, 25% 100%,
                        0 50%, 25% 0 );
  } @else if (
    to-lower-case($direction) == 'up' or
    to-lower-case($direction) == 'u' or
    to-lower-case($direction) == 'top' or
    to-lower-case($direction) == 't'
  ) {
    clip-path: polygon( 100% 100%, 50% 75%, 0 100%, 0 25%,
                        50% 0, 100% 25% );
  } @else if (
    to-lower-case($direction) == 'down' or
    to-lower-case($direction) == 'd' or
    to-lower-case($direction) == 'bottom' or
    to-lower-case($direction) =='b'
  ) {
    clip-path: polygon( 100% 75%, 50% 100%, 0 75%, 0 0,
                        50% 25%, 100% 0 );
  } @else {
    @error 'Invalid direction value of `#{inspect($direction)}` for the `chevron` mixin';
  }

  height: $height;
  width: $size;
}


/// Turns the element into a circle.
///
/// @group Shapes
@mixin circle {
  background-clip: padding-box;
  border-radius: 50%;
}


/// Applies the float clearing 'clearfix' hack
/// @param {Keyword} $clear-val - The clear property's value. Can either be
/// left, right, or both.
///
/// @throw Invalid $clear-val value
///
/// @group Utilities
@mixin clearfix($clear-val: both) {
  &:before,
  &:after {
    content: '';
    display: table;
  }

  &:after {
    clear: $clear-val;
  }
  @if ($clear-val != 'both' and $clearVal != 'left' and $clearVal != 'right') {
    @error '`#{inspect($clearVal)}` is not a valid value for the clear property in ' +
      'the `clearfix` mixin. Value must be either `left`, `right`, or `both`.';
  }
}


/// Animates the shift between any given quantity of colors.
///
/// @param {List} $colors [()] - A list of colors that the animation will shift
/// between, one into the next.
/// @param {String|Number} $timing [null] - The amount of time it takes the
/// animation to shift from one color into the next one. This value must be in
/// either milliseconds (ms) or seconds (s). If a only a unit-less number is
/// passed, it will be assumed that the value is in seconds. When no argument is
/// passed, the default timing is 2s per color shift.
/// @param {String|Number} $delay [null] - The amount of time before the color
/// shifting animation first starts. No delay is the default. This value must be
/// in either milliseconds (ms) or seconds (s). If a only a unit-less number is
/// passed, it will be assumed that the value is in seconds.
/// @param {Boolean|String} $infinite [false] - Determines whether or not the
/// color shifting animation will go on infinitely.
/// @param {Boolean|String} $alternate [null] - When true, this will reverse the
/// order of the color shift when it refgaches the end of the animation,
/// otherwise the animation will restart at the first color. $infinite must be
/// true for $alternate to take effect.
/// @param {Timing-Function} $timing-func [linear] - The timing function for the
/// animation's shifting affect.
/// @param {String} $bg-or-fg [null] - Determines if animation will shift the
/// background-color or the font color. Null value defaults to the background.
/// @param {Number|String} $anim-num [null] - If the color-shifter mixin is used
/// used more than once in a stylesheet with different values, you can pass a
/// number or string to the mixin here that gets appeneded to end of the
/// animation name so that the animations do not overwrite each other.
///
/// @group Animations
/// @throw Not enough colors listed in $colors.
/// @throw Invalid $bg-or-fg value.
@mixin color-shifter(
  $colors: (),
  $timing: null,
  $delay: null,
  $infinite: false,
  $alternate: null,
  $timing-func: linear,
  $bg-or-fg: null,
  $anim-num: null
) {
  @if (length($colors) < 2) {
    @error 'You need at least 2 colors in order to use the color-shifter mixin.';
  }
  // The list of percentage values to be used in the keyframes
  $interval-values: ();
  // Total number of those values after 0%
  $num-intervals: length($colors) - 1;
  // The amount to count up by from 0% to get to 100% in the keyframes
  $interval-multiple: math.div(100, $num-intervals);
  // The unit-less value of the last interval determined for the keyframes
  $last-interval: 0;
  // The unit-less value of the current interval being added to the keyframes
  $current-interval: 0;
  // Append the current interval (0%) to the interval list for the keyframes
  $interval-values: append($interval-values, 0);
  // The combination variable for $infinite and $alternate
  $inf-alt: null;
  // Generate the full list of intervals for the keyframes
  @for $k from 1 through $num-intervals {
    $current-interval: $last-interval + $interval-multiple;
    $interval-values: append($interval-values, $current-interval);
    $last-interval: $current-interval;
  }

  // If no argument passed to $timing, create the default timing of 2s per color
  @if not $timing {
    $timing: length($colors) * 2s
  } @else {
    @if type-of($timing) != 'number' {
      @error 'Invalid timing value of `#{inspect($timing)}` for the `color-shifter` ' +
          'mixin. The timing property must be a number.';
    }
    $timing: $timing * length($colors);
    @if (unitless($timing)) {
      // If no there is no unit for $timing, assume seconds
      $timing: $timing * 1s;
    } @else if not index('s' 'ms', unit($timing)) {
      @error 'Invalid timing value of `#{inspect($timing)}` for the `color-shifter` ' +
          'mixin. The timing property must be in either s or ms units.';
    } @else if (($timing % 10) == 0ms) {
      // If time in ms would be shorter as seconds, convert it
      $timing: math.div($timing, 1000ms) * 1s;
      // Get rid of possible leading zero in front of decimal place
      @if (str-slice($timing + '', 1, 2) == '0.') {
        $timing: unquote(str-slice($timing + '', 2));
      }
    }
  }

  @if (
    $delay == 0 or $delay == 0s or $delay == 0ms or
    $delay == 'none' or $delay == 'no' or $delay == 'n' or
    $delay == 'n/a' or $delay == nil or not $delay
  ) {
    $delay: null;
  }
  @if $delay {
    @if (type-of($delay) != 'number') {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `color-shifter` ' +
          'mixin. The delay property must be a number.';
    } @else if (unitless($delay)) {
      $delay: $delay * 1s;
    } @else if not index('s' 'ms', unit($delay)) {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `color-shifter` ' +
          'mixin. The delay property must be in either s or ms units.';
    } @else if ($delay % 10 == 0ms) {
      $delay: math.div($delay, 1000ms) * 1s;
      @if (str-slice($delay + '', 1, 2) == '0.') {
        $delay: #{str-slice($delay + '', 2)};
      }
    }
    $delay: #{' ' + $delay};
  } @else {
    $delay: null;
  }

  // Allow for multiple types of 'true' input for $infinite and $alternate
  @if ($infinite == true or $infinite == 'yes'
      or $infinite == 'y' or $infinite == 'inf'
      or $infinite == 'i') {
    $inf-alt: #{' ' + infinite};

    @if ($alternate == true or $alternate == 'yes'
        or $alternate == 'y'
        or $alternate == 'alt'
        or $alternate == 'a') {
      $inf-alt: #{' ' + infinite alternate};
    }
  }

  @if ($bg-or-fg == 'foreground' or $bg-or-fg == 'fg' or $bg-or-fg == 'f'
      or $bg-or-fg == 'font' or $bg-or-fg == 'text' or $bg-or-fg == 'txt'
      or $bg-or-fg == 'color' or $bg-or-fg == 'col' or $bg-or-fg == 'c') {
    $bg-or-fg: 'color';
  } @else if (not $bg-or-fg or $bg-or-fg == 'background' or $bg-or-fg == 'back'
      or $bg-or-fg == 'bck' or $bg-or-fg == 'bg' or $bg-or-fg == 'bckgrnd'
      or $bg-or-fg == 'background-color' or $bg-or-fg == 'bg-col'
      or $bg-or-fg == 'bgcol' or $bg-or-fg == 'bc' or $bg-or-fg == 'bgc') {
    $bg-or-fg: 'background-color'
  } @else {
    @error 'Invalid $bg-or-fg value or `#{inspect($bg-or-fg)}` for the ' +
        '`color-shifter` mixin.';
  }
  animation: color-change#{$anim-num} #{$timing}
              #{$timing-func}#{$delay}#{$inf-alt} both;

  @at-root {
    @keyframes color-change#{$anim-num} {
      $index: 1;
      @each $interval in $interval-values {
        $rounded-val: round($interval * 1000) * 0.001;

        #{$rounded-val + '%'} {
          #{$bg-or-fg}: nth($colors, $index);
        }
        $index: $index + 1
      }
    }
  }
}


/// Fully cover an area with an element.
///
/// @param {Number} $z-val [999] - A z-index number value
/// @param {Color|Mixed} $bg-val [null] - A shorthand background value
/// @param {Number} $opacity [null] - A decimal value between 0 and 1
///
/// @group Utilities
@mixin cover($z-val: 999, $bg-val: null, $opacity: null) {
  @if ($bg-val) {
    background: $bg-val;
  }
  height: 100%;
  left: 0;
  @if ($opacity and unitless($opacity) and $opacity >= 0 and $opacity <= 1) {
    opacity: $opacity;
  } @else if $opacity {
    @error 'Invalid opacity value of `#{inspect($opacity)}` for the ' +
        '`cover` mixin.';
  }
  position: absolute;
  top: 0;
  width: 100%;
  @if ($z-val and type-of($z-val) == 'number' and unitless($z-val)) {
    z-index: $z-val;
  }
}


/// Uses clip path to change an element to a Christian cross shape.
///
/// @param {Color|Mixed} $bg [#fb8c00] The color or background value
/// @param {Length-Percentage} $size [15rem] - The height and width.
/// @param {Color} $fg-color [null] The color of any text in the shape.
///
/// @group Shapes
@mixin cross($bg: #fb8c00, $size: 15rem, $fg-color: null) {
  background: $bg;

  @if ($fg-color) {
    color: $fg-color;
  }
  clip-path: polygon( 10% 25%, 35% 25%, 35% 0, 65% 0,
                      65% 25%, 90% 25%, 90% 50%, 65% 50%,
                      65% 100%, 35% 100%, 35% 50%, 10% 50% );
  height: $size;
  width: $size;
}


/// Uses clip path to change an element to a diamond rhombus shape.
///
/// @param {Color|Mixed} $bg [#fb8c00] The color or background value.
/// @param {Length-Percentage} $size [15rem] - The size of the shape. If
/// the $height property is not set explicitly, it is both height and width, if
/// $height is set explicitly, then this value sets only the width.
/// @param {Color} $fg-color [null] The color of any text in the shape
/// @param {Length-Percentage} $height [$size] The height of the shape.
///
/// @group Shapes
@mixin diamond($bg: #fb8c00, $size: 15rem, $fg-color: null, $height: $size) {
  background: $bg;

  @if ($fg-color) {
    color: $fg-color;
  }
  clip-path: polygon(50% 0, 100% 50%, 50% 100%, 0 50%);
  height: $height;
  width: $size;
}


/// Generates an animation that fades an element in or out. If a forward or
/// backward direction is chosen to augment the fade, it is recommended that
/// the `animation-stage` mixin be used on the parent element.
///
/// @param {String|Boolean} $in-or-out [in] - Determines if the element will
/// fade `in` (or true, `i`) our `out` (or false, `o`).
/// @param {String} $direction [null] - Will optionally either fade in from
/// this direction or fade out towards this direction.
/// @param {Time} $timing [null] - The duration of the animation (s or ms).
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {Number|String} $iterations [null] - The number of iterations
/// to complete. If the value passed is not a number, it will be set to infinite.
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// null assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for the
/// animation. A null value passed here will default to the recommended timing
/// function for this animation of `cubic-bezier(.39, .575, .565, 1)`.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $in-or-out value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $iterations value
/// @throw Invalid $anim-dir value
@mixin fade(
  $in-or-out: in,
  $direction: null,
  $timing: null,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: null,
  $anim-num: null
) {
  // Default values for a fade in with no direction
  $opacity-val1: 0;
  $opacity-val2: 1;
  $trans-val1: null;
  $trans-val2: null;
  $temp-val: null;
  $fwd-bck: false;

  // Input scrubbing
  @if ($in-or-out == true or $in-or-out == 'in' or $in-or-out == 'i') {
    $in-or-out: true;
  } @else if ($in-or-out == false or $in-or-out == 'out' or $in-or-out == 'o') {
    $in-or-out: false;
  } @else {
    @error 'Invalid $in-or-out value of `#{inspect($in-or-out)}` for the `fade` mixin.';
  }

  @if $direction {
    @if (
      to-lower-case($direction) == 'bottom' or
      to-lower-case($direction) == 'btm' or
      to-lower-case($direction) == 'b'
    ) {
      $trans-val1: translateY(50px);
      $trans-val2: translateY(0);
    } @else if (
      to-lower-case($direction) == 'forwards' or
      to-lower-case($direction) == 'forward' or
      to-lower-case($direction) == 'fwd' or
      to-lower-case($direction) == 'fw' or
      to-lower-case($direction) == 'f'
    ) {
      $fwd-bck: true;
      $trans-val1: translateZ(-80px);
      $trans-val2: translateZ(0);
    } @else if (
      to-lower-case($direction) == 'backwards' or
      to-lower-case($direction) == 'backward' or
      to-lower-case($direction) == 'bckwrd' or
      to-lower-case($direction) == 'back' or
      to-lower-case($direction) == 'bck' or
      to-lower-case($direction) == 'bw' or
      to-lower-case($direction) == 'b'
    ) {
      $fwd-bck: true;
      $trans-val1: translateZ(80px);
      $trans-val2: translateZ(0);
    } @else if (
      to-lower-case($direction) == 'top' or
      to-lower-case($direction) == 't' or
      to-lower-case($direction) == 'up' or
      to-lower-case($direction) == 'u'
    ) {
      $trans-val1: translateY(-50px);
      $trans-val2: translateY(0);
    } @else if (
      to-lower-case($direction) == 'left'or to-lower-case($direction) == 'l'
    ) {
      $trans-val1: translateX(-50px);
      $trans-val2: translateX(0);
    } @else if (
      to-lower-case($direction) == 'right' or to-lower-case($direction) == 'r'
    ) {
      $trans-val1: translateX(50px);
      $trans-val2: translateX(0);
    } @else if (
      to-lower-case($direction) == 'top-left' or
      to-lower-case($direction) == 'topleft' or
      to-lower-case($direction) == 't-l' or
      to-lower-case($direction) == 'tl' or
      to-lower-case($direction) == 'left-top' or
      to-lower-case($direction) == 'lefttop' or
      to-lower-case($direction) == 'l-t' or
      to-lower-case($direction) == 'lt'
    ) {
      $trans-val1: translateX(-50px) translateY(-50px);
      $trans-val2: translateX(0) translateY(0);
    } @else if (
      to-lower-case($direction) == 'top-right' or
      to-lower-case($direction) == 'topright' or
      to-lower-case($direction) == 't-r' or
      to-lower-case($direction) == 'tr' or
      to-lower-case($direction) == 'right-top' or
      to-lower-case($direction) == 'righttop' or
      to-lower-case($direction) == 'r-t' or
      to-lower-case($direction) == 'rt'
    ) {
      $trans-val1: translateX(50px) translateY(-50px);
      $trans-val2: translateX(0) translateY(0);
    } @else if (
      to-lower-case($direction) == 'bottom-right' or
      to-lower-case($direction) == 'bottomright' or
      to-lower-case($direction) == 'b-r' or
      to-lower-case($direction) == 'br' or
      to-lower-case($direction) == 'right-bottom' or
      to-lower-case($direction) == 'rightbottom' or
      to-lower-case($direction) == 'r-b' or
      to-lower-case($direction) == 'rb'
    ) {
      $trans-val1: translateX(50px) translateY(50px);
      $trans-val2: translateX(0) translateY(0);
    } @else if (
      to-lower-case($direction) == 'bottom-left' or
      to-lower-case($direction) == 'bottomleft' or
      to-lower-case($direction) == 'b-l' or
      to-lower-case($direction) == 'bl' or
      to-lower-case($direction) == 'left-bottom' or
      to-lower-case($direction) == 'leftbottom' or
      to-lower-case($direction) == 'l-b' or
      to-lower-case($direction) == 'lb'
    ) {
      $trans-val1: translateX(-50px) translateY(50px);
      $trans-val2: translateX(0) translateY(0);
    } @else {
      @error 'Invalid direction of `#{inspect($direction)}` chosen for the ' +
          '`fade` mixin.';
    }
  } @else {
    $direction: null;
  }

  @if not $in-or-out {
    // Swap values for fade-out state
    $temp-val: $opacity-val1;
    $opacity-val1: $opacity-val2;
    $opacity-val2: $temp-val;

    $temp-val: $trans-val1;
    $trans-val1: $trans-val2;
    $trans-val2: $temp-val;
  }

  @if not $timing {
    @if ($in-or-out) {
      $timing: if((not $direction), 1.2s, .6s);
    } @else {
      $timing: if((not $direction), 1s, .7s);
    }
  }
  @if type-of($timing) != 'number' {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `fade` ' +
        'mixin. The timing property must be a number.';
  } @else if unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if (not index('s' 'ms', unit($timing)) ){
    @error 'Invalid timing value of `#{inspect($timing)}` for the `fade` mixin.' +
        'The timing property must be in either s or ms units.';
  } @else if (unit($timing) == 'ms' and $timing % 100 == 0ms) {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;
  }

  @if (
    $delay == 0 or $delay == 0s or $delay == 0ms or
    $delay == 'none' or $delay == 'no' or $delay == 'n' or
    $delay == 'n/a' or $delay == nil or not $delay
  ) {
    $delay: null;
  }
  @if $delay {
    @if (type-of($delay) != 'number') {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `fade` mixin.' +
          'The delay property must be a number.';
    } @else if (unitless($delay)) {
      // If no there is no unit for $delay, assume seconds
      $delay: $delay * 1s;
    } @else if not index('s' 'ms', unit($delay)) {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `fade` mixin.' +
          'The delay property must be in either s or ms units.';
    } @else if (unit($delay) == 'ms' and $delay % 100 == 0ms) {
      // If time in ms would be shorter as seconds, convert it
      $delay: math.div($delay, 1000ms) * 1s;
    }
  } @else {
    $delay: null;
  }

  @if ($iterations) {
    @if (
      $iterations == 'infinite' or $iterations == 'inf' or $iterations == 'i'
    ) {
      $iterations: infinite;
    } @else if (
      (unitless($iterations) and type-of($iterations) == 'number') or
      $iterations == initial or $iterations == inherit
    ) {
      $iterations: $iterations;
    } @else {
      @error 'Invalid iteration-count value of `#{inspect($iterations)}` for the ' +
          '`fade` mixin.';
    }
  }

  @if (
    not $anim-dir or $anim-dir == 'none' or $anim-dir == 'no' or
    $anim-dir == 'n/a' or $anim-dir == 'n' or $anim-dir == 'default' or
    $anim-dir == 'def' or $anim-dir == 'normal' or $anim-dir == 'nor'
  ) {
    $anim-dir: null;
  } @else if ($anim-dir == 'reverse' or $anim-dir == 'rev' or $anim-dir == 'r') {
    $anim-drection: reverse;
  } @else if ($anim-dir == 'alternate' or $anim-dir == 'alt' or $anim-dir == 'a') {
    $anim-dir: alternate;
  } @else if (
    $anim-dir == 'alternate-reverse' or $anim-dir == 'alternatereverse' or
    $anim-dir == 'alt-rev' or $anim-dir == 'altrev' or $anim-dir == 'a-r' or
    $anim-dir == 'ar'
  ) {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of `#{inspect($anim-dir)}` for the ' +
        '`fade` mixin';
  }

  @if (not $timing-func or $timing-func == true or $timing-func == 'none'
      or $timing-func == 'no' or $timing-func == 'n' or $timing-func == 'def'
      or $timing-func == 'default' or $timing-func == 'd') {
    // Take all potential values the user might pass to keep the default setting
    // and ensure that the timing function remains at that default
    @if ($in-or-out) {
      $timing-func: cubic-bezier(.39, .575, .565, 1);
    } @else {
      $timing-func: if(
        (not $direction),
          ease-out,
          cubic-bezier(.25, .46, .45, .94)
      );
    }
  }

  @if not $anim-num {
    $anim-num: null;
  }
  animation: fade#{$anim-num} #{$timing} #{$timing-func}
              #{$delay} #{$iterations} #{$anim-dir} both;
  @if ($fwd-bck) {
    transform: translate3d(0, 0, 0);
    transform-style: preserve-3d;
  }

  @at-root {
    @keyframes fade#{$anim-num} {
      0% {
        opacity: $opacity-val1;
        @if $direction {
          transform: $trans-val1;
        }
      }

      100% {
        opacity: $opacity-val2;
        @if $direction {
          transform: $trans-val2;
        }
      }
    }
  }
}


///
/// The following section, up to the child-index mixin, is a fork of family.scss
/// @author Lucas Bonomi < @lukyvj -- lucasbonomi.com >
/// Taken from the family.scss library - http://lukyvj.github.io/family.scss/
/// Copyright 2016 - MIT Licence
///

/// Select all children from the first to `$num`.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Integer} $num - All child elements counted from the first to this
/// number will be selected.
///
/// @group Utilities
@mixin first($num: 1) {
  @if ($num == 1) {
    &:first-child {
      @content;
    }
  } @else {
    &:nth-child(-n + #{$num}) {
      @content;
    }
  }
}

/// Select all children from the last to `$num`.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Integer} $num - All child elements counted from the last to this
/// number will be selected.
///
/// @group Utilities
@mixin last($num: 1) {
  @if ($num == 1) {
    &:last-child {
      @content;
    }
  } @else {
    &:nth-last-child(-n + #{$num}) {
      @content;
    }
  }
}

/// Select all children after the first to `$num`.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Integer} $num - After the first child elements of this quantity, all
/// children are selected.
///
/// @group Utilities
@mixin after-first($num) {
  &:nth-child(n + #{$num + 1}) {
    @content;
  }
}

/// Select all children before `$num` from the last.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Integer} $num - This number back from the last child element will
/// be selected.
///
/// @group Utilities
@mixin from-end($num) {
  &:nth-last-child(#{$num}) {
    @content;
  }
}

/// Select all children between `$first` and `$last`.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Integer} $first - The first child element that will be selected,
/// counted from the start. This child element and all others up to and
/// including $last are selected.
/// @param {Integer} $last - The last child element that will be selected,
/// counted from the start. This child element and all before it up to and
/// including $first are selected.
///
/// @group Utilities
@mixin between($first, $last) {
  &:nth-child(n + #{$first}):nth-child(-n + #{$last}) {
    @content;
  }
}

/// Select all evenly numbered children between `$first` and `$last`.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Integer} $first - The first child element of the selection range,
/// counted from the start. Will only be selected if it is evenly numbered.
/// @param {Integer} $last - The last child element of the selection range,
/// counted from the start. WIll only be selected if it is evenly numbered.
///
/// @group Utilities
@mixin even-between($first, $last) {
  &:nth-child(even):nth-child(n + #{$first}):nth-child(-n + #{$last}) {
    @content;
  }
}

/// Select all odd children between `$first` and `$last`.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Integer} $first - The first child element of the selection range,
/// counted from the start. Will only be selected if it is an odd number.
/// @param {Integer} $last - The last child element of the selection range,
/// counted from the start. WIll only be selected if it is an odd number.
///
/// @group Utilities
@mixin odd-between($first, $last) {
  &:nth-child(odd):nth-child(n + #{$first}):nth-child(-n + #{$last}) {
    @content;
  }
}

/// Select all `$num` children between `$first` and `$last`.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Integer} $num - Select every $num items for the range set by $first
/// and $last parameters.
/// @param {Integer} $first - The starting number for the selection range,
/// counted from the start.
/// @param {Integer} $last - The ending number for the selection range, counted
/// from the start.
///
/// @group Utilities
@mixin n-between($num, $first, $last) {
  &:nth-child(#{$num}n):nth-child(n + #{$first}):nth-child(-n + #{$last}) {
    @content;
  }
}

/// Select all children but `$num`.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Integer} $num - All child elements are selected except for $num.
///
/// @group Utilities
@mixin all-but($num) {
  &:not(:nth-child(#{$num})) {
    @content;
  }
}

/// Select each child every `$num`.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Integer} $num - Every $num child elements, a child is selected.
///
/// @group Utilities
/// @alias every
@mixin each($num) {
  &:nth-child(#{$num}n) {
    @content;
  }
}

/// Select each child every `$num`.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Integer} $num - Every $num child elements, a child is selected.
///
/// @group Utilities
/// @alias each
@mixin every($num) {
  &:nth-child(#{$num}n) {
    @content;
  }
}

/// Select the `$num` child from the start and the `$num` child from the last.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Integer} $num - The child element that is $num from the start, as
/// well as the child element that is $num from the end, will be selected.
///
/// @group Utilities
@mixin from-first-last($num) {
  &:nth-child(#{$num}),
  &:nth-last-child(#{$num}) {
    @content;
  }
}

/// Select the item in the middle of `$num` child. Only works with odd number
/// chain.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Integer} $num - Count $num child elements from the start and the
/// middle element of that selection range will be selected.
///
/// @group Utilities
@mixin middle($num) {
  &:nth-child(#{round($num * 0.5)}) {
    @content;
  }
}

/// Select all children between the `$num` first and the `$num` last.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Integer} $num - Count $num children from the start and from the end
/// and all other child elements except for those will be selected.
///
/// @group Utilities
@mixin all-but-first-last($num) {
  &:nth-child(n + #{$num}):nth-last-child(n + #{$num}) {
    @content;
  }
}

/// This quantity-query mixin will only select the first of `$limit` items. It
/// will not work if the quantity of child elements is different than `$limit`.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Integer} $limit - If the quantity of child elements is equal to
/// limit, the first of those elements is selected.
///
/// @group Utilities
@mixin first-of($limit) {
  &:nth-last-child(#{$limit}):first-child {
    @content;
  }
}

/// This quantity-query mixin will only select the last of `$limit` items. It
/// will not if there is not as many items as you set in `$limit`.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Integer} $limit - If the quantity of child elements is equal to
/// limit, the last of those elements is selected.
///
/// @group Utilities
@mixin last-of($limit) {
  &:nth-of-type(#{$limit}):nth-last-of-type(1) {
    @content;
  }
}

/// This quantity-query mixin will select every items if there is at least `$num`
/// items. It will not if there is not as much as item as you set in `$num`.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Integer} $num - If the number of child elements is equal to or
/// greater than this number, then all will be selected.
///
/// @group Utilities
@mixin at-least($num) {
  $selector: &;
  $child: nth(nth($selector, -1), -1);

  &:nth-last-child(n + #{$num}),
  &:nth-last-child(n + #{$num}) ~ #{$child} {
    @content;
  }
}

/// This quantity-query mixin will select every items if there is at most `$num`
/// items. It will not if there is not as much as item as you set in `$num`.'
///
/// @group Utilities
///
/// @param {number} $limit
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
@mixin at-most($num) {
  $selector: &;
  $child: nth(nth($selector, -1), -1);

  &:nth-last-child(-n + #{$num}):first-child,
  &:nth-last-child(-n + #{$num}):first-child ~ #{$child} {
    @content;
  }
}

/// This quantity-query mixin will select every items there is between `$min`
/// and `$max` items. If the quantity of child elements is less than the $min
/// or $greater than the $max, none will be selected. If the quantity is in
/// range, all will be selected.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Integer} $min - The minimum number of children
/// @param {Integer} $max - The maximum number of children
///
/// @group Utilities
@mixin in-between($min, $max) {
  $selector: &;
  $child: nth(nth($selector, -1), -1);

  &:nth-last-child(n + #{$min}):nth-last-child(-n + #{$max}):first-child,
  &:nth-last-child(n + #{$min}):nth-last-child(-n + #{$max}):first-child ~ #{$child} {
    @content;
  }
}

/// Select the first exact child element.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @group Utilities
@mixin first-child {
  &:first-of-type {
    @content;
  }
}

/// Select the last exact child element.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @group Utilities
@mixin last-child {
  &:last-of-type {
    @content;
  }
}

/// Select all evenly numbered child elements.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @group Utilities
@mixin even {
  &:nth-child(even) {
    @content;
  }
}

/// Select all odd numbered child elements.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @group Utilities
@mixin odd {
  &:nth-child(odd) {
    @content;
  }
}

/// Select only the first and last child element.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @group Utilities
@mixin first-last {
  &:first-child,
  &:last-child {
    @content;
  }
}

/// Will only select the child if it is unique. If it has any sibling elements
/// then none will be selected.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @group Utilities
/// @alias only
@mixin unique {
  &:only-child {
    @content;
  }
}

/// Will only select the child if it is unique. If it has any sibling elements
/// then none will be selected.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @group Utilities
/// @alias unique
@mixin only {
  &:only-child {
    @content;
  }
}

/// Will only select children if they are not unique. Meaning if there is at
/// least 2 children, the style is applied.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @group Utilities
@mixin not-unique {
  &:not(:only-child) {
    @content;
  }
}

/// This mixin is used to automatically sort z-index in numerical order. But it
/// can also sort them in reverse-numerical order, depending the parameters you
/// select.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Integer} $num - Number of children to index.
/// @param {String} $direction ['forward'] - Direction of the sort. Can be
/// `forward` or `backward`.
/// @param {Integer} $index [0] - Base indexing number for the sort.
///
/// @group Utilities
/// @throw Invalid $direction value
@mixin child-index($num, $direction: 'forward', $index: 0) {
  @for $i from 1 through $num {
    @if (to-lower-case($direction) == 'forward'
        or to-lower-case($direction) == 'fwd'
        or to-lower-case($direction) == 'fw'
        or to-lower-case($direction) == 'f') {
      &:nth-child(#{$i}) {
        z-index: order-index($i, $index);
        @content;
      }
    } @else if (to-lower-case($direction) == 'backward'
        or to-lower-case($direction) == 'back'
        or to-lower-case($direction) == 'bckwrd'
        or to-lower-case($direction) == 'bw'
        or to-lower-case($direction) == 'bck'
        or to-lower-case($direction) == 'b') {
      &:nth-last-child(#{$i}) {
        z-index: order-index($i, $index);
        @content;
      }
    } @else {
      @error 'Invalid direction value of `#{inspect($direction)}` for the `child-index`' +
          ' mixin. You must choose a direction of either `forward` or ' +
          '`backward`.';
    }
  }
}

/// Uses flexbox to vertically and/or horizontally center an element, as well as
/// set its flex-direction property.
///
/// @param {Boolean|String} $horizontal [true] - Pass true to center the
/// contents horizontally.
/// @param {Boolean|String} $vertical [true] - Pass true to center the
/// contents vertically.
/// @param {Keyword|String} $flex-dir ['row'] - The flex-direction value.
///
/// @throw Invalid $horizontal value
/// @throw Invalid $vertical value
/// @throw Invalid $flex-dir value
@mixin flex-center($horizontal: true, $vertical: true, $flex-dir: 'row') {
  $swap: $horizontal;
  $f-dir: row;
  $orientation: horizontal;

  @if ($horizontal == true or $horizontal == 't' or $horizontal == 'yes'
      or $horizontal == 'y') {
    $horizontal: true;
  } @else if (not $horizontal or $horizontal == 'f' or $horizontal == 'no'
      or $horizontal == 'n') {
    $horizontal: false;
  } @else {
    @error 'Invalid $horizontal value for the `flex-center` mixin. ' +
        'You must pass either true or false.';
  }

  @if ($vertical == true or $vertical == 't' or $vertical == 'yes'
      or $vertical == 'y') {
    $vertical: true;
  } @else if (not $vertical or $vertical == 'f' or $vertical == 'no'
      or $vertical == 'n') {
    $vertical: false;
  } @else {
    @error 'Invalid $vertical value for the `flex-center` mixin. ' +
        'You must pass either true or false.';
  }

  @if $flex-dir {
    @if ($flex-dir == 'row-reverse' or $flex-dir == 'r-r' or $flex-dir == 'rr'
        or $flex-dir == 'row-rev' or $flex-direction == 'rowrev') {
      $f-dir: row-reverse;
    } @else if ($flex-dir == 'column' or $flex-dir == 'col' or $flex-dir == 'c'
        or str-slice($flex-dir + '', 1, 4) == 'vert' or $flex-dir == 'v') {
      $f-dir: column;
      $orientation: vertical;
    } @else if ($flex-dir == 'column-reverse' or $flex-dir == 'col-reverse'
        or $flex-dir == 'col-rev' or $flex-dir == 'colrev' or $flex-dir == 'c-r'
        or $flex-dir == 'c-rev' or $flex-dir == 'cr') {
      $f-dir: column-reverse;
      $orientation: vertical;
    } @else if ($flex-dir != 'row' and $flex-dir != 'r' and $flex-dir != 'normal'
        and str-slice($flex-dir + '', 1, 5) != 'horiz' and $flex-dir != 'h') {
      @error 'Invalid `$flex-dir` value passed to the `flex-center` mixin.';
    }

    @if ($orientation == 'vertical') {
      $horizontal: $vertical;
      $vertical: $swap;
    }
    flex-direction: $f-dir;
  }
  @if $vertical {
    align-items: center;
  }
  display: flex;
  @if $horizontal {
    justify-content: center;
  }
}


/// Generates an animation that flips an element over. The element this mixin is
/// applied to must have a front-face and a back-face child element. It is
/// recommended that you use this mixin in conjunction with the
/// `animation-front-face` and 'animation-back-face' mixins for card 'face'
/// child elements and the 'animation-stage` mixin for the parent element.
///
/// @param {String} $direction [top] - The direction the scale effect causes
/// the element to seem to be moving towards
/// @param {String} $axis [horizontal] - The axis the element will flip over
/// @param {Time} $timing [.5s] - The duration of the animation (s or ms)
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {Number|String} $iterations [null] - The number of iterations
/// to complete. If the value passed is not a number, it will be set to infinite
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// null assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for the
/// animation. A null value passed here will default to the recommended timing
/// function for this animation of `cubic-bezier(.455, .03, .515, .955)`;
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $direction value
/// @throw Invalid $axis value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $iterations value
/// @throw Invalid $anim-dir value
@mixin flip(
  $direction: 'top',
  $axis: 'horizontal',
  $timing: .5s,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: null,
  $anim-num: null
) {
  // Default tranform values for $direction of `top` and $axis of `horizontal`
  $trans-val1: rotateX(0);
  $trans-val2: rotateX(180deg);

  // Input scrubbing
  @if $direction {
    @if (
      to-lower-case($direction) == 'bottom' or
      to-lower-case($direction) == 'btm' or
      to-lower-case($direction) == 'b'
    ) {
      $direction: 'bottom';
    } @else if (
      to-lower-case($direction) == 'forwards' or
      to-lower-case($direction) == 'forward' or
      to-lower-case($direction) == 'fwd' or
      to-lower-case($direction) == 'fw' or
      to-lower-case($direction) == 'f'
    ) {
      $direction: 'forward';
    } @else if (
      to-lower-case($direction) == 'backwards' or
      to-lower-case($direction) == 'backward' or
      to-lower-case($direction) == 'bckwrd' or
      to-lower-case($direction) == 'back' or
      to-lower-case($direction) == 'bck' or
      to-lower-case($direction) == 'bw' or
      to-lower-case($direction) == 'b'
    ) {
      $direction: 'backward';
    } @else if (to-lower-case($direction) == 'top'
        or to-lower-case($direction) == 't'
        or to-lower-case($direction) == 'up'
        or to-lower-case($direction) == 'u') {
      $direction: 'top';
    } @else if (
      to-lower-case($direction) == 'left'or to-lower-case($direction) == 'l'
    ) {
      $direction: 'left';
    } @else if (
      to-lower-case($direction) == 'right' or to-lower-case($direction) == 'r'
    ) {
      $direction: 'right';
    } @else if (
      to-lower-case($direction) == 'top-left' or
      to-lower-case($direction) == 'topleft' or
      to-lower-case($direction) == 't-l' or
      to-lower-case($direction) == 'tl' or
      to-lower-case($direction) == 'left-top' or
      to-lower-case($direction) == 'lefttop' or
      to-lower-case($direction) == 'l-t' or
      to-lower-case($direction) == 'lt'
    ) {
      $direction: 'top-left';
    } @else if (
      to-lower-case($direction) == 'top-right' or
      to-lower-case($direction) == 'topright' or
      to-lower-case($direction) == 't-r' or
      to-lower-case($direction) == 'tr' or
      to-lower-case($direction) == 'right-top' or
      to-lower-case($direction) == 'righttop' or
      to-lower-case($direction) == 'r-t' or
      to-lower-case($direction) == 'rt'
    ) {
      $direction: 'top-right';
    } @else if (
      to-lower-case($direction) == 'bottom-right' or
      to-lower-case($direction) == 'bottomright' or
      to-lower-case($direction) == 'b-r' or
      to-lower-case($direction) == 'br' or
      to-lower-case($direction) == 'right-bottom' or
      to-lower-case($direction) == 'rightbottom' or
      to-lower-case($direction) == 'r-b' or
      to-lower-case($direction) == 'rb'
    ) {
      $direction: 'bottom-right';
    } @else if (
      to-lower-case($direction) == 'bottom-left' or
      to-lower-case($direction) == 'bottomleft' or
      to-lower-case($direction) == 'b-l' or
      to-lower-case($direction) == 'bl' or
      to-lower-case($direction) == 'left-bottom' or
      to-lower-case($direction) == 'leftbottom' or
      to-lower-case($direction) == 'l-b' or
      to-lower-case($direction) == 'lb'
    ) {
      $direction: 'bottom-left';
    } @else {
      @error 'Invalid direction of `#{inspect($direction)}` chosen for the `flip` mixin.';
    }
  } @else {
    @error 'You must choose a direction for the `flip` mixin.';
  }

  @if ($axis) {
    @if (to-lower-case($axis) == 'horizontal' or to-lower-case($axis) == 'horiz'
        or to-lower-case($axis) == 'horz' or to-lower-case($axis) == 'h') {
      $axis: 'horizontal';
    } @else if (to-lower-case($axis) == 'vertical'
        or to-lower-case($axis) == 'vert' or to-lower-case($axis) == 'ver'
        or to-lower-case($axis) == 'v') {
      $axis: 'vertical';
    } @else if (to-lower-case($axis) == 'diagonal'
        or to-lower-case($axis) == 'diagonal1' or to-lower-case($axis) == 'diag'
        or to-lower-case($axis) == 'diag1' or to-lower-case($axis) == 'd'
        or to-lower-case($axis) == 'd1') {
      $axis: 'diagonal1';
    } @else if (to-lower-case($axis) == 'diagonal2'
        or to-lower-case($axis) == 'diag2' or to-lower-case($axis) == 'd2') {
      $axis: 'diagonal2';
    } @else {
      @error 'Invalid axis of (#{inspect($axis)}) chosen for the `flip` mixin.';
    }
  } @else {
    @error 'You must choose an axis for the `flip` mixin.';
  }

  @if ($axis == 'horizontal') {
    @if $direction == 'bottom' {
      $trans-val2: rotateX(-180deg);
    } @else if ($direction == 'forward') {
      $trans-val1: translateZ(0) rotateX(0);
      $trans-val2: translateZ(160px) rotateX(-180deg);
    } @else if ($direction == 'backward') {
      $trans-val1: translateZ(0) rotateX(0);
      $trans-val2: translateZ(-260px) rotateX(180deg);
    } @else if ($direction != 'top') {
      @error 'Invalid direction value of `#{inspect($direction)}` with an $axis of ' +
          '`horizontal`. For a horizontal axis, you must choose a direction ' +
          'of either `top`, `bottom`, `backward`, or `forward`.';
    }
  } @else if ($axis == 'vertical') {
    $trans-val1: rotateY(0);
    $trans-val2: rotateY(180deg);
    @if ($direction == 'left') {
      $trans-val2: rotateY(-180deg);
    } @else if  ($direction == 'forward') {
      $trans-val1: translateZ(0) rotateY(0);
      $trans-val2: translateZ(160px) rotateY(180deg);
    } @else if ($direction == 'backward') {
      $trans-val1: translateZ(0) rotateY(0);
      $trans-val2: translateZ(160px) rotateY(180deg);
    } @else if ($direction != 'right') {
      @error 'Invalid direction value of `#{inspect($direction)}` with an $axis of ' +
      '`vertical`. For a vertical axis, you must choose a direction ' +
      'of either `left`, `right`, `backward`, or `forward`.';
    }
  } @else if ($axis == 'diagonal1') {
    $trans-val1: rotate3d(1, 1, 0, 0);
    $trans-val2: rotate3d(1, 1, 0, 180deg);
    @if ($direction == 'bottom-left') {
      $trans-val2: rotate3d(1, 1, 0, -180deg);
    } @else if ($direction == 'forward') {
      $trans-val1: translateZ(0) rotate3d(1, 1, 0, 0);
      $trans-val2: translateZ(160px) rotate3d(1, 1, 0, 180deg);
    } @else if ($direction == 'backward') {
      $trans-val1: translateZ(0) rotate3d(1, 1, 0, 0);
      $trans-val2: translateZ(-260px) rotate3d(1, 1, 0, -180deg);
    } @else if ($direction != 'top-right') {
      @error 'Invalid direction value of `#{inspect($direction)}` with an $axis of ' +
      '`diagonal1`. For the diagonal1 axis, you must choose a direction ' +
      'of either `top-right`, `bottom-left`, `backward`, or `forward`.';
    }
  } @else if ($axis == 'diagonal2') {
    $trans-val1: rotate3d(-1, 1, 0, 0);
    $trans-val2: rotate3d(-1, 1, 0, -180deg);
    @if ($direction == 'bottom-right') {
      $trans-val2: rotate3d(-1, 1, 0, 180deg);
    } @else if ($direction == 'forward') {
      $trans-val1: translateZ(0) rotate3d(-1, 1, 0, 0);
      $trans-val2: translateZ(160px) rotate3d(-1, 1, 0, 180deg);
    } @else if ($direction == 'backward') {
      $trans-val1: translateZ(0) rotate3d(-1, 1, 0, 0);
      $trans-val2: translateZ(-260px) rotate3d(-1, 1, 0, -180deg);
    } @else if ($direction != 'top-left') {
      @error 'Invalid direction value of `#{inspect($direction)}` with an $axis of ' +
      '`diagonal2`. For the diagonal1 axis, you must choose a direction ' +
      'of either `top-left`, `bottom-right`, `backward`, or `forward`.';
    }
  }

  @if type-of($timing) != 'number' {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `flip` ' +
        'mixin. The timing property must be a number.';
  } @else if unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not index('s' 'ms', unit($timing)) {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `flip` mixin.' +
        'The timing property must be in either s or ms units.';
  } @else if ($timing % 10 == 0ms) {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;
  }

  @if (
    $delay == 0 or $delay == 0s or $delay == 0ms or
    $delay == 'none' or $delay == 'no' or $delay == 'n' or
    $delay == 'n/a' or $delay == nil or not $delay
  ) {
    $delay: null;
  }
  @if $delay {
    @if (type-of($delay) != 'number') {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `flip` mixin.' +
          'The delay property must be a number.';
    } @else if (unitless($delay)) {
      // If no there is no unit for $delay, assume seconds
      $delay: $delay * 1s;
    } @else if not index('s' 'ms', unit($delay)) {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `flip` mixin.' +
          'The delay property must be in either s or ms units.';
    } @else if ($delay % 10 == 0ms) {
      // If time in ms would be shorter as seconds, convert it
      $delay: math.div($delay, 1000ms) * 1s;
    }
  } @else {
    $delay: null;
  }

  @if ($iterations) {
    @if (
      $iterations == 'infinite' or $iterations == 'inf' or $iterations == 'i'
    ) {
      $iterations: infinite;
    } @else if (
      (unitless($iterations) and type-of($iterations) == 'number') or
      $iterations == initial or $iterations == inherit
    ) {
      $iterations: $iterations;
    } @else {
      @error 'Invalid iteration-count value of `#{inspect($iterations)}` for the ' +
          '`flip` mixin.';
    }
  } @else {
    $iterations: null;
  }

  @if (
    not $anim-dir or $anim-dir == 'none' or $anim-dir == 'no' or
    $anim-dir == 'n/a' or $anim-dir == 'n' or $anim-dir == 'default' or
    $anim-dir == 'def' or $anim-dir == 'normal' or $anim-dir == 'nor'
  ) {
    $anim-dir: null;
  } @else if ($anim-dir == 'reverse' or $anim-dir == 'rev' or $anim-dir == 'r') {
    $anim-drection: reverse;
  } @else if ($anim-dir == 'alternate' or $anim-dir == 'alt' or $anim-dir == 'a') {
    $anim-dir: alternate;
  } @else if (
    $anim-dir == 'alternate-reverse' or $anim-dir == 'alternatereverse' or
    $anim-dir == 'alt-rev' or $anim-dir == 'altrev' or $anim-dir == 'a-r' or
    $anim-dir == 'ar'
  ) {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of `#{inspect($anim-dir)}` for the ' +
        '`flip` mixin';
  }

  @if (not $timing-func or $timing-func == true or $timing-func == 'none'
      or $timing-func == 'no' or $timing-func == 'n' or $timing-func == 'def'
      or $timing-func == 'default' or $timing-func == 'd') {
    // Take all potential values the user might pass to keep the default setting
    // and ensure that the timing function remains at that default
    $timing-func: cubic-bezier(.455, .03, .515, .955);
  }

  @if not $anim-num {
    $anim-num: null;
  }
  animation: flip#{$anim-num} #{$timing} #{$timing-func}
              #{$delay} #{$iterations} #{$anim-dir} both;
  transform: translate3d(0, 0, 0);
  transform-style: preserve-3d;
  @include only-moz {
    backface-visibility: hidden;
  }

  @at-root {
    @keyframes flip#{$anim-num} {
      0% {
                transform: $trans-val1;
      }

      100% {
                transform: $trans-val2;
      }
    }
  }
}


/// Generates an animation that flips an element over while scaling it. The
/// element this mixin is applied to must have a front-face and a back-face
/// child element. It is recommended that you use this mixin in conjunction with
/// the `animation-front-face` and 'animation-back-face' mixins for card `face`
/// child elements and the 'animation-stage` mixin for the parent element.
///
/// @param {String} $direction [right] - The direction the scale effect causes
/// the element to seem to be moving towards
/// @param {String} $axis [horizontal] - The axis the element will flip over
/// @param {Time} $timing [.5s] - The duration of the animation (s or ms)
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {Number|String} $iterations [null] - The number of iterations
/// to complete. If the value passed is not a number, it will be set to infinite
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// null assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [linear] - The timing function for the
/// animation.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $direction value
/// @throw Invalid $axis value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $iterations value
/// @throw Invalid $anim-dir value
@mixin flip-scale(
  $direction: up,
  $axis: horizontal,
  $timing: .5s,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: linear,
  $anim-num: null
) {
  // Default tranform values for $direction of `up` and $axis of `horizontal`
  $scale-val1: scale(1);
  $flip-val1: rotateX(0);
  $scale-val2: scale(2.5);
  $flip-val2: rotateX(-90deg);
  $scale-val3: scale(1);
  $flip-val3: rotateX(-180deg);
  @if (to-lower-case($direction) == 'up' or to-lower-case($direction) == 'u'
      or to-lower-case($direction) == 'top' or to-lower-case($direction) == 't'
      or to-lower-case($direction) == 'forward'
      or to-lower-case($direction) == 'fwd'
      or to-lower-case($direction) == 'f') {
    @if (to-lower-case($axis) == 'vertical' or to-lower-case($axis) == 'vert'
        or to-lower-case($axis) == 'v') {
      $flip-val1: rotateY(0);
      $flip-val2: rotateY(90deg);
      $flip-val3: rotateY(180deg);
    } @else if (to-lower-case($axis) == 'diagonal'
        or to-lower-case($axis) == 'diagonal1'
        or to-lower-case($axis) == 'diag' or to-lower-case($axis) == 'diag1'
        or to-lower-case($axis) == 'd' or to-lower-case($axis) == 'd1') {
      $flip-val1: rotate3d(1, 1, 0, 0);
      $flip-val2: rotate3d(1, 1, 0, 90deg);
      $flip-val3: rotate3d(1, 1, 0, 180deg);
    } @else if (to-lower-case($axis) == 'diagonal2'
        or to-lower-case($axis) == 'diag2' or to-lower-case($axis) == 'd2') {
      $flip-val1: rotate3d(-1, 1, 0, 0);
      $flip-val2: rotate3d(-1, 1, 0, 90deg);
      $flip-val3: rotate3d(-1, 1, 0, 180deg);
    } @else if (to-lower-case($axis) != 'horizontal'
        and to-lower-case($axis) != 'horiz'
        and to-lower-case($axis) != 'horz' and to-lower-case($axis) != 'h') {
      @error 'Invalid axis value of (#{inspect($axis)}) for the `flip-scale` mixin';
    }
  } @else if (to-lower-case($direction) == 'down'
      or to-lower-case($direction) == 'd'
      or to-lower-case($direction) == 'bottom'
      or to-lower-case($direction) == 'back'
      or to-lower-case($direction) == 'bck'
      or to-lower-case($direction) == 'b') {
    $scale-val1: scale(1);
    $scale-val2: scale(.4);
    $scale-val3: scale(1);
    @if (to-lower-case($axis) == 'horizontal'
        or to-lower-case($axis) == 'horiz'
        or to-lower-case($axis) == 'horz'
        or to-lower-case($axis) == 'h') {
      $flip-val1: rotateX(0);
      $flip-val2: rotateX(90deg);
      $flip-val3: rotateX(180deg);
    } @else if (to-lower-case($axis) == 'vertical'
        or to-lower-case($axis) == 'vert'
        or to-lower-case($axis) == 'v') {
      $flip-val1: rotateY(0);
      $flip-val2: rotateY(-90deg);
      $flip-val3: rotateY(-180deg);
    } @else if (to-lower-case($axis) == 'diagonal'
        or to-lower-case($axis) == 'diagonal1'
        or to-lower-case($axis) == 'diag' or to-lower-case($axis) == 'diag1'
        or to-lower-case($axis) == 'd' or to-lower-case($axis) == 'd1') {
      $flip-val1: rotate3d(1, 1, 0, 0);
      $flip-val2: rotate3d(1, 1, 0, -90deg);
      $flip-val3: rotate3d(1, 1, 0, -180deg);
    } @else if (to-lower-case($axis) == 'diagonal2'
        or to-lower-case($axis) == 'diag2' or to-lower-case($axis) == 'd2') {
      $flip-val1: rotate3d(-1, 1, 0, 0);
      $flip-val2: rotate3d(-1, 1, 0, -90deg);
      $flip-val3: rotate3d(-1, 1, 0, -180deg);
    } @else {
      @error 'Invalid axis value of (#{inspect($axis)}) for the `flip-scale` mixin';
    }
  } @else {
    @error 'Invalid direction value of `#{inspect($direction)}` for the `flip-scale` ' +
        'mixin';
  }

  @if type-of($timing) != 'number' {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `flip-scale` ' +
        'mixin. The timing property must be a number.';
  } @else if unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not index('s' 'ms', unit($timing)) {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `flip-scale` ' +
        'mixin. The timing property must be in either s or ms units.';
  } @else if ($timing % 10 == 0ms) {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;
    // Get rid of possible leading zero in front of decimal place
    @if (str-slice($timing + '', 1, 2) == '0.') {
      $timing: unquote(str-slice($timing + '', 2));
    }
  }

  @if (
    $delay == 0 or $delay == 0s or $delay == 0ms or
    $delay == 'none' or $delay == 'no' or $delay == 'n' or
    $delay == 'n/a' or $delay == nil or not $delay
  ) {
    $delay: null;
  }
  @if $delay {
    @if (type-of($delay) != 'number') {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `flip-scale` ' +
          'mixin. The delay property must be a number.';
    } @else if (unitless($delay)) {
      $delay: $delay * 1s;
    } @else if not index('s' 'ms', unit($delay)) {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `flip-scale` ' +
          'mixin. The delay property must be in either s or ms units.';
    } @else if ($delay % 10 == 0ms) {
      $delay: math.div($delay, 1000ms) * 1s;
      @if (str-slice($delay + '', 1, 2) == '0.') {
        $delay: #{str-slice($delay + '', 2)};
      }
    }
  } @else {
    $delay: null;
  }

  @if ($iterations) {
    @if (
      $iterations == 'infinite' or $iterations == 'inf' or $iterations == 'i'
    ) {
      $iterations: infinite;
    } @else if (
      (unitless($iterations) and type-of($iterations) == 'number') or
      $iterations == initial or $iterations == inherit
    ) {
      $iterations: $iterations;
    } @else {
      @error 'Invalid iteration-count value of `#{inspect($iterations)}` for the ' +
          '`flip-scale` mixin.';
    }
  } @else {
    $iterations: null;
  }

  @if (
    not $anim-dir or $anim-dir == 'none' or $anim-dir == 'no' or
    $anim-dir == 'n/a' or $anim-dir == 'n' or $anim-dir == 'default' or
    $anim-dir == 'def' or $anim-dir == 'normal' or $anim-dir == 'nor'
  ) {
    $anim-dir: null;
  } @else if ($anim-dir == 'reverse' or $anim-dir == 'rev' or $anim-dir == 'r') {
    $anim-drection: reverse;
  } @else if ($anim-dir == 'alternate' or $anim-dir == 'alt' or $anim-dir == 'a') {
    $anim-dir: alternate;
  } @else if (
    $anim-dir == 'alternate-reverse' or $anim-dir == 'alternatereverse' or
    $anim-dir == 'alt-rev' or $anim-dir == 'altrev' or $anim-dir == 'a-r' or
    $anim-dir == 'ar'
  ) {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of `#{inspect($anim-dir)}` for the ' +
        '`flip-scale` mixin';
  }

  @if not $anim-num {
    $anim-num: null;
  }
  animation: flip-and-scale#{$anim-num} #{$timing} #{$timing-func}
              #{$delay} #{$iterations} #{$anim-dir} both;
  transform: translate3d(0, 0, 0);
  transform-style: preserve-3d;
  @include only-moz {
    backface-visibility: hidden;
  }

  @at-root {
    @keyframes flip-and-scale#{$anim-num} {
      0% {
        transform: #{$scale-val1} #{$flip-val1};
      }

      50% {
        transform: #{$scale-val2} #{$flip-val2};
      }

      100% {
        transform: #{$scale-val3} #{$flip-val3};
      }
    }
  }
}


/// Generates an animation that flips an element over while scaling it. The
/// effect is slightly different than in `flip-scale`. The element this mixin is
/// applied to must have a front-face and a back-face child element. It is
/// recommended that you use this mixin in conjunction with the
/// `animation-front-face` and 'animation-back-face' mixins for card `face`
/// child elements and the 'animation-stage` mixin for the parent element.
///
/// @param {String} $direction [top] - The direction the animation appears to
/// be fliping from.
/// @param {Time} $timing [.5s] - The duration of the animation (s or ms)
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {Number|String} $iterations [null] - The number of iterations
/// for the animation to complete. If the value passed is not a number, it will
/// be set to infinite.
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// null assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [linear] - The timing function for the
/// animation.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $direction value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $iterations value
/// @throw Invalid $anim-dir value
@mixin flip-scale-2(
  $direction: top,
  $axis: horizontal,
  $timing: .5s,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: linear,
  $anim-num: null
) {
  // Default tranform values for $direction of `top`
  $trans-val1: translateY(0) rotateX(0) scale(1); // Same for top and bottom
  $trans-orig-val1: 50% 0%;
  $trans-val2: translateY(-50%) rotateX(-90deg) scale(2);
  $trans-orig-val2: 50% 50%; // Same for all $direction values
  $trans-val3: translateY(-100%) rotateX(-180deg) scale(1);
  $trans-orig-val3: 50% 100%;

  @if (to-lower-case($direction) == 'right'
      or to-lower-case($direction) == 'r') {
    $trans-val1: translateX(0) rotateY(0) scale(1);
    $trans-orig-val1: 100% 50%;
    $trans-val2: translateX(50%) rotateY(-90deg) scale(2);
    $trans-val3: translateX(100%) rotateY(-180deg) scale(1);
    $trans-orig-val3: 0% 50%;
  } @else if (
    to-lower-case($direction) == 'left' or
    to-lower-case($direction) == 'l'
  ) {
    $trans-val1: translateX(0) rotateY(0) scale(1);
    $trans-orig-val1: 0% 50%;
    $trans-val2: translateX(-50%) rotateY(90deg) scale(2);
    $trans-val3: translateX(-100%) rotateY(180deg) scale(1);
    $trans-orig-val3: 100% 50%;
  } @else if (to-lower-case($direction) == 'bottom'
      or to-lower-case($direction) == 'btm' or to-lower-case($direction) == 'b'
      or to-lower-case($direction) == 'down'
      or to-lower-case($direction) == 'd') {
    $trans-orig-val1: 50% 100%;
    $trans-val2: translateY(50%) rotateX(90deg) scale(2);
    $trans-val3: translateY(100%) rotateX(180deg) scale(1);
    $trans-orig-val3: 50% 0%;
  } @else if (to-lower-case($direction) != 'top'
      and to-lower-case($direction) != 't'
      and to-lower-case($direction) != 'up'
      and to-lower-case($direction) != 'u') {
    @error 'Invalid direction value of `#{inspect($direction)}` for the ' +
        '`flip-scale-2` mixin';
  }

  @if type-of($timing) != 'number' {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `flip-scale-2` ' +
        'mixin. The timing property must be a number.';
  } @else if unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not index('s' 'ms', unit($timing)) {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `flip-scale-2` ' +
        'mixin. The timing property must be in either s or ms units.';
  } @else if (unit($timing) == 'ms' and $timing % 10 == 0ms) {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;
    // Get rid of possible leading zero in front of decimal place
    @if (str-slice($timing + '', 1, 2) == '0.') {
      $timing: unquote(str-slice($timing + '', 2));
    }
  }

  @if (
    $delay == 0 or $delay == 0s or $delay == 0ms or
    $delay == 'none' or $delay == 'no' or $delay == 'n' or
    $delay == 'n/a' or $delay == nil or not $delay
  ) {
    $delay: null;
  }
  @if $delay {
    @if (type-of($delay) != 'number') {
      @error 'Invalid delay value of `#{inspect($delay)}` for the flip-scale-2` ' +
          'mixin. The delay property must be a number.';
    } @else if (unitless($delay)) {
      // If no there is no unit for $delay, assume seconds
      $delay: $delay * 1s;
    } @else if not index('s' 'ms', unit($delay)) {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `flip-scale-2` ' +
          'mixin. The delay property must be in either s or ms units.';
    } @else if (unit($delay) == 'ms' and $delay % 10 == 0ms) {
      // If time in ms would be shorter as seconds, convert it
      $delay: math.div($delay, 1000ms) * 1s;
      @if (str-slice($delay + '', 1, 2) == '0.') {
        $delay: #{str-slice($delay + '', 2)};
      }
    }
  } @else {
    $delay: null;
  }

  @if ($iterations) {
    @if (
      $iterations == 'infinite' or $iterations == 'inf' or $iterations == 'i'
    ) {
      $iterations: infinite;
    } @else if (
      (unitless($iterations) and type-of($iterations) == 'number') or
      $iterations == initial or $iterations == inherit
    ) {
      $iterations: $iterations;
    } @else {
      @error 'Invalid iteration-count value of `#{inspect($iterations)}` for the ' +
          '`rotate-scale` mixin.';
    }
  } @else {
    $iterations: null;
  }

  @if (
    not $anim-dir or $anim-dir == 'none' or $anim-dir == 'no' or
    $anim-dir == 'n/a' or $anim-dir == 'n' or $anim-dir == 'default' or
    $anim-dir == 'def' or $anim-dir == 'normal' or $anim-dir == 'nor'
  ) {
    $anim-dir: null;
  } @else if (
    $anim-dir == 'reverse' or $anim-dir == 'rev' or $anim-dir == 'r'
  ) {
    $anim-drection: reverse;
  } @else if (
    $anim-dir == 'alternate' or $anim-dir == 'alt' or $anim-dir == 'a'
  ) {
    $anim-dir: alternate;
  } @else if (
    $anim-dir == 'alternate-reverse' or $anim-dir == 'alternatereverse' or
    $anim-dir == 'alt-rev' or $anim-dir == 'altrev' or $anim-dir == 'a-r' or
    $anim-dir == 'ar'
  ) {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of `#{inspect($anim-dir)}` for the ' +
        '`rotate-scale` mixin';
  }


  @if not $anim-num {
    $anim-num: null;
  }
  animation: flip-and-scale#{$anim-num} #{$timing} #{$timing-func}
              #{$delay} #{$iterations} #{$anim-dir} both;
  transform: translate3d(0, 0, 0);
  transform-style: preserve-3d;
  @include only-moz {
    backface-visibility: hidden;
  }

  @at-root {
    @keyframes flip-and-scale#{$anim-num} {
      0% {
        transform: $trans-val1;
        transform-origin: $trans-orig-val1;
      }

      50% {
        transform: $trans-val2;
        transform-origin: $trans-orig-val2;
      }

      100% {
        transform: $trans-val3;
        transform-origin: $trans-orig-val3;
      }
    }
  }
}


/// Easily generates the appropriate typographic properties for the given values,
/// following the W3C specifications.
/// @link https://developer.mozilla.org/en-US/docs/Web/CSS/font
///
/// @param {Length-Percentage} $size - The font-size value.
/// @param {Number|Keyword} $weight [null] - The font-weight value.
/// @param {Keyword} $style [null] - The font-style value.
/// @param {Keyword} $variant [null] - The font-variant value.
/// @param {Number} $height [null] - The line-height value.
/// @param {String|List} $family [null] - The font-family value.
/// @param {Length} $spacing [null] - The letter-spacing value.
/// @param {Keyword} $stretch [null] - The font-stretch value.
/// @param {Keyword} $kern [null] - The font-kerning value.
///
/// @group Utilities
/// @throw Invalid $kern keyword value for font-kerning property.
@mixin font(
  $size,
  $weight: null,
  $style: null,
  $variant: null,
  $height: null,
  $family: null,
  $stretch: null,
  $spacing: null,
  $kern: null
) {
  $stretch-no-keyword: false;
  @if ($stretch and $stretch != ultra-condensed
      and $stretch != extra-condensed and $stretch != condensed
      and $stretch != semi-condensed and $stretch != normal
      and $stretch != semi-expanded and $stretch != expanded
      and $stretch != extra-expanded and $stretch != ultra-expanded) {
    // Stretch must be a keyword to be included in the font shorthand
    $stretch-no-keyword: true;
  }
  @if ($kern and $kern != auto and $kern != normal and $kern != none) {
    @warn 'You have tried giving an incorrect value of `#{inspect($kern)}` ' +
      'for the font-kerning property in the `font` mixin. The value was' +
      ' reset to null and no font-kerning will be applied. Please check' +
      ' your stylesheet.';
    $kern: null;
  }
  @if (not $family or not $size
      or str-slice($size + '', str-length($size + '') -2) == 'rem') {
      // ^ IE 9-10 compliance dictates no rem values in font shorthand
    @if ($family) {
      font-family: $stretch;
    }
    @if ($kern) {
      font-kerning: $kern;
    }
    @if ($size) {
      font-size: $size;
    }
    @if ($stretch) {
      font-stretch: $stretch;
    }
    @if ($style) {
      font-style: $style;
    }
    @if ($variant) {
      font-variant: $variant;
    }
    @if ($weight) {
      font-weight: $weight;
    }
    @if ($spacing) {
      letter-spacing: $spacing;
    }
    @if ($height) {
      line-height: $height;
    }
  } @else {
    @if ($height) {
      @if ($variant and $variant != small-caps and $variant != normal) {
        @if ($stretch-no-keyword) {
          font: $style $weight list.slash($size, $height) $family;
          font-stretch: $stretch;
          font-variant: $variant;
        } @else {
          font: $style $weight $stretch list.slash($size, $height) $family;
          font-variant: $variant;
        }
      } @else {
        @if ($stretch-no-keyword) {
          font: $style $variant $weight list.slash($size, $height) $family;
          font-stretch: $stretch;
        } @else {
          font: $style $variant $weight $stretch list.slash($size, $height) $family;
        }
      }
    } @else {
      @if ($variant and $variant != small-caps and $variant != normal) {
        @if ($stretch-no-keyword) {
          font: $style $weight $size $family;
          font-stretch: $stretch;
          font-variant: $variant;
        } @else {
          font: $style $weight $stretch $size $family;
          font-variant: $variant;
        }
      } @else {
        @if ($stretch-no-keyword) {
          font: $style $variant $weight $size $family;
          font-stretch: $stretch;
        } @else {
          font: $style $variant $weight $stretch $size $family;
        }
      }
    }
    @if ($kern) {
      font-kerning: $kern;
    }
    @if ($spacing) {
      letter-spacing: $spacing;
    }
  }
}


/// Uses clip path to cut out the center of an element and leave a border frame.
/// Among other things, you can use this mixin as the child element to an image
/// element or an element with an image background to frame the parent element.
///
/// @param {Color|Mixed} $bg [#61300D] The color or background value.
/// @param {Length-Percentage} $size [15rem] - The size of the frame.
/// If the $height property is not set explicitly, it is both height and width,
/// if $height is set explicitly, then this value sets only the width.
/// @param {Color} $fg-color [null] The color of any text in the frame.
/// @param {Length-Percentage} $height [$size] The height of the frame.
///
/// @group Shapes
/// @throw Invalid $direction value
@mixin frame($bg: #61300D, $size: 15rem, $fg-color: null, $height: $size) {
  background: $bg;
  @if $fg-color {
    color: $fg-color;
  }
  clip-path: polygon( 0 0, 0 100%, 20% 100%, 20% 20%, 80% 20%, 80% 80%,
                      20% 80%, 20% 100%, 100% 100%, 100% 0 );
  height: $height;
  width: $size;
}

/// Generates a ghost button.
///
/// @link https://www.developerdrive.com/2014/10/how-to-make-a-ghost-button-in-css3/
/// @link https://realcombiz.blogspot.com/2014/12/css-ghost-buttons.html
///
/// @param {Length-Percentage} $font-size - The font-size value.
/// @param {Color} $font-color - The font's color.
/// @param {String|List} $font-fam - The font family used in the button.
/// @param {Length} $border-size - The border-width for the button.
/// @param {Color} $border-color - The border-color for the button.
/// @param {Length-Percentage} $padding - The button's padding.
/// @param {Time} $transition-speed - The speed the button will transition.
/// @param {Color} $hover-color - The color of the button's hover state.
///
/// @group Utilities
@mixin ghost-button(
  $font-size,
  $font-color,
  $font-weight,
  $font-fam,
  $border-size,
  $border-color,
  $padding,
  $transition-speed,
  $hover-color
) {
  border: $border-size solid $border-color;
  color: $font-color;
  display: inline-block;
  @if ($font-fam and $font-size) {
    @if ($font-weight and $font-weight != 400) {
      font: $font-weight $font-size $font-fam;
    } @else {
      font: $font-size $font-fam;
    }
  } @else {
    @if ($font-fam) {
      font-family: $font-fam;
    }
    @if ($font-size) {
      font-size: $font-size;
    }
    @if ($font-weight and $font-weight != 400) {
      font-weight: $font-weight;
    }
  }
  padding: $padding;
  text-decoration: none;
  text-transform: uppercase;
  transition: color $transition-speed, background $transition-speed;

  &:hover {
    background: $border-color;
    color: $hover-color;
  }
}


/// A robust and well supported down-n-dirty gradient mixin.
///
/// @param {Color} $start-color - The starting color in the gradient.
/// @param {Color} $end-color - The ending color in the gradient.
/// @param {String|Angle} $orientation [horizontal] - The direction of the
/// grandient.
/// @param {Percentage} $start-percent [0%] - Starting percentage of the gradient.
/// @param {Percentage} $end-percent [100%] - Ending percentage of the gradient.
///
/// @group Utilities
/// @throw Invalid $orientation value
/// @throw Invalid $start-percent data type
/// @throw Invalid $start-percent unit type
/// @throw Invalid $end-percent data type
/// @throw Invalid $end-percent unit type
/// @throw Value of $start-percent out of range
/// @throw Value of $end-percent out of range
@mixin gradient(
  $start-color,
  $end-color,
  $orientation: horizontal,
  $start-percent: 0%,
  $end-percent: 100%
) {
  @if type-of($start-percent) != 'number' or type-of($end-percent) != 'number' {
    @error 'Invalid data type entered for the values in the `gradient()` mixin.'
    + ' If you pass values for the `$start-percent` or `$end-percent` '
    + 'parameters, you must pass percentage values. You passed '
    + '`#{inspect($start-percent)}` for `$start-percent` and `#{inspect($end-percent)}` for '
    + '`$end-percent`.';
  }
  @if unitless($start-percent) {
    $start-percent: $start-percent * 1%;
  }
  @if unitless($end-percent) {
    $end-percent: $end-percent * 1%;
  }
  @if unit($start-percent) != '%' or unit($end-percent) != '%' {
    @error 'Invalid units entered for the values in the `gradient()` mixin. If '
        + 'you pass values for the `$start-percent` or `$end-percent` '
        + 'parameters, you must pass percentage values. You passed '
        + '`#{inspect($start-percent)}` for `$start-percent` and `#{inspect($end-percent)}` for '
        + '`$end-percent`.';
  }
  @if $start-percent < 0% or $start-percent > 100% {
    @error 'Invalid $start-percent value of `#{inspect($start-percent)}` for the ' +
        '`gradient` mixin. The value is out of range.';
  }
  @if $end-percent < 0% or $end-percent > 100% {
    @error 'Invalid $end-percent value of `#{inspect($end-percent)}` for the ' +
        '`gradient` mixin. The value is out of range.';
  }
  background: $start-color;
  @if ($orientation == 'vertical' or $orientation == 'vert' or $orientation == 'v'
      or $orientation == 'down' or $orientation == 'd' or $orientation == 'bottom'
      or $orientation == 'to bottom' or $orientation == 'top' or $orientation == 'top to bottom') {
    background: linear-gradient(to bottom, $start-color $start-percent, $end-color $end-percent);
  } @else if ($orientation == 'horizontal' or $orientation == 'horiz'
      or $orientation == 'h' or $orientation == 'right' or not $orientation
      or $orientation == 'to right' or $orientation == 'left' or $orientation == 'left to right') {
    background: linear-gradient(to right, $start-color $start-percent, $end-color $end-percent);
  } @else if ($orientation == 'radial' or $orientation == 'rad' or $orientation == 'r'
      or $orientation == 'circular' or $orientation == 'circle') {
    background: radial-gradient(ellipse at center, $start-color $start-percent, $end-color $end-percent);
  } @else if ($orientation == 'diagonal' or $orientation == 'diag' or $orientation == 'd'
      or $orientation == 'd1' or $orientation == 'diagonal1' or $orientation == 'diag1') {
    background: linear-gradient(45deg, $start-color $start-percent, $end-color $end-percent);
  } @else if ($orientation == 'diagonal2' or $orientation == 'diag2' or $orientation == 'd2') {
    background: linear-gradient(135deg, $start-color $start-percent, $end-color $end-percent);
  } @else if (type-of($orientation) != 'number'
      and index('deg' 'rad' 'grad' 'turn', unit($orientation))) {
    background: linear-gradient($orientation, $start-color $start-percent, $end-color $end-percent);
  } @else {
    @error 'Invalid $orientation value of `#{inspect($orientation)}` for the `gradient` mixin.';
  }
}


/// Creates a menu icon 'hamburger' with a set width, height, number of bars,
/// and colors. The mixin uses the height of the icon and the weight of the bars
/// to determine spacing.
///
/// @param {Color} $color [$black] - Color to use for the icon.
/// @param {Color} $color-hover [$dark-gray] - Color to use when the icon is
/// hovered over.
/// @param {Length} $width [20px] - Width of the icon.
/// @param {Length} $height [16px] - Total height of the icon.
/// @param {Length} $weight [2px] - Height of individual bars in the icon.
/// @param {Number} $bars [3] - Number of bars in the icon.
///
/// @group Shapes
@mixin hamburger(
  $color: $black,
  $color-hover: $dark-gray,
  $width: 20px,
  $height: 16px,
  $weight: 2px,
  $bars: 3
) {
  // box-shadow CSS output
  $shadow: ();
  $hover-shadow: ();

  // Spacing between bars is calculated based on the total height of the icon
  // and the weight of each bar
  $spacing: math.div($height - ($weight * $bars), $bars - 1);

  @if (unit($spacing) == 'px') {
    $spacing: floor($spacing);
  }

  @for $i from 2 through $bars {
    $offset: ($weight + $spacing) * ($i - 1);
    $shadow: append($shadow, 0 $offset 0 $color, comma);
  }

  // Icon container
  cursor: pointer;
  display: inline-block;
  height: $height;
  position: relative;
  vertical-align: middle;
  width: $width;

  // Icon bars
  &:after {
    background: $color;
    box-shadow: $shadow;
    content: '';
    display: block;
    height: $weight;
    left: 0;
    position: absolute;
    top: 0;
    width: 100%;
  }

  // Hover state
  @if ($color-hover) {
    @for $i from 2 through $bars {
      $offset: ($weight + $spacing) * ($i - 1);
      $hover-shadow: append($hover-shadow, 0 $offset 0 $color-hover, comma);
    }

    &:hover:after {
      background: $color-hover;
      box-shadow: $hover-shadow;
    }
  }
}


/// Uses psuedo-elements and transform to change an element to the shape of a
/// heart.
///
/// @param {Color|Mixed} $bg [#F00] - The color or background value.
/// @param {Length} $size [15rem] - Calcule the size of the element based off of
/// this number. The element will be this amount in width and 90% of this amount
/// in height.
///
/// @group Shapes
@mixin heart($bg-color: #F00, $size: 15rem) {
  height: $size * .9;
  position: relative;
  width: $size;

  &:before,
  &:after {
    background: $bg-color;
    border-radius: ($size * 0.5) ($size * 0.5) 0 0;
    content: '';
    height: $size * .8;
    left: $size * 0.5;
    position: absolute;
    top: 0;
    transform: rotate(-45deg);
    transform-origin: 0 100%;
    width: $size * 0.5;
  }

  &:after {
    left: 0;
    transform: rotate(45deg);
    transform-origin: 100% 100%;
  }
}


/// Uses clip path to change an element to the shape of a hexagon
///
/// @param {Color|Mixed} $bg [#fb8c00] - Can be any value that is valid for the
/// background shorthand property.
/// @param {Length-Percentage} $size [15rem] - The height and width of the element
/// @param {Color} $fg-color [null] - Optional argument that sets the color
/// property for the elment.
///
/// @group Shapes
@mixin hexagon($bg: #fb8c00, $size: 15rem, $fg-color: null) {
  background: $bg;

  @if ($fg-color) {
    color: $fg-color;
  }
  clip-path: polygon( 50% 0, 100% 25%, 100% 75%,
                      50% 100%, 0 75%, 0 25% );
  height: $size;
  width: $size;
}


/// Thoroughly hide an element.
///
/// @param {Boolean} $maintain-layout [false] - If true, it will hide the
/// element but without removing the element from the layout structure. If false
/// it will hide the element and remove it from the DOM's layout structure.
///
/// @group Utilities
@mixin hide($maintain-layout: false) {
  @if (not $maintain-layout) {
    display: none !important;
  } @else if ($maintain-layout) {
    visibility: hidden;
  } @else {
    @error 'Incorrect value of `#{inspect($maintain-laout)}` for the `hide` ' +
        'mixin. Value must be either true or false (or null).';
  }
}


/// Thoroughly hide the text of an element.
///
/// @group Utilities
/// @alias text-hide
@mixin hide-text {
  color: transparent;
  overflow: hidden;
  text-indent: 101%;
  text-shadow: none;
  white-space: nowrap;
}

/// Thoroughly hide the text of an element.
///
/// @group Utilities
/// @alias hide-text
@mixin text-hide {
  @include hide-text;
}


/// Hide an element only visually, while leaving it available for screen readers.
///
/// @param {Boolean} $focusable [false] - If true, it will allow the element to
/// be focusable when navigated to via the keyboard.
///
/// @group Utilities
/// @require {placeholder} visually-hide
@mixin hide-visually($focusable: false) {
  @extend %visually-hide;

  @if ($focusable) {
    &:active,
    &:focus {
      clip: auto;
      clip-path: none;
      height: auto;
      margin: 0;
      overflow: visible;
      position: static;
      white-space: inherit;
      width: auto;
    }
  }
}

/// Reverses the effect of the `hide-visually()` mixin.
///
/// @group Utilities
@mixin show-visually {
  clip: auto;
  clip-path: none;
  height: auto;
  overflow: visible;
  position: static !important;
  white-space: normal;
  width: auto;
}


/// Creates an infinity symbol out of an element, better browser support than
/// clip-path.
///
/// @param {Color|Mixed} $symbol-color [#000] The color of the symbol.
/// @param {Length-Percentage} $size [60px] - A value used to generate
/// the height and width of the symbol.
/// @param {Length-Percentage} $rad-val [50px] - The border-radius value
/// that creates the infinity shape. Can be altered to mutate the shape.
///
/// @group Shapes
@mixin infinity-symbol($symbol-color: #000, $size: 60px, $rad-val: 50px) {
  height: round($size * 1.666666667);
  position: relative;
  width: round($size * 2.966666667);

  &:before,
  &:after {
    border: 10px solid #{$symbol-color};
    content: '';
    height: $size;
    position: absolute;
    top: 0;
    width: $size;
  }

  &:before {
    border-radius: #{$rad-val} #{$rad-val} 0;
    left: 0;
    transform: rotate(-45deg);
  }

  &:after {
    border-radius: #{$rad-val} #{$rad-val} #{$rad-val} 0;
    left: auto;
    right: 0;
    transform: rotate(45deg);
  }
}


/// Creates an inner box-shadow for only one side of an element.
///
/// @param {Keyword} $side [bottom] - Side the shadow is supposed to appear.
/// Can be `top`, `left`, `right` or `bottom`.
/// @param {Length} $size [20px] - The width of the shadow on the target side.
/// @param {Color} $color [rgba(#000, .3)] - The color of the shadow.
///
/// @group Utilities
@mixin inner-side-shadow($side: 'bottom', $size: 20px, $color: rgba(#000, .3)) {
  @if unitless($size) {
    $size: $size * 1px;
  }

  $helper: round($size * .65);

  @if (to-lower-case($side) == 'top' or to-lower-case($side) == 't'
      or to-lower-case($side) == 'up' or to-lower-case($side) == 'u') {
    box-shadow: inset 0 $helper $size (-1)*$helper $color;
  } @else if to-lower-case($side) == 'left' or to-lower-case($side) == 'l' {
    box-shadow: inset $helper 0 $size (-1)*$helper $color;
  } @else if to-lower-case($side) == 'right' or to-lower-case($side) == 'r' {
    box-shadow: inset (-1)*$helper 0 $size (-1)*$helper $color;
  } @else if (to-lower-case($side) == 'bottom' or to-lower-case($side) == 'b'
      or to-lower-case($side) == 'btm' or to-lower-case($side) == 'down'
      or to-lower-case($side) == 'd') {
    box-shadow: inset 0 (-1)*$helper $size (-1)*$helper $color;
  } @else {
    @error 'Invalid side value of `#{inspect($side)}` for the '
        + '`inner-side-shadow` mixin.';
  }
}


/// Creates a long text shadow effect.
///
/// @param {Color} $color - The color of the long shadow.
/// @param {Number} $longness - The integer length of the shadow.
///
/// @group Utilities
/// @require {function} make-long-shadow
@mixin long-shadow($color: #191919, $longness: 180) {
  text-shadow: make-long-shadow($color, $longness);
}


/// Nest a simple max-width media query within a selector or on its own.
/// @content Styles for screen widths equal to or smaller than $threshold.
///
/// @param {Length|Resolution} $threshold - The maximum screen dimension for the
/// style.
///
/// @group Utilities
@mixin max-width($threshold) {
  @media screen and (max-width: $threshold) {
    @content;
  }
}

/// Nest a combined max-width and min-width media query within a selector or on
/// its own.
/// @content Styles for screen widths equal to or larger than $min-threshold and
/// equal to or smaller than $max-threshold.
///
/// @param {Length|Resolution} $max-threshold - The maximum screen dimension for
/// the style.
/// @param {Length|Resolution} $min-threshold - The minimum screen dimension for
/// the style.
///
/// @group Utilities
@mixin min-to-max-width($min-threshold, $max-threshold) {
  @media screen and (max-width: $max-threshold) and (min-width: $min-threshold) {
    @content;
  }
}

/// Nest a simple min-width media query within a selector or on its own.
/// @content Styles for screen widths equal to or larger than $threshold.
///
/// @param {Length|Resolution} $threshold - The minimum screen dimension for the
/// style.
///
/// @group Utilities
@mixin min-width($threshold) {
  @media screen and (min-width: $threshold) {
    @content;
  }
}

/// Uses clip path to change an element to the shape of an octagon.
///
/// @param {Color|Mixed} $bg [#8b0000] - Can be any value that is valid for the
/// background shorthand property.
/// @param {Length-Percentage} $size [15rem] - The height and width of
/// the element.
/// @param {Color} $fg-color [null] - Optional argument that sets the color
/// property for the elment.
///
/// @group Shapes
@mixin octagon($bg: #8b0000, $size: 15rem, $fg-color: null) {
  background: $bg;

  @if ($fg-color) {
    color: $fg-color;
  }
  clip-path: polygon( 30% 0, 70% 0, 100% 30%, 100% 70%,
                      70% 100%, 30% 100%, 0 70%, 0 30% );
  height: $size;
  width: $size;
}

/// Event wrapper
/// @author Harry Roberts
/// @link https://twitter.com/csswizardry/status/478938530342006784
/// @content
///
/// @param {Boolean} $self (false) - Whether or not to include current selector.
///
/// @group Utilities
@mixin on-event($self: false) {
  @if $self {
    &,
    &:link,
    &:hover,
    &:active,
    &:focus {
        @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
        @content;
    }
  }
}


/// Uses a media query to apply the given styles to any Google Chrome versions
/// 29 and up.
///
/// @content Styles that target Chrome browsers version 29 and up.
///
/// @group Utilities
/// @alias chrome-only
@mixin only-chrome {
  @media screen and (-webkit-min-device-pixel-ratio: 0) and (min-resolution: .001dpcm) {
    @content;
  }
}

/// Uses a media query to apply the given styles to any Google Chrome versions
/// 29 and up.
///
/// @content Styles that target Chrome browsers version 29 and up.
///
/// @group Utilities
/// @alias only-chrome
@mixin chrome-only {
  @include only-chrome {
    @content;
  }
}


/// Targets only HiDPI/Retina displays using a media query.
///
/// @param {Number} $ratio [1.3] - A minimum pixel ratio resolution value used
/// to calculate the media query.
///
/// @content Styles that target HiDPI/Retina displays only.
///
/// @group Utilities
/// @alias hidpi-only
/// @alias retina-only
/// @alias only-retina
@mixin only-hidpi($ratio: 1.25) {
  @media screen and (min-device-pixel-ratio: $ratio),
         screen and (min-resolution: ($ratio * 96dpi)),
         screen and (min-resolution: ($ratio * 1dppx)) {
    @content;
  }
}

/// Targets only HiDPI/Retina displays using a media query.
///
/// @param {Number} $ratio [1.3] - A minimum pixel ratio resolution value used
/// to calculate the media query.
///
/// @content Styles that target HiDPI/Retina displays only.
///
/// @group Utilities
/// @alias only-hidpi
/// @alias only-retina
/// @alias retina-only
@mixin hidpi-only($ratio: 1.3) {
  @include only-hidpi($ratio) {
    @content;
  }
}

/// Targets only HiDPI/Retina displays using a media query.
///
/// @param {Number} $ratio [1.3] - A minimum pixel ratio resolution value used
/// to calculate the media query.
///
/// @content Styles that target HiDPI/Retina displays only.
///
/// @group Utilities
/// @alias only-hidpi
/// @alias hidpi-only
/// @alias retina-only
@mixin only-retina($ratio: 1.3) {
  @include only-hidpi($ratio) {
    @content;
  }
}

/// Targets only HiDPI/Retina displays using a media query.
///
/// @param {Number} $ratio [1.3] - A minimum pixel ratio resolution value used
/// to calculate the media query.
///
/// @content Styles that target HiDPI/Retina displays only.
///
/// @group Utilities
/// @alias only-hidpi
/// @alias hidpi-only
/// @alias only-retina
@mixin retina-only($ratio: 1.3) {
  @include only-hidpi($ratio) {
    @content;
  }
}

/// Uses @supports queries and a clever hack to apply the given styles only to
/// the Firefox browser. Either all version of Gecko based Mozilla browsers,
/// only Quantam (Stylo) Mozilla browsers, or only legacy (pre-Stylo) browsers.
///
/// @param {Boolean|String} $only-legacy [null] - Pass nothing or null to target
/// all version of Gecko based Mozilla browsers. To target Quantam Mozilla
/// browsers, pass false, `quantam`, `new`, `stylo`, or `q`. To target Legacy
/// (pre-Stylo) Mozilla browsers, pass true, `legacy`, `old`, or `pre-stylo`.
///
/// @content Styles to apply to Gecko-based Mozilla browsers like Firefox.
///
/// @group Utilities
/// @alias moz-only
@mixin only-moz($only-legacy: null) {
  @if (
    $only-legacy == false or $only-legacy == 'f' or $only-legacy == 'quantam' or
    $only-legacy == 'new' or $only-legacy == 'stylo' or $only-legacy == 'q'
  ) {
    @-moz-document url-prefix() {
      @supports (animation: calc(0s)) {
        @content;
      }
    }
  } @else if (
    $only-legacy == true or $only-legacy == 't' or $only-legacy == 'legacy' or
    $only-legacy == 'old' or $only-legacy == 'pre-stylo'
  ) {
    @-moz-document url-prefix() {
      @supports not (animation: calc(0s)) {
        @content;
      }
    }
  } @else {
    @-moz-document url-prefix() {
      @content;
    }
    @if $only-legacy {
      @warn 'You have passed and incorrect argument to the `only-moz` mixin. ' +
          'Ignoring the argument and targeting all Gecko-based Mozilla ' +
          'browsers instead.';
    }
  }
}

/// Uses @supports queries and a clever hack to apply the given styles to
/// either all version of Gecko based Mozilla browsers, only Quantam (Stylo)
/// Mozilla browsers, or only legacy (pre-Stylo) Mozilla browsers.
///
/// @param {Boolean|String} $only-legacy [null] - Pass nothing or null to target
/// all version of Gecko based Mozilla browsers. To target Quantam Mozilla
/// browsers, pass false, `quantam`, `new`, `stylo`, or `q`. To target Legacy
/// (pre-Stylo) Mozilla browsers, pass true, `legacy`, `old`, or `pre-stylo`.
///
/// @content Styles to apply to Gecko-based Mozilla browsers.
///
/// @group Utilities
/// @alias only-moz
@mixin moz-only($only-legacy: null) {
  @include only-moz($only-legacy) {
    @content;
  }
}


/// Uses a media query to apply the given styles to the Safari browser,
/// versions 10.1 and up.
///
/// @content Styles that target Safari browsers.
///
/// @group Utilities
/// @alias safari-only
@mixin only-safari {
  @media not all and (min-resolution:.001dpcm) {
    @supports (-webkit-appearance: none) {
      @content;
    }
  }
}

/// Uses a media query to apply the given styles to the Safari browser,
/// versions 10.1 and up.
///
/// @content Styles that target Safari browsers.
///
/// @group Utilities
/// @alias only-safari
@mixin safari-only {
  @media not all and (min-resolution:.001dpcm) {
    @supports (-webkit-appearance: none) {
      @content;
    }
  }
}


/// Uses a media query to apply the given styles to any version of Google Chrome
/// and Apple Safari browsers.
///
/// @content Styles that target Chrome and Safari browsers.
///
/// @group Utilities
/// @alias webkit-only
@mixin only-webkit() {
  @media screen and (-webkit-min-device-pixel-ratio: 0) {
    @content;
  }
}

/// Uses a media query to apply the given styles to any version of Google Chrome
/// and Apple Safari browsers.
///
/// @content Styles that target Chrome and Safari browsers.
///
/// @group Utilities
/// @alias only-webkit
@mixin webkit-only() {
  @media screen and (-webkit-min-device-pixel-ratio: 0) {
    @content;
  }
}


/// Takes a given value in either 0-1 decimal or 1-100 integer scale.
///
/// @param {Number} $opacity - The opacity level
///
/// @group Utilities
/// @throw $opacity out of range
@mixin opacity($opacity) {
  @if ($opacity > 1) {
    @if ($opacity > 100) {
      @warn 'Opacity was set to #{inspect($opacity)} on an element. Value has been ' +
          'changed to the max of 1.';
      $opacity: 100;
    }
    $opacity: $opacity * 0.01;
  }

  opacity: $opacity;
}


/// Animates a panning wipe style effect on the background of an element
///
/// @param {String} $direction [right] - The direction the pan is heading
/// @param {Time} $timing [6s] - The duration of the animation (s or ms)
/// @param {Mixed} $bg
/// [linear-gradient(270deg, #CC6AA5, #3E91CC, #2dCCA7) center / 600% 100%] -
/// The shorthand background property for the element. For this effect it is
/// recommended to use either a linear gradient, or an image.
/// @param {Length-Percentage} $size [100%] - The size of the element. If the
/// $height property is not set explicitly, this is both height and width, but
/// if $height is set explicitly, then this value sets only the width.
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {Number|String} $iterations [null] - The number of iterations
/// to complete. If the value passed is not a number, it will be set to infinite
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// null assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for the
/// animation. The default of null will set it to the default timing function
/// of ease.
/// @param {Length-Percentage} $height [$size] - The height of the element.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $direction value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $iterations value
/// @throw Invalid $anim-dir value
@mixin pan-wipe(
  $direction: right,
  $timing: 6s,
  $bg: linear-gradient(270deg, #CC6AA5, #3E91CC, #2dCCA7) center / 600% 100%,
  $size: 100%,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: null,
  $height: $size,
  $anim-num: null
) {
  // $direction default of `right` values
  $pos-val1: 0% 50%;
  $pos-val2: 100% 50%;
  @if (to-lower-case($direction) == 'left' or to-lower-case($direction) == 'l') {
    $pos-val1: 100% 50%;
    $pos-val2: 0% 50%;
  } @else if ($direction == to-lower-case('top')
      or to-lower-case($direction) == 't' or to-lower-case($direction) == 'down'
      or to-lower-case($direction) == 'd') {
    $pos-val1: 50% 100%;
    $pos-val2: 50% 0%;
  } @else if (to-lower-case($direction) == 'bottom'
      or to-lower-case($direction) == 'b' or to-lower-case($direction) == 'up'
      or to-lower-case($direction) == 'u') {
    $pos-val1: 50% 0%;
    $pos-val2: 50% 100%;
  } @else if (to-lower-case($direction) == 'top-left'
      or to-lower-case($direction) == 'topleft'
      or to-lower-case($direction) == 'tl'
      or to-lower-case($direction) == 'left-top'
      or to-lower-case($direction) == 'lefttop'
      or to-lower-case($direction) == 'lt') {
    $pos-val1: 100% 100%;
    $pos-val2: 0% 0%;
  } @else if (to-lower-case($direction) == 'top-right'
      or to-lower-case($direction) == 'topright'
      or to-lower-case($direction) == 'tr'
      or to-lower-case($direction) == 'right-top'
      or to-lower-case($direction) == 'righttop'
      or to-lower-case($direction) == 'rt') {
    $pos-val1: 0% 100%;
    $pos-val2: 100% 0%;
  } @else if (to-lower-case($direction) == 'bottom-left'
      or to-lower-case($direction) == 'bottomleft'
      or to-lower-case($direction) == 'bl'
      or to-lower-case($direction) == 'left-bottom'
      or to-lower-case($direction) == 'leftbottom'
      or to-lower-case($direction) == 'lb') {
    $pos-val1: 100% 0%;
    $pos-val2: 0% 100%;
  } @else if (to-lower-case($direction) == 'bottom-right'
      or to-lower-case($direction) == 'bottomright'
      or to-lower-case($direction) == 'br'
      or to-lower-case($direction) == 'right-bottom'
      or to-lower-case($direction) == 'rightbottom'
      or to-lower-case($direction) == 'rb') {
    $pos-val1: 0% 0%;
    $pos-val2: 100% 100%;
  } @else if (to-lower-case($direction) != 'right'
      and to-lower-case($direction) != 'r') {
    @error 'Invalid direction of `#{inspect($direction)}` for the `pan-wipe` mixin.';
  }

  @if type-of($timing) != 'number' {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `pan-wipe` ' +
        'mixin. The timing property must be a number.';
  } @else if unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not index('s' 'ms', unit($timing)) {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `pan-wipe` ' +
        'mixin. The timing property must be in either s or ms units.';
  } @else if (unit($timing) == 'ms' and $timing % 10 == 0ms) {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;
    // Get rid of possible leading zero in front of decimal place
    @if (str-slice($timing + '', 1, 2) == '0.') {
      $timing: unquote(str-slice($timing + '', 2));
    }
  }

  @if ($delay == 0 or $delay == 0s or $delay == 0ms or $delay or $delay == 'none'
      or $delay 'no' or $delay == 'n' or $delay == 'n/a' or $delay == nil) {
    $delay: null;
  }
  @if $delay {
    @if (type-of($delay) != 'number') {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `pan-wipe` ' +
          'mixin. The delay property must be a number.';
    } @else if (unitless($delay)) {
      $delay: $delay * 1s;
    } @else if not index('s' 'ms', unit($delay)) {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `pan-wipe` ' +
          'mixin. The delay property must be in either s or ms units.';
    } @else if (unit($delay) == 'ms' and $delay % 10 == 0ms) {
      $delay: math.div($delay, 1000ms) * 1s;
      @if (str-slice($delay + '', 1, 2) == '0.') {
        $delay: #{str-slice($delay + '', 2)};
      }
    }
  } @else {
    $delay: null;
  }

  @if ($iterations) {
    @if (
      $iterations == 'infinite' or $iterations == 'inf' or $iterations == 'i'
    ) {
      $iterations: infinite;
    } @else if (
      (unitless($iterations) and type-of($iterations) == 'number') or
      $iterations == initial or $iterations == inherit
    ) {
      $iterations: $iterations;
    } @else {
      @error 'Invalid iteration-count value of `#{inspect($iterations)}` for the ' +
          '`text-flicker` mixin.';
    }
  } @else {
    $iterations: null;
  }

  @if (
    not $anim-dir or $anim-dir == 'none' or $anim-dir == 'no' or
    $anim-dir == 'n/a' or $anim-dir == 'n' or $anim-dir == 'default' or
    $anim-dir == 'def' or $anim-dir == 'normal' or $anim-dir == 'nor'
  ) {
    $anim-dir: null;
  } @else if ($anim-dir == 'reverse' or $anim-dir == 'rev' or $anim-dir == 'r') {
    $anim-drection: reverse;
  } @else if (
    $anim-dir == 'alternate' or $anim-dir == 'alt' or $anim-dir == 'a'
  ) {
    $anim-dir: alternate;
  } @else if (
    $anim-dir == 'alternate-reverse' or $anim-dir == 'alternatereverse' or
    $anim-dir == 'alt-rev' or $anim-dir == 'altrev' or $anim-dir == 'a-r' or
    $anim-dir == 'ar'
  ) {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of `#{inspect($anim-dir)}` for the ' +
        '`text-flicker` mixin';
  }
  animation: pan-wipe#{$anim-num} #{$timing} #{$timing-func} #{$delay}
              #{$iterations} #{$anim-dir} both;
  background: $bg;
  height: $height;
  overflow: hidden;
  width: $size;

  @at-root {
    @keyframes pan-wipe#{$anim-num} {
      0% {
        background-position: $pos-val1;
      }

      100% {
        background-position: $pos-val2;
      }
    }
  }
}


/// Adds styles for the placeholder/watermark for an input element.
///
/// @content [The styles for the element's placeholder]
///
/// @group Utilities
@mixin placeholder {
  &::-webkit-input-placeholder {
    @content;
  }

  &::-moz-placeholder {
    @content;
  }

  &:-ms-input-placeholder {
    @content;
  }
}


/// Uses clip path to change an element to the shape of a pentagonal arrow point
///
/// @param {String} $direction [right] The direction the arrow is pointing
/// @param {Color|Mixed} $bg [#fb8c00] The color or background value.
/// @param {Length-Percentage} $size [15rem] - The size of the arrow. If
/// the $height property is not set explicitly, it is both height and width, if
/// $height is set explicitly, then this value sets only the width.
/// @param {Color} $fg-color [null] The color of any text in the arrow.
/// @param {Length-Percentage} $height [$size] The height of the arrow.
///
/// @group Shapes
/// @throw Invalid $direction value
@mixin point(
  $direction: right,
  $bg: #fb8c00,
  $size: 15rem,
  $fg-color: null,
  $height: $size
) {
  background: $bg;
  @if $fg-color {
    color: $fg-color;
  }
  @if $direction {
    @if (to-lower-case($direction) == 'right'
        or to-lower-case($direction) == 'r') {
      clip-path: polygon(0 0, 75% 0, 100% 50%, 75% 100%, 0 100%);
    } @else if (
      to-lower-case($direction) == 'left'or to-lower-case($direction) == 'l'
    ) {
      clip-path: polygon(25% 0, 100% 0, 100% 100%, 25% 100%, 0 50%);
    } @else if (to-lower-case($direction) == 'up'
        or to-lower-case($direction) == 'u' or to-lower-case($direction) == 't'
        or to-lower-case($direction) == 'top') {
      clip-path: polygon(100% 25%, 100% 100%, 0 100%, 0 25%, 50% 0);
    } @else if (to-lower-case($direction) == 'down'
        or to-lower-case($direction) == 'd' or to-lower-case($direction) =='b'
        or to-lower-case($direction) == 'bottom') {
      clip-path: polygon(100% 0, 100% 75%, 50% 100%, 0 75%, 0 0);
    } @else {
      @error 'Invalid direction of `#{inspect($direction)}` for the `point` mixin.';
    }
  } @else {
    @error 'You must choose a direction for the `point` mixin.';
  }

  height: $height;
  width: $size;
}


/// Creates a little pointing label from an element using clip-path
///
/// @param {String} $direction [right] - Indicates the direction the label
/// will be pointing towards.
/// @param {Color|Mixed} $bg [#999} Any value that is valid for the background
/// shorthand property.
/// @param {Length-Percentage} $width [5rem] - A length value setting the width.
/// @param {Color} $fg-color [null] - Optional color value that, if passed,
/// sets the color property for the text in the label
/// @param {Length-Percentage} $height [$width / 4] Length value that sets
/// the height of the label.
///
/// @group Shapes
/// @throw Invalid $direction value
@mixin pointing-label(
  $direction: right,
  $bg: #999,
  $width: 5rem,
  $fg-color: null,
  $height: $width * 0.25
) {
  background: $bg;
  background-clip: padding-box;
  @if (to-lower-case($direction) == 'right'
      or to-lower-case($direction) == 'r') {
    border-radius: 4px 0 0 4px;
    clip-path: polygon( 95% 0, 95% 35%, 100% 50%, 95% 65%,
                        95% 100%, 0 100%, 0 0 );
  } @else if (
    to-lower-case($direction) == 'left' or
    to-lower-case($direction) == 'l'
  ) {
    border-radius: 0 4px 4px 0;
    clip-path: polygon( 5% 0, 5% 35%, 0 50%, 5% 65%,
                        5% 100%, 100% 100%, 100% 0 );
  } @else if (to-lower-case($direction) == 'up'
      or to-lower-case($direction) == 'u' or to-lower-case($direction) == 'top'
      or to-lower-case($direction) == 't') {
    border-radius: 0 0 4px 4px;
    clip-path: polygon( 55% 15%, 50% 0, 45% 15%, 0 15%,
                        0 100%, 100% 100%, 100% 15% );
  } @else if (to-lower-case($direction) == 'down'
      or to-lower-case($direction) == 'd' or to-lower-case($direction) == 'b'
      or to-lower-case($direction) == 'bottom') {
    border-radius: 4px 4px 0 0;
    clip-path: polygon( 55% 85%, 50% 100%, 45% 85%, 0 85%,
                        0 0, 100% 0, 100% 85% );
  } @else {
    @error 'Invalid $direction value of `#{inspect($direction)}` passed to the ' +
        '`pointing-label` mixin.';
  }
  @if $fg-color {
    color: $fg-color;
  }
  height: $height;
  width: $width;
}


/// Applies position values to an element.
///
/// @param {Keyword} $position [absolute] - The position value for the element.
/// @param {List} $top-left [0 0] - The top and left values for the element in a
/// space-separated list.
/// @param {List} $bottom-right [null] - The botton and right values for the
/// element in a space-separated list.
/// @param {Number} $z-val [null] - The z-index value for the element.
///
/// @group Utilities
@mixin position(
  $position: absolute,
  $top-left: 0 0,
  $bottom-right: null,
  $z-val: null
) {
  position: $position;
  @if $bottom-right {
    bottom: nth($bottom-right, 0);
    right: nth($bottom-right, 1);
  }
  @if $top-left {
    left: nth($top-left, 1);
    top: nth($top-left, 0);
  }
  @if $z-val {
    z-index: $z-val;
  }
}


/// Uses clip path to change an element to the shape of a price tag.
///
/// @param {Color|Mixed} $bg [#fb8c00] - Can be any value that is valid for the
/// background shorthand property.
/// @param {Color} $fg-color [null] - Optional argument that sets the color
/// property for the elment.
/// @param {Length|List} $padding [2rem 3rem 2rem 4rem] - Sets the size of the
/// price tag by setting its padding shorthand property.
///
/// @group Shapes
@mixin price-tag($bg: #fb8c00, $fg-color: null, $padding: 2rem 3rem 2rem 4rem) {
  background: $bg;

  @if ($fg-color) {
    color: $fg-color;
  }
  clip-path: polygon(30px 0, 100% 0, 100% 100%, 30px 100%, 0 50%);
  padding: $padding;
}


/// Generates an animation that puffs an element in or out. If a forward or
/// backward direction is chosen to augment the puff, it is recommended that
/// the `animation-stage` mixin be used on the parent element.
///
/// @param {String|Boolean} $in-or-out [in] - Determines if the element will
/// puff `in` (or true, `i`) our `out` (or false, `o`).
/// @param {String} $direction [null] - Will optionally either puff in from
/// this direction or puff out towards this direction.
/// @param {Time} $timing [.7s] - The duration of the animation (s or ms)
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {Number|String} $iterations [null] - The number of iterations
/// to complete. If the value passed is not a number, it will be set to infinite
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// null assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for the
/// animation. A null value passed here will default to the recommended timing
/// function for this animation of `cubic-bezier(.39, .575, .565, 1)`.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $in-or-out value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $iterations value
/// @throw Invalid $anim-dir value
@mixin puff(
  $in-or-out: in,
  $direction: center,
  $timing: .7s,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: null,
  $anim-num: null
) {
  // Default values for a puff in with center direction
  $opacity-val1: 0;
  $opacity-val2: 1;
  $trans-val1: scale(2);
  $trans-val2: scale(1);
  $blur-val1: blur(2px);
  $blur-val2: blur(0);
  $t-origin-val: null;
  $temp-val: null;

  // Input scrubbing
  @if $in-or-out == true or $in-or-out == 'in' or $in-or-out == 'i' {
    $in-or-out: true;
  } @else if $in-or-out == false or $in-or-out == 'out' or $in-or-out == 'o' {
    $in-or-out: false;
  } @else {
    @error 'Invalid $in-or-out value of [#{inspect($in-or-out)}] for the `puff` mixin.';
  }

  @if $direction {
    @if type-of($direction) == 'string' {
      $direction: to-lower-case($direction);
    }
    @if (
      $direction == 'top' or $direction == 't' or
      $direction == 'up' or $direction == 'u'
    ) {
      $blur-val1: blur(2px);
      $blur-val2: blur(0);
      $t-origin-val: 50% 0%;
    } @else if (
      $direction == 'bottom' or $direction == 'btm' or $direction == 'b'
    ) {
      $trans-val1: translateY(50px);
      $trans-val2: translateY(0);
    } @else if (
      $direction == 'forwards' or $direction == 'forward' or
      $direction == 'fwd' or $direction == 'fw' or $direction == 'f'
    ) {
      $direction: 'forward';
      $trans-val1: translateZ(-80px);
      $trans-val2: translateZ(0);
    } @else if (
      $direction == 'backwards' or $direction == 'backward' or
      $direction == 'bckwrd' or $direction == 'back' or
      $direction == 'bck' or $direction == 'bw' or $direction == 'b'
    ) {
      $direction: 'backward';
      $trans-val1: translateZ(80px);
      $trans-val2: translateZ(0);
    } @else if (
      $direction == 'top' or $direction == 't' or
      $direction == 'up' or $direction == 'u'
    ) {
      $trans-val1: translateY(-50px);
      $trans-val2: translateY(0);
    } @else if $direction == 'left' or $direction == 'l' {
      $trans-val1: translateX(-50px);
      $trans-val2: translateX(0);
    } @else if $direction == 'right' or $direction == 'r' {
      $trans-val1: translateX(50px);
      $trans-val2: translateX(0);
    } @else if (
      $direction == 'top-left' or $direction == 'topleft' or
      $direction == 't-l' or $direction == 'tl' or
      $direction == 'left-top' or $direction == 'lefttop' or
      $direction == 'l-t' or $direction == 'lt'
    ) {
      $trans-val1: translateX(-50px) translateY(-50px);
      $trans-val2: translateX(0) translateY(0);
    } @else if (
      $direction == 'top-right' or $direction == 'topright' or
      $direction == 't-r' or $direction == 'tr' or
      $direction == 'right-top' or $direction == 'righttop' or
      $direction == 'r-t' or $direction == 'rt'
    ) {
      $trans-val1: translateX(50px) translateY(-50px);
      $trans-val2: translateX(0) translateY(0);
    } @else if (
      $direction == 'bottom-right' or $direction == 'bottomright' or
      $direction == 'b-r' or $direction == 'br' or
      $direction == 'right-bottom' or $direction == 'rightbottom' or
      $direction == 'r-b' or $direction == 'rb'
    ) {
      $trans-val1: translateX(50px) translateY(50px);
      $trans-val2: translateX(0) translateY(0);
    } @else if (
      $direction == 'bottom-left' or $direction == 'bottomleft' or
      $direction == 'b-l' or $direction == 'bl' or
      $direction == 'left-bottom' or $direction == 'leftbottom' or
      $direction == 'l-b' or $direction == 'lb'
    ) {
      $trans-val1: translateX(-50px) translateY(50px);
      $trans-val2: translateX(0) translateY(0);
    } @else if (
      $direction == 'center' or $direction == 'cent' or $direction == 'c'
    ) {
      $direction: 'center';
    } @else {
      @error 'Invalid direction of [#{inspect($direction)}] chosen for the ' +
          '`puff` mixin.';
    }
  } @else {
    $direction: 'center';
  }

  @if not $in-or-out {
    // Swap values for puff-out state
    $temp-val: $opacity-val1;
    $opacity-val1: $opacity-val2;
    $opacity-val2: $temp-val;

    $temp-val: $trans-val1;
    $trans-val1: $trans-val2;
    $trans-val2: $temp-val;

    $temp-val: $blur-val1;
    $blur-val1: $blur-val2;
    $blur-val2: $temp-val;
  }

  @if not $timing {
    $timing: if($in-or-out, .7s, 1s);
  }

  @if type-of($timing) != 'number' {
    @error 'Invalid timing value of [#{inspect($timing)}] for the `puff` ' +
        'mixin. The timing property must be a number.';
  } @else if unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if (not index('s' 'ms', unit($timing)) ){
    @error 'Invalid timing value of [#{inspect($timing)}] for the `puff` mixin.' +
        'The timing property must be in either s or ms units.';
  } @else if (unit($timing) == 'ms' and $timing % 100 == 0ms) {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;
  }

  @if (
    $delay == 0 or $delay == 0s or $delay == 0ms or
    $delay == 'none' or $delay == 'no' or $delay == 'n' or
    $delay == 'n/a' or $delay == nil or not $delay
  ) {
    $delay: null;
  }
  @if $delay {
    @if type-of($delay) != 'number' {
      @error 'Invalid delay value of [#{inspect($delay)}] for the `puff` mixin.' +
          'The delay property must be a number.';
    } @else if unitless($delay) {
      // If no there is no unit for $delay, assume seconds
      $delay: $delay * 1s;
    } @else if not index('s' 'ms', unit($delay)) {
      @error 'Invalid delay value of [#{inspect($delay)}] for the `puff` mixin.' +
          'The delay property must be in either s or ms units.';
    } @else if (unit($delay) == 'ms' and $delay % 100 == 0ms) {
      // If time in ms would be shorter as seconds, convert it
      $delay: math.div($delay, 1000ms) * 1s;
    }
  }

  @if $iterations {
    @if (
      $iterations == 'infinite' or $iterations == 'inf' or $iterations == 'i'
    ) {
      $iterations: infinite;
    } @else if (
      (unitless($iterations) and type-of($iterations) == 'number') or
      $iterations == initial or $iterations == inherit
    ) {
      $iterations: $iterations;
    } @else {
      @error 'Invalid iteration-count value of [#{inspect($iterations)}] for the ' +
          '`puff` mixin.';
    }
  }

  @if (
    not $anim-dir or $anim-dir == 'none' or $anim-dir == 'no' or
    $anim-dir == 'n/a' or $anim-dir == 'n' or $anim-dir == 'default' or
    $anim-dir == 'def' or $anim-dir == 'normal' or $anim-dir == 'nor'
  ) {
    $anim-dir: null;
  } @else if $anim-dir == 'reverse' or $anim-dir == 'rev' or $anim-dir == 'r' {
    $anim-drection: reverse;
  } @else if $anim-dir == 'alternate' or $anim-dir == 'alt' or $anim-dir == 'a' {
    $anim-dir: alternate;
  } @else if (
    $anim-dir == 'alternate-reverse' or $anim-dir == 'alternatereverse' or
    $anim-dir == 'alt-rev' or $anim-dir == 'altrev' or $anim-dir == 'a-r' or
    $anim-dir == 'ar'
  ) {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of [#{inspect($anim-dir)}] for the ' +
        '`puff` mixin';
  }

  @if (
    not $timing-func or $timing-func == true or $timing-func == 'none' or
    $timing-func == 'no' or $timing-func == 'n' or $timing-func == 'def' or
    $timing-func == 'default' or $timing-func == 'd'
  ) {
    // Take all potential values the user might pass to keep the default setting
    // and ensure that the timing function remains at that default
    $timing-func: if(
      $in-or-out,
        cubic-bezier(.47, 0, .745, .715),
        cubic-bezier(.165, .84, .44, 1)
    );
  }

  @if not $anim-num {
    $anim-num: null;
  }
  animation: puff#{$anim-num} #{$timing} #{$timing-func}
              #{$delay} #{$iterations} #{$anim-dir} both;

  @at-root {
    @keyframes puff#{$anim-num} {
      0% {
        filter: blur(2px);
        opacity: 0;
        transform: scale(2);
        @if $direction != 'center' {
          transform-origin: $t-origin-val;
        }
      }

      100% {
        filter: blur(0);
        opacity: 1;
        transform: scale(1);
        @if $direction != 'center' {
          transform-origin: $t-origin-val;
        }
      }
    }
  }
}



/// Does a hard reset of the styles on an element.
///
/// @group Utilities
@mixin reset {
  background: padding-box border-box;
  border: 0;
  box-shadow: none;
  display: initial;
  font: inherit;
  margin: 0;
  padding: 0;
  text-shadow: none;
}


/// Resets an ordered or unordered list to have no inherent style
///
/// @group Utilities
/// @alias list-reset
@mixin reset-list {
  list-style: none;
  margin: 0;
  padding: 0;
}

/// Resets an ordered or unordered list to have no inherent style
///
/// @group Utilities
/// @alias reset-list
@mixin list-reset {
  list-style: none;
  margin: 0;
  padding: 0;
}


/// Viewport sized typography with minimum and maximum values
/// @author Eduardo Boucas (@eduardoboucas)
/// @link https://css-tricks.com/snippets/sass/viewport-sized-typography-minimum-maximum-sizes/
///
/// @param {Number} $responsive - Viewport-based size
/// @param {Length} $min - Minimum font size (px)
/// @param {Length} $max - Maximum font size (px) (optional)
/// @param {Length} $fallback - Fallback for viewport-based units (optional)
///
/// @example A 5vw font size (with 50px fallback), min of 35px and max of 150px:
///          @include responsive-font(5vw, 35px, 150px, 50px);
///
/// @group Utilities
@mixin responsive-font($responsive, $min, $max: false, $fallback: false) {
  $responsive-unitless: math.div($responsive, $responsive - $responsive + 1);
  $dimension: if(unit($responsive) == 'vh', 'height', 'width');
  $min-breakpoint: math.div($min, $responsive-unitless) * 100;

  @media (max-#{$dimension}: #{$min-breakpoint}) {
    font-size: $min;
  }

  @if ($max) {
    $max-breakpoint: math.div($max, $responsive-unitless) * 100;

    @media (min-#{$dimension}: #{$max-breakpoint}) {
      font-size: $max;
    }
  }

  @if ($fallback) {
    font-size: $fallback;
  }
  font-size: $responsive;
}


/// Creates a 3D ribbon shape for headers. Apply the ribbon to a header element
/// and include an inner inline element for the header's content.
///
/// @example <h1 class="ribbon"><strong class="ribbon-content">HEADER</strong></h1>
/// @link https://css-tricks.com/snippets/css/ribbon/
///
/// @param {Length-Percentage} $font-size [1em] - The font-size of the ribbon
/// text.
/// @param {Number} $ribbon-size [1] - A number value used to calculate the
/// overall size of the ribbon.
/// @param {Color} $bg-color [purple] - The background color for the ribbon.
/// @param {Color} $fg-color [purple] - The color of the ribbon's text.
/// @param {String} $content-suffix ['-content'] - The suffix that is added
/// to the class name that this mixin is applied to, representing the internal
/// inline class that contains the ribbon's text content.
///
/// @group Shapes
/// @alias banner
/// @throw Invalid $ribbon-size value
@mixin ribbon(
  $font-size: 1em,
  $ribbon-size: 1,
  $bg-color: #BA89B6,
  $fg-color: #fff,
  $content-suffix: '-content'
) {
  @if type-of($ribbon-size) != 'number' or not unitless($ribbon-size) {
    @error 'Invalid $ribbon-size value for the `ribbon` mixin.';
  }
  background: $bg-color;
  @if $fg-color {
    color: $fg-color;
  }
  font-size: $font-size !important;
  line-height: 1;
  margin: ($ribbon-size * 2rem) auto ($ribbon-size * 3rem);
  padding: ($ribbon-size * 1rem) ($ribbon-size * 2rem);
  position: relative;
  text-align: center;
  width: 50%;

  &:before,
  &:after {
    border: ($ribbon-size * 1.5rem) solid mix(#000, $bg-color, 18.5%);
    bottom: -($ribbon-size * 1rem);
    content: '';
    display: block;
    position: absolute;
    z-index: -1;
  }

  &:before {
    border-left-color: transparent;
    border-right-width: $ribbon-size * 1.5rem;
    left: -($ribbon-size * 2rem);
  }

  &:after {
    border-left-width: $ribbon-size * 1.5rem;
    border-right-color: transparent;
    right: -($ribbon-size * 2rem);
  }

  &#{$content-suffix}:before,
  &#{$content-suffix}:after {
    border-color: mix(#000, $bg-color, 31%) transparent transparent;
    border-style: solid;
    bottom: -($ribbon-size * 1rem);
    content: '';
    display: block;
    position: absolute;
  }

  &#{$content-suffix}:before {
    border-width: ($ribbon-size * 1rem) 0 0 ($ribbon-size * 1rem);
    left: 0;
  }

  &#{$content-suffix}:after {
    border-width: ($ribbon-size * 1rem) ($ribbon-size * 1rem) 0 0;
    right: 0;
  }
}

/// Creates a 3D ribbon shape for headers. Apply the ribbon to a header element
/// and include an inner inline element (like <span>) for the header's content.
///
/// @example <h1 class="ribbon"><strong class="ribbon-content">HEADER</strong></h1>
/// @link https://css-tricks.com/snippets/css/ribbon/
///
/// @param {Length-Percentage} $font-size [1em] - The font-size of the ribbon
/// text.
/// @param {Number} $ribbon-size [1] - A number value used to calculate the
/// overall size of the ribbon.
/// @param {Color} $bg-color [purple] - The background color for the ribbon.
/// @param {Color} $fg-color [purple] - The color of the ribbon's text.
/// @param {String} $content-suffix ['-content'] - The suffix that is added
/// to the class name that this mixin is applied to, representing the internal
/// inline class that contains the ribbon's text content.
///
/// @group Shapes
/// @alias ribbon
/// @throw Invalid $ribbon-size value
@mixin banner(
  $font-size: 1em,
  $ribbon-size: 1,
  $bg-color: #BA89B6,
  $fg-color: #fff,
  $content-suffix: '-content'
) {
  @include ribbon($font-size, $ribbon-size, $bg-color, $fg-color, $content-suffix);
}


/// Generates an animation that rolls an element in or out from or towards a
/// given direction.
///
/// @param {Boolean|String} $in-or-out [in] - Determines if the element will
/// roll `in` (or true, `i`) our `out` (or false, `o`).
/// @param {String} $direction [top] - Will either roll in from this
/// direction or roll out towards this direction.
/// @param {Boolean|String} $blurred [null] - If true, it will add a blur effect
/// to the animation.
/// @param {Time} $timing [null] - The duration of the animation (s or ms)
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {Number|String} $iterations [null] - The number of iterations
/// to complete. If the value passed is not a number, it will be set to infinite
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// null assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for
/// the animation. A null value passed here will default to the recommended
/// timing function for this animation of `ease-out` on a roll-in animation, and
/// a timing function of `ease-in` on a roll-out animation.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $in-or-out value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $iterations value
/// @throw Invalid $anim-dir value
@mixin roll(
  $in-or-out: in,
  $direction: left,
  $blurred: null,
  $timing: .6s,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: null,
  $anim-num: null
) {
  // Default values for a roll in from the left
  $opacity-val1: 0;
  $opacity-val2: 1;
  $trans-val1: translateX(-800px) rotate(-540deg);
  $trans-val2: translateX(0) rotate(0);
  $blur-val1: blur(50px);
  $blur-val2: blur(0);
  $temp-val: null;

  // Input scrubbing
  @if ($in-or-out == true or $in-or-out == 'in' or $in-or-out == 'i') {
    $in-or-out: true;
  } @else if ($in-or-out == false or $in-or-out == 'out' or $in-or-out == 'o') {
    $in-or-out: false;
  } @else {
    @error 'Invalid $in-or-out value of `#{inspect($in-or-out)}` for the `roll` mixin.';
  }

  @if $direction {
    @if (
      to-lower-case($direction) == 'top' or
      to-lower-case($direction) == 't' or
      to-lower-case($direction) == 'up' or
      to-lower-case($direction) == 'u'
    ) {
      $trans-val1: translateY(-800px) rotate(-540deg);
      $trans-val2: translateY(0) rotate(0);
    } @else if (
      to-lower-case($direction) == 'bottom' or
      to-lower-case($direction) == 'btm' or
      to-lower-case($direction) == 'b'
    ) {
      $trans-val1: translateY(800px) rotate(540deg);
      $trans-val2: translateY(0) rotate(0);
    } @else if (
      to-lower-case($direction) == 'right' or to-lower-case($direction) == 'r'
    ) {
      $trans-val1: translateX(800px) rotate(540deg);
      $trans-val2: translateX(0) rotate(0);
    } @else if (to-lower-case($direction) != 'left'
        and to-lower-case($direction) != 'l') {
      @error 'Invalid direction of `#{inspect($direction)}` chosen for the `roll` mixin.';
    }
  } @else {
    $direction: null;
  }

  @if (not $blurred or $blurred == nil or $blurred == 0 or $blurred == 'none'
      or $blurred == 'no' or $blurred == 'n/a' or $blurred == 'n') {
    $blurred: false;
  } @else if ($blurred == true or $blurred == 'blurred' or $blurred == 'blur'
      or $blurred == 'yes' or $blurred == 'y' or $blurred == 'b') {
    $blurred: true;
  } @else {
    @error 'Invalid $blurred value of `#{inspect($blurred)}` for the `roll` mixin. ' +
        'Pass true or `blur` to blur the animation, false or null to leave as' +
        ' default.';
  }

  @if not $in-or-out {
    // Swap values for roll-out state
    $temp-val: $opacity-val1;
    $opacity-val1: $opacity-val2;
    $opacity-val2: $temp-val;

    $temp-val: $trans-val1;
    $trans-val1: $trans-val2;
    $trans-val2: $temp-val;

    $temp-val: $blur-val1;
    $blur-val1: $blur-val2;
    $blur-val2: $temp-val;
  }

  @if type-of($timing) != 'number' {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `roll` ' +
        'mixin. The timing property must be a number.';
  } @else if unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not index('s' 'ms', unit($timing)) {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `roll` mixin.' +
        'The timing property must be in either s or ms units.';
  } @else if (unit($timing) == 'ms' and $timing % 100 == 0ms) {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;
  }

  @if (
    $delay == 0 or $delay == 0s or $delay == 0ms or
    $delay == 'none' or $delay == 'no' or $delay == 'n' or
    $delay == 'n/a' or $delay == nil or not $delay
  ) {
    $delay: null;
  }
  @if $delay {
    @if (type-of($delay) != 'number') {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `roll` mixin.' +
          'The delay property must be a number.';
    } @else if (unitless($delay)) {
      // If no there is no unit for $delay, assume seconds
      $delay: $delay * 1s;
    } @else if not index('s' 'ms', unit($delay)) {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `roll` mixin.' +
          'The delay property must be in either s or ms units.';
    } @else if (unit($delay) == 'ms' and $delay % 100 == 0ms) {
      // If time in ms would be shorter as seconds, convert it
      $delay: math.div($delay, 1000ms) * 1s;
    }
  } @else {
    $delay: null;
  }

  @if ($iterations) {
    @if (
      $iterations == 'infinite' or $iterations == 'inf' or $iterations == 'i'
    ) {
      $iterations: infinite;
    } @else if (
      (unitless($iterations) and type-of($iterations) == 'number') or
      $iterations == initial or $iterations == inherit
    ) {
      $iterations: $iterations;
    } @else {
      @error 'Invalid iteration-count value of `#{inspect($iterations)}` for ' +
          'the `roll` mixin.';
    }
  } @else {
    $iterations: null;
  }

  @if (
    not $anim-dir or $anim-dir == 'none' or $anim-dir == 'no' or
    $anim-dir == 'n/a' or $anim-dir == 'n' or $anim-dir == 'default' or
    $anim-dir == 'def' or $anim-dir == 'normal' or $anim-dir == 'nor'
  ) {
    $anim-dir: null;
  } @else if (
    $anim-dir == 'reverse' or $anim-dir == 'rev' or $anim-dir == 'r'
  ) {
    $anim-drection: reverse;
  } @else if (
    $anim-dir == 'alternate' or $anim-dir == 'alt' or $anim-dir == 'a'
  ) {
    $anim-dir: alternate;
  } @else if (
    $anim-dir == 'alternate-reverse' or $anim-dir == 'alternatereverse' or
    $anim-dir == 'alt-rev' or $anim-dir == 'altrev' or $anim-dir == 'a-r' or
    $anim-dir == 'ar'
  ) {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of `#{inspect($anim-dir)}` for the ' +
        '`roll` mixin';
  }

  @if (not $timing-func or $timing-func == true or $timing-func == 'none'
      or $timing-func == 'no' or $timing-func == 'n' or $timing-func == 'def'
      or $timing-func == 'default' or $timing-func == 'd') {
    // Take all potential values the user might pass to keep the default setting
    // and ensure that the timing function remains at that default
    $timing-func: if(($in-or-out), ease-out, ease-in);
  }

  @if not $anim-num {
    $anim-num: null;
  }
    animation: roll#{$anim-num} #{$timing} #{$timing-func}
                #{$delay} #{$iterations} #{$anim-dir} both;

  @at-root {

    @keyframes roll#{$anim-num} {
      0% {
        @if ($blurred) {
          filter: $blur-val1;
        }
        opacity: $opacity-val1;
        transform: $trans-val1;
      }

      100% {
        @if ($blurred) {
          filter: $blur-val2;
        }
        opacity: $opacity-val2;
        transform: $trans-val2;
      }
    }
  }
}


/// Animates an element by rotating it along a point and/or an axis. For the the
/// best effect on a diagonal rotation, use the `animation-stage` mixin on the
/// parent element, and a front and back child element within the rotated
/// element, with the animation-front-face and animation-back-face mixins
/// applied, respectively.
///
/// @param {String} $point [center] - The point the element will appear to be
/// rotating around. Can be `center`, `top`, `top-right,` `right,
/// `bottom-right`, `bottom`, `bottom-left`, `left, or `top-left`. Several
/// aliases aliases also exist for these values.
/// @param {Time} $timing [.4s] - The duration of the animation (s or ms).
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {String} $axis [null] - The animation can optionally rotate along an
/// axis line. This value can be null (or false, `no`, `n`), `horizontal` (or
/// `horiz`, `horz`, `hor`, `h`) or `vertical` (or `vert`, `ver`, `v`). Along
/// the horizontal axis, only `top`, `bottom`, or `center` $point values are
/// valid. Along the vertical axis, only `left`, `right`, or `center` $point
/// values are valid.
/// @param {Number|String} $iterations [null] - The number of iterations
/// for the animation to complete. If the value passed is not a number, it will
/// be set to infinite.
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// null assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for the
/// animation. Default value of null will apply the recommended function for
/// this animation of `cubic-bezier(.25, .46, .45, .94)`, unless the $axis value
/// is null, in which case the timing-function defaults to `linear`.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $point value
/// @throw Invalid $axis value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $anim-dir value
@mixin rotate(
  $point: 'center',
  $timing: .4s,
  $delay: null,
  $axis: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: null,
  $anim-num: null
) {
  // Default value for the 'center' direction
  $trans-val1: rotate(0);
  $trans-val2: rotate(360deg);
  $trans-origin-val: null;
  $trans-valD: null;
  $is-on-axis: false;
  $is-diagonal: false;

  @if (to-lower-case($point) == 'top' or to-lower-case($point) == 't') {
    $trans-origin-val: 0%;
    $point: 'top';
  } @else if (to-lower-case($point) == 'top-right'
      or to-lower-case($point) == 'topright'
      or to-lower-case($point) == 'right-top'
      or to-lower-case($point) == 'righttop'
      or to-lower-case($point) == 't-r'
      or to-lower-case($point) == 'tr'
      or to-lower-case($point) == 'r-t'
      or to-lower-case($point) == 'rt') {
    $trans-origin-val: 0% 50%;
    $point: 'right-top';
  } @else if (to-lower-case($point) == 'right'
      or to-lower-case($point) == 'r') {
    $trans-origin-val: 100%;
    $point: 'right';
  } @else if (to-lower-case($point) == 'bottom-right'
      or to-lower-case($point) == 'bottomright'
      or to-lower-case($point) == 'right-bottom'
      or to-lower-case($point) == 'rightbottom'
      or to-lower-case($point) == 'b-r'
      or to-lower-case($point) == 'br'
      or to-lower-case($point) == 'r-b'
      or to-lower-case($point) == 'r-b') {
    $trans-origin-val: 100% 50%;
    $point: 'bottom-right';
  } @else if (to-lower-case($point) == 'bottom'
      or to-lower-case($point) == 'btm'
      or to-lower-case($point) == 'b') {
    $trans-origin-val: 100%;
    $point: 'bottom';
  } @else if (to-lower-case($point) == 'bottom-left'
      or to-lower-case($point) == 'bottomleft'
      or to-lower-case($point) == 'left-bottom'
      or to-lower-case($point) == 'leftbottom'
      or to-lower-case($point) == 'b-l'
      or to-lower-case($point) == 'bl'
      or to-lower-case($point) == 'l-b'
      or to-lower-case($point) == 'lb') {
    $trans-origin-val: 100% 0%;
    $point: 'bottom-left';
  } @else if (to-lower-case($point) == 'left'
      or to-lower-case($point) == 'l') {
    $trans-origin-val: 0%;
    $point: 'left';
  } @else if (to-lower-case($point) == 'top-left'
      or to-lower-case($point) == 'topleft'
      or to-lower-case($point) == 'left-top'
      or to-lower-case($point) == 'lefttop'
      or to-lower-case($point) == 't-l'
      or to-lower-case($point) == 'tl'
      or to-lower-case($point) == 'l-t'
      or to-lower-case($point) == 'lt') {
    $trans-origin-val: 0% 0%;
    $point: 'top-left';
  } @else if (to-lower-case($point) == 'center'
      or to-lower-case($point) != 'centre'
      or to-lower-case($point) != 'cent'
      or to-lower-case($point) != 'cen'
      or to-lower-case($point) != 'c') {
    $point: 'center';
  } @else {
    @error 'Invalid direction value of (#{inspect($point)}) for the ' +
        '`rotate` mixin.';
  }

  @if ($axis and $axis != 'none' and $axis != 'no' and $axis != 'n') {
    $is-on-axis: true;
    @if ($axis == 'vertical' or $axis == 'vert'
        or $axis == 'ver' or $axis == 'v') {
      $trans-val1: rotateY(0);
      $trans-val2: rotateY(360deg);
      @if ($point != 'left' and $point != 'right'
          and $point != 'center') {
        @error 'You have chosen an axis value of `vertical` that cannot be ' +
            'used with the direction value of (#{inspect($point)}) for the ' +
            '`rotate` mixin. A vertical axis must have direction value of ' +
            'either `left`, `right`, or `center`.';
      } @else if ($point == 'left') {
        $trans-origin-val: 0%;
      } @else if ($point == 'right') {
        $trans-origin-val: 100%;
      }
    } @else if ($axis == 'horizontal' or $axis == 'horz' or $axis == 'hor'
        or $axis == 'h') {
      $trans-val1: rotateX(0);
      $trans-val2: rotateX(-360deg);
      @if ($point != 'top' and $point != 'bottom'
          and $point != 'center') {
        @error 'You have chosen an axis value of `horizontal` that cannot be ' +
            'used with the direction value of (#{inspect($point)}) for the ' +
            '`rotate` mixin. A horizontal axis must have direction value of ' +
            'either `top`, `bottom`, or `center`.';
      } @else if ($point == 'top') {
        $trans-origin-val: 0%;
      } @else if ($point == 'bottom') {
        $trans-origin-val: 100%;
      }
    } @else if ($axis == 'diagonal' or $axis == 'diagonal1' or $axis == 'diag'
        or $axis == 'diag1' or $axis == 'd' or $axis == 'd1'
        or  $axis == 'diagonal2' or $axis == 'diag2' or $axis == 'd2') {
      $is-diagonal: true;
      @if ($point != 'center' and $point != 'top-right'
          and $point != 'top-left' and $point != 'bottom-right'
          and $point != 'bottom-left') {
        @error 'You have chosen an axis value of `diagonal` that cannot be ' +
            'used with the direction value of (#{inspect($point)}) for the ' +
            '`rotate` mixin. A diagonal axis must have direction value of ' +
            'either `top-left`, `top-right`, `bottom-right`, `bottom-left`, ' +
            'or `center`.';
      } @else if ($point == 'center') {
        @if $axis == 'diagonal2' or $axis == 'diag2' or $axis == 'd2' {
          $trans-val1: rotate3d(-1, 1, 0, 0);
          $trans-valD: rotate3d(-1, 1, 0, 180deg);
          $trans-val2: rotate3d(-1, 1, 0, 360deg);
        } @else {
          $trans-val1: rotate3d(1, 1, 0, 0);
          $trans-valD: rotate3d(1, 1, 0, -180deg);
          $trans-val2: rotate3d(1, 1, 0, -360deg);
        }
      } @else if ($point == 'top-right') {
        $trans-val1: rotate3d(1, 1, 0, 0);
        $trans-valD: rotate3d(1, 1, 0, -180deg);
        $trans-val2: rotate3d(1, 1, 0, -360deg);
        $trans-origin-val: 100% 0%;
      } @else if ($point == 'bottom-right') {
        $trans-val1: rotate3d(-1, 1, 0, 0);
        $trans-valD: rotate3d(-1, 1, 0, -180deg);
        $trans-val2: rotate3d(-1, 1, 0, -360deg);
        $trans-origin-val: 100% 50%;
      } @else if ($point == 'bottom-left') {
        $trans-val1: rotate3d(1, 1, 0, 0);
        $trans-valD: rotate3d(1, 1, 0, 180deg);
        $trans-val2: rotate3d(1, 1, 0, 360deg);
        $trans-origin-val: 0% 50%;
      } @else if ($point == 'top-left') {
        $trans-val1: rotate3d(-1, 1, 0, 0);
        $trans-valD: rotate3d(-1, 1, 0, 180deg);
        $trans-val2: rotate3d(-1, 1, 0, 360deg);
        $trans-origin-val: 0% 0%;
      }
    } @else {
      @error 'Invalid $axis value of `#{inspect($axis)}` for the `rotate` mixin.';
    }
  }

  @if type-of($timing) != 'number' {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `rotate` ' +
        'mixin. The timing property must be a number.';
  } @else if unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not index('s' 'ms', unit($timing)) {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `rotate` ' +
        'mixin. The timing property must be in either s or ms units.';
  } @else if (unit($timing) == 'ms' and $timing % 10 == 0ms) {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;
    // Get rid of possible leading zero in front of decimal place
    @if (str-slice($timing + '', 1, 2) == '0.') {
      $timing: unquote(str-slice($timing + '', 2));
    }
  }

  @if (
    $delay == 0 or $delay == 0s or $delay == 0ms or
    $delay == 'none' or $delay == 'no' or $delay == 'n' or
    $delay == 'n/a' or $delay == nil or not $delay
  ) {
    $delay: null;
  }
  @if $delay {
    @if (type-of($delay) != 'number') {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `rotate-scale` ' +
          'mixin. The delay property must be a number.';
    } @else if (unitless($delay)) {
      $delay: $delay * 1s;
    } @else if not index('s' 'ms', unit($delay)) {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `rotate-scale` ' +
          'mixin. The delay property must be in either s or ms units.';
    } @else if (unit($delay) == 'ms' and $delay % 10 == 0ms) {
      $delay: math.div($delay, 1000ms) * 1s;
      @if (str-slice($delay + '', 1, 2) == '0.') {
        $delay: #{str-slice($delay + '', 2)};
      }
    }
  } @else {
    $delay: null;
  }

  @if ($iterations) {
    @if (
      $iterations == 'infinite' or $iterations == 'inf' or $iterations == 'i'
    ) {
      $iterations: infinite;
    } @else if (
      (unitless($iterations) and type-of($iterations) == 'number') or
      $iterations == initial or $iterations == inherit
    ) {
      $iterations: $iterations;
    } @else {
      @error 'Invalid iteration-count value of `#{inspect($iterations)}` for the ' +
          '`rotate` mixin.';
    }
  } @else {
    $iterations: null;
  }

  @if (
    not $anim-dir or $anim-dir == 'none' or $anim-dir == 'no' or
    $anim-dir == 'n/a' or $anim-dir == 'n' or $anim-dir == 'default' or
    $anim-dir == 'def' or $anim-dir == 'normal' or $anim-dir == 'nor'
  ) {
    $anim-dir: null;
  } @else if ($anim-dir == 'reverse' or $anim-dir == 'rev' or $anim-dir == 'r') {
    $anim-drection: reverse;
  } @else if ($anim-dir == 'alternate' or $anim-dir == 'alt' or $anim-dir == 'a') {
    $anim-dir: alternate;
  } @else if (
    $anim-dir == 'alternate-reverse' or $anim-dir == 'alternatereverse' or
    $anim-dir == 'alt-rev' or $anim-dir == 'altrev' or $anim-dir == 'a-r' or
    $anim-dir == 'ar'
  ) {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of `#{inspect($anim-dir)}` for the ' +
        '`rotate` mixin';
  }

  @if (not $timing-func or $timing-func == true or $timing-func == 'none'
      or $timing-func == 'no' or $timing-func == 'n' or $timing-func == 'def'
      or $timing-func == 'default' or $timing-func == 'd') {
    // Take all potential values the user might pass to keep the default setting
    // and ensure that the timing function remains at that default
    $timing-func: if($is-diagonal, linear, cubic-bezier(.25, .46, .45, .94));
  }

  @if not ($anim-num) {
    $anim-num: null;
  }
  animation: rotate#{$anim-num} #{$timing} #{$timing-func}
              #{$delay} #{$iterations} #{$anim-dir} both;
  @if ($is-on-axis) {
    transform: translate3d(0, 0, 0);
    transform-style: preserve-3d;
    @include only-moz {
      backface-visibility: hidden;
    }
  }

  @at-root {
    @keyframes rotate#{$anim-num} {
      0% {
        transform: $trans-val1;
        @if ($point != 'center') {
          transform-origin: $trans-origin-val;
        }
      }

      @if ($is-diagonal) {
        50% {
          transform: $trans-valD;
          @if ($point != 'center') {
            transform-origin: $trans-origin-val;
          }
        }
      }

      100% {
        transform: $trans-val2;
        @if ($point != 'center') {
          transform-origin: $trans-origin-val;
        }
      }
    }
  }
}


/// Animates an element by rotating it along a point and/or an axis while either
/// scaling it up or down. For optimal effect, use the `animation-stage` mixin
/// on the parent element, and a front and back child element within the rotated
/// element, with the animation-front-face and animation-back-face mixins
/// applied, respectively.
///
/// @param {String|Boolean} $up-or-down [up] - Whether the elelment is
/// scaling up or down. This value can be `up` (or true, `u`, `t`) or `down` (or
/// false, `down`, `d`, `f`).
/// @param {Time} $timing [.4s] - The duration of the animation (s or ms).
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {String} $axis [null] - The animation can optionally rotate along an
/// axis line. This value can be null (or false, `no`, `n`), `horizontal` (or
/// `horiz`, `horz`, `hor`, `h`) or `vertical` (or `vert`, `ver`, `v`). It can
/// also be either `diagonal` (or `diag` `diagonal1`, `diag1`, `d`, `d1`), or
/// `diagonal2` (or `diag2`, `d2`).
/// @param {Number|String} $iterations [null] - The number of iterations
/// for the animation to complete. If the value passed is not a number, it will
/// be set to infinite.
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// null assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [linear] - The timing function for the
/// animation.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $direction value
/// @throw Invalid $axis value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $anim-dir value
@mixin rotate-scale(
  $up-or-down: 'up',
  $timing: .7s,
  $delay: null,
  $axis: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: linear,
  $anim-num: null
) {
  // Values for a default scale up
  $trans-val1: scale(1) rotateZ(0);
  $trans-val2: scale(2) rotateZ(180deg);
  $trans-val3: scale(1) rotateZ(360deg);
  $is-on-axis: false;
  $is-diagonal: false;

  @if ($up-or-down == true or $up-or-down == 'up' or $up-or-down == 'u'
      or $up-or-down == 't') {
    $up-or-down: true;
  } @else if ($up-or-down == false or $up-or-down == 'down'
      or $up-or-down == 'd' or $up-or-down == 'f') {
    $up-or-down: false;
    $trans-val2: scale(.5) rotateZ(180deg);
  } @else {
    @error 'Invalid direction value of `#{inspect($up-or-down)}` for the ' +
        '`rotate-scale` mixin.';
  }

  @if ($axis and $axis != 'none' and $axis != 'no' and $axis != 'n') {
    $is-on-axis: true;
    @if ($axis == 'vertical' or $axis == 'vert'
        or $axis == 'ver' or $axis == 'v') {
      $trans-val1: if($up-or-down, scale(1) rotateY(0), scale(1) rotateY(0));
      $trans-val2: if($up-or-down, scale(2) rotateY(180deg), scale(.5) rotateY(180deg));
      $trans-val3: if($up-or-down, scale(1) rotateY(360deg), scale(1) rotateY(360deg));
    } @else if ($axis == 'horizontal' or $axis == 'horz' or $axis == 'hor'
        or $axis == 'h') {
      $trans-val1: if($up-or-down, scale(1) rotateX(0), scale(1) rotateX(0));
      $trans-val2: if($up-or-down, scale(2) rotateX(-180deg), scale(.5) rotateX(-180deg));
      $trans-val3: if($up-or-down, scale(1) rotateX(-360deg), scale(1) rotateX(-360deg));
    } @else if ($axis == 'diagonal' or $axis == 'diagonal1' or $axis == 'diag'
        or $axis == 'diag1' or $axis == 'd' or $axis == 'd1'
        or  $axis == 'diagonal2' or $axis == 'diag2' or $axis == 'd2') {
      $is-diagonal: true;
      @if ($axis == 'diagonal2' or $axis == 'diag2' or $axis == 'd2') {
        $trans-val1: if($up-or-down, scale(1) rotate3d(-1, 1, 0, 0), scale(1) rotate3d(-1, 1, 0, 0));
        $trans-val2: if($up-or-down, scale(2) rotate3d(-1, 1, 0, 180deg), scale(.5) rotate3d(-1, 1, 0, 180deg));
        $trans-val3: if($up-or-down, scale(1) rotate3d(-1, 1, 0, 360deg), scale(1) rotate3d(-1, 1, 0, 360deg));
      } @else {
        $trans-val1: if($up-or-down, scale(1) rotate3d(1, 1, 0, 0), scale(1) rotate3d(1, 1, 0, 0));
        $trans-val2: if($up-or-down, scale(2) rotate3d(1, 1, 0, -180deg), scale(.5) rotate3d(1, 1, 0, -180deg));
        $trans-val3: if($up-or-down, scale(1) rotate3d(1, 1, 0, -360deg), scale(1) rotate3d(1, 1, 0, -360deg));
      }
    } @else {
      @error 'Invalid $axis value of `#{inspect($axis)}` for the `rotate-scale` mixin.';
    }
  }

  @if type-of($timing) != 'number' {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `rotate-scale` ' +
        'mixin. The timing property must be a number.';
  } @else if unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not index('s' 'ms', unit($timing)) {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `rotate-scale` ' +
        'mixin. The timing property must be in either s or ms units.';
  } @else if (unit($timing) == 'ms' and $timing % 10 == 0ms) {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;
    // Get rid of possible leading zero in front of decimal place
    @if (str-slice($timing + '', 1, 2) == '0.') {
      $timing: unquote(str-slice($timing + '', 2));
    }
  }

  @if (
    $delay == 0 or $delay == 0s or $delay == 0ms or
    $delay == 'none' or $delay == 'no' or $delay == 'n' or
    $delay == 'n/a' or $delay == nil or not $delay
  ) {
    $delay: null;
  }
  @if $delay {
    @if (type-of($delay) != 'number') {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `rotate-scale` ' +
          'mixin. The delay property must be a number.';
    } @else if (unitless($delay)) {
      $delay: $delay * 1s;
    } @else if not index('s' 'ms', unit($delay)) {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `rotate-scale` ' +
          'mixin. The delay property must be in either s or ms units.';
    } @else if (unit($delay) == 'ms' and $delay % 10 == 0ms) {
      $delay: math.div($delay, 1000ms) * 1s;
      @if (str-slice($delay + '', 1, 2) == '0.') {
        $delay: #{str-slice($delay + '', 2)};
      }
    }
  } @else {
    $delay: null;
  }

  @if ($iterations) {
    @if (
      $iterations == 'infinite' or $iterations == 'inf' or $iterations == 'i'
    ) {
      $iterations: infinite;
    } @else if (
      (unitless($iterations) and type-of($iterations) == 'number') or
      $iterations == initial or $iterations == inherit
    ) {
      $iterations: $iterations;
    } @else {
      @error 'Invalid iteration-count value of `#{inspect($iterations)}` for the ' +
          '`rotate-scale` mixin.';
    }
  } @else {
    $iterations: null;
  }

  @if (
    not $anim-dir or $anim-dir == 'none' or $anim-dir == 'no' or
    $anim-dir == 'n/a' or $anim-dir == 'n' or $anim-dir == 'default' or
    $anim-dir == 'def' or $anim-dir == 'normal' or $anim-dir == 'nor'
  ) {
    $anim-dir: null;
  } @else if ($anim-dir == 'reverse' or $anim-dir == 'rev' or $anim-dir == 'r') {
    $anim-drection: reverse;
  } @else if ($anim-dir == 'alternate' or $anim-dir == 'alt' or $anim-dir == 'a') {
    $anim-dir: alternate;
  } @else if (
    $anim-dir == 'alternate-reverse' or $anim-dir == 'alternatereverse' or
    $anim-dir == 'alt-rev' or $anim-dir == 'altrev' or $anim-dir == 'a-r' or
    $anim-dir == 'ar'
  ) {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of `#{inspect($anim-dir)}` for the ' +
        '`rotate-scale` mixin';
  }

  @if (not $timing-func or $timing-func == true or $timing-func == 'none'
      or $timing-func == 'no' or $timing-func == 'n' or $timing-func == 'def'
      or $timing-func == 'default' or $timing-func == 'd') {
    // Take all potential values the user might pass to keep the default setting
    // and ensure that the timing function remains at that default
    $timing-func: linear;
  }

  @if not $anim-num {
    $anim-num: null;
  }
  animation: rotate-scale#{$anim-num} #{$timing} #{$timing-func}
              #{$delay} #{$iterations} #{$anim-dir} both;
  @if ($is-on-axis) {
    transform: translate3d(0, 0, 0);
    transform-style: preserve-3d;
    @include only-moz {
      backface-visibility: hidden;
    }
  }

  @at-root {
  @keyframes rotate-scale#{$anim-num} {
      0% {
        transform: $trans-val1;
      }

      50% {
        transform: $trans-val2;
      }

      100% {
        transform: $trans-val3;
      }
    }
  }
}


/// Animates an element by scaling it down.
///
/// @param {String} $direction [top] - The direction the element will appear
/// to be scaling up from.
/// @param {Time} $timing [.4s] - The duration of the animation (s or ms).
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {String} $axis [null] - The animation can optionally start along an
/// axis line. This value can be null (or false, `no`, `n`), `horizontal` (or
/// `horiz`, `horz`, `hor`, `h`) or `vertical` (or `vert`, `ver`, `v`). Along
/// the horizontal axis, only `left`, `right`, or `center` $direction values are
/// valid. Along the vertical axis, only `top`, `bottom`, and `center`
/// $direction values are valid.
/// @param {Number|String} $iterations [null] - The number of iterations
/// for the animation to complete. If the value passed is not a number, it will
/// be set to infinite.
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// null assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for the
/// animation. Default value of null will apply the recommended function for
/// this animation of `cubic-bezier(.25, .46, .45, .94)`.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $direction value
/// @throw Invalid $axis value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $anim-dir value
@mixin scale-down(
  $direction: 'center',
  $timing: .4s,
  $delay: null,
  $axis: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: null,
  $anim-num: null
) {
  //  Default value for the 'center' direction
  $trans-val1: scale(1);
  $trans-val2: scale(.5);
  $trans-origin-val: null;
  @if (to-lower-case($direction) == 'top' or to-lower-case($direction) == 't') {
    $trans-origin-val: 50% 0%;
    $direction: 'top';
  } @else if (to-lower-case($direction) == 'top-right'
      or to-lower-case($direction) == 'topright'
      or to-lower-case($direction) == 'right-top'
      or to-lower-case($direction) == 'righttop'
      or to-lower-case($direction) == 't-r'
      or to-lower-case($direction) == 'tr'
      or to-lower-case($direction) == 'r-t'
      or to-lower-case($direction) == 'rt') {
    $trans-origin-val: 100% 0%;
  } @else if (
    to-lower-case($direction) == 'right' or to-lower-case($direction) == 'r'
  ) {
    $trans-origin-val: 100% 50%;
    $direction: 'right';
  } @else if (to-lower-case($direction) == 'bottom-right'
      or to-lower-case($direction) == 'bottomright'
      or to-lower-case($direction) == 'right-bottom'
      or to-lower-case($direction) == 'rightbottom'
      or to-lower-case($direction) == 'b-r'
      or to-lower-case($direction) == 'br'
      or to-lower-case($direction) == 'r-b'
      or to-lower-case($direction) == 'r-b') {
    transform-origin: 100% 50%;
  } @else if (to-lower-case($direction) == 'bottom'
      or to-lower-case($direction) == 'btm'
      or to-lower-case($direction) == 'b') {
    transform-origin: 50% 50%;
    $direction: 'bottom';
  } @else if (to-lower-case($direction) == 'bottom-left'
      or to-lower-case($direction) == 'bottomleft'
      or to-lower-case($direction) == 'left-bottom'
      or to-lower-case($direction) == 'leftbottom'
      or to-lower-case($direction) == 'b-l'
      or to-lower-case($direction) == 'bl'
      or to-lower-case($direction) == 'l-b'
      or to-lower-case($direction) == 'lb') {
    transform-origin: 0% 50%;
  } @else if (
    to-lower-case($direction) == 'left' or
    to-lower-case($direction) == 'l'
  ) {
    transform-origin: 0% 50%;
    $direction: 'left';
  } @else if (to-lower-case($direction) == 'top-left'
      or to-lower-case($direction) == 'topleft'
      or to-lower-case($direction) == 'left-top'
      or to-lower-case($direction) == 'lefttop'
      or to-lower-case($direction) == 't-l'
      or to-lower-case($direction) == 'tl'
      or to-lower-case($direction) == 'l-t'
      or to-lower-case($direction) == 'lt') {
    transform-origin: 0% 0%;
  } @else if (to-lower-case($direction) == 'center'
      or to-lower-case($direction) != 'centre'
      or to-lower-case($direction) != 'cent'
      or to-lower-case($direction) != 'cen'
      or to-lower-case($direction) != 'c') {
    $direction: 'center';
  } @else {
    @error 'Invalid direction value of `#{inspect($direction)}` for the ' +
        '`scale-down` mixin.';
  }

  @if ($axis and $axis != 'none' and $axis != 'no' and $axis != 'n') {
    @if ($axis == 'vertical' or $axis == 'vert'
        or $axis == 'ver' or $axis == 'v') {
      $trans-val1: scaleY(1);
      $trans-val2: scaleY(.3);
      @if ($direction != 'top' and $direction != 'bottom'
          and $direction != 'center') {
        @error 'You have chosen an axis value of `vertical` that cannot be ' +
            'used with the direction value of `#{inspect($direction)}` for the ' +
            '`scale-down` mixin. A vertical axis must have direction value of ' +
            'either `top`, `bottom`, or `center`.';
      } @else if ($direction == 'top') {
        $trans-origin-val: 100% 0%;
      } @else if ($direction == 'bottom') {
        $trans-origin-val: 0% 50%;
      }
    } @else if ($axis == 'horizontal' or $axis == 'horz' or $axis == 'hor'
        or $axis == 'h') {
      $trans-val1: scaleX(1);
      $trans-val2: scaleX(.3);
      @if ($direction != 'left' and $direction != 'right'
          and $direction != 'center') {
        @error 'You have chosen an axis value of `horizontal` that cannot be ' +
            'used with the direction value of `#{inspect($direction)}` for the ' +
            '`scale-down` mixin. A horizontal axis must have direction value of ' +
            'either `left`, `right`, or `center`.';
      } @else if ($direction == 'left') {
        $trans-origin-val: 0% 0%;
      } @else if ($direction == 'right') {
        $trans-origin-val: 100% 50%;
      }
    } @else {
      @error 'Invalid $axis value of `#{inspect($axis)} for the `scale-down` mixin.';
    }
  }

  @if type-of($timing) != 'number' {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `scale-down` ' +
        'mixin. The timing property must be a number.';
  } @else if unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not index('s' 'ms', unit($timing)) {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `scale-down` ' +
        'mixin. The timing property must be in either s or ms units.';
  } @else if (unit($timing) == 'ms' and $timing % 50 == 0ms) {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;
    // Get rid of possible leading zero in front of decimal place
    @if (str-slice($timing + '', 1, 2) == '0.') {
      $timing: unquote(str-slice($timing + '', 2));
    }
  }

  @if (
    $delay == 0 or $delay == 0s or $delay == 0ms or
    $delay == 'none' or $delay == 'no' or $delay == 'n' or
    $delay == 'n/a' or $delay == nil or not $delay
  ) {
    $delay: null;
  }
  @if $delay {
    @if type-of($delay) != 'number' {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `scale-down` ' +
          'mixin. The delay property must be a number.';
    } @else if (unitless($delay)) {
      $delay: $delay * 1s;
    } @else if not index('s' 'ms', unit($delay)) {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `scale-down` ' +
          'mixin. The delay property must be in either s or ms units.';
    } @else if (unit($delay) == 'ms' and $delay % 50 == 0ms) {
      $delay: math.div($delay, 1000ms) * 1s;
      @if (str-slice($delay + '', 1, 2) == '0.') {
        $delay: #{str-slice($delay + '', 2)};
      }
    }
  } @else {
    $delay: null;
  }

  @if ($iterations) {
    @if (
      $iterations == 'infinite' or $iterations == 'inf' or $iterations == 'i'
    ) {
      $iterations: infinite;
    } @else if (
      (unitless($iterations) and type-of($iterations) == 'number') or
      $iterations == initial or $iterations == inherit
    ) {
      $iterations: $iterations;
    } @else {
      @error 'Invalid iteration-count value of `#{inspect($iterations)}` for the ' +
          '`scale-down` mixin.';
    }
  } @else {
    $iterations: null;
  }

  @if (
    not $anim-dir or $anim-dir == 'none' or $anim-dir == 'no' or
    $anim-dir == 'n/a' or $anim-dir == 'n' or $anim-dir == 'default' or
    $anim-dir == 'def' or $anim-dir == 'normal' or $anim-dir == 'nor'
  ) {
    $anim-dir: null;
  } @else if ($anim-dir == 'reverse' or $anim-dir == 'rev' or $anim-dir == 'r') {
    $anim-drection: reverse;
  } @else if ($anim-dir == 'alternate' or $anim-dir == 'alt' or $anim-dir == 'a') {
    $anim-dir: alternate;
  } @else if (
    $anim-dir == 'alternate-reverse' or $anim-dir == 'alternatereverse' or
    $anim-dir == 'alt-rev' or $anim-dir == 'altrev' or $anim-dir == 'a-r' or
    $anim-dir == 'ar'
  ) {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of `#{inspect($anim-dir)}` for the ' +
        '`scale-down` mixin';
  }

  @if (not $timing-func or $timing-func == true or $timing-func == 'none'
      or $timing-func == 'no' or $timing-func == 'n' or $timing-func == 'def'
      or $timing-func == 'default' or $timing-func == 'd') {
    // Take all potential values the user might pass to keep the default setting
    // and ensure that the timing function remains at that default
    $timing-func: cubic-bezier(.25, .46, .45, .94);
  }

  @if not $anim-num {
    $anim-num: null;
  }
  animation: scale-down#{$anim-num} #{$timing} #{$timing-func}
              #{$delay} #{$iterations} #{$anim-dir} both;

  @at-root {
    @keyframes scale-down#{$anim-num} {
      0% {
        transform: $trans-val1;
        @if ($direction != 'center') {
          transform-origin: $trans-origin-val1;
        }
      }

      100% {
        transform: $trans-val2;
        @if ($direction != 'center') {
          transform-origin: $trans-origin-val2;
        }
      }
    }
  }
}


/// Animates an element by scaling it up.
///
/// @param {String} $direction [center] - The direction the element will appear
/// to be scaling up from.
/// @param {Time} $timing [.4s] - The duration of the animation (s or ms).
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {String} $axis [null] - The animation can optionally start along an
/// axis line. This value can be null (or false, `no`, `n`), `horizontal` (or
/// `horiz`, `horz`, `hor`, `h`) or `vertical` (or `vert`, `ver`, `v`). Along
/// the horizontal axis, only `left`, `right`, or `center` $direction values are
/// valid. Along the vertical axis, only `top`, `bottom`, and `center`
/// $direction values are valid.
/// @param {Number|String} $iterations [null] - The number of iterations
/// for the animation to complete. If the value passed is not a number, it will
/// be set to infinite.
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// null assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for the
/// animation. Default value of null will apply the recommended function for
/// this animation of `cubic-bezier(.39, .575, .565, 1.)`.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $direction value
/// @throw Invalid $axis value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $anim-dir value
@mixin scale-up(
  $direction: 'center',
  $timing: .4s,
  $delay: null,
  $axis: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: null,
  $anim-num: null
) {
  //  Default value for the 'center' direction
  $trans-val1: scale(.5);
  $trans-val2: scale(1);
  $trans-origin-val: null;

  @if (to-lower-case($direction) == 'top' or to-lower-case($direction) == 't') {
    $trans-origin-val: 50% 0%;
    $direction: 'top';
  } @else if (to-lower-case($direction) == 'top-right'
      or to-lower-case($direction) == 'topright'
      or to-lower-case($direction) == 'right-top'
      or to-lower-case($direction) == 'righttop'
      or to-lower-case($direction) == 't-r'
      or to-lower-case($direction) == 'tr'
      or to-lower-case($direction) == 'r-t'
      or to-lower-case($direction) == 'rt') {
    $trans-origin-val: 100% 0%;
  } @else if (
    to-lower-case($direction) == 'right' or to-lower-case($direction) == 'r'
  ) {
    $trans-origin-val: 100% 50%;
    $direction: 'right';
  } @else if (to-lower-case($direction) == 'bottom-right'
      or to-lower-case($direction) == 'bottomright'
      or to-lower-case($direction) == 'right-bottom'
      or to-lower-case($direction) == 'rightbottom'
      or to-lower-case($direction) == 'b-r'
      or to-lower-case($direction) == 'br'
      or to-lower-case($direction) == 'r-b'
      or to-lower-case($direction) == 'r-b') {
    transform-origin: 100% 50%;
  } @else if (to-lower-case($direction) == 'bottom'
      or to-lower-case($direction) == 'btm'
      or to-lower-case($direction) == 'b') {
    transform-origin: 50% 50%;
    $direction: 'bottom';
  } @else if (to-lower-case($direction) == 'bottom-left'
      or to-lower-case($direction) == 'bottomleft'
      or to-lower-case($direction) == 'left-bottom'
      or to-lower-case($direction) == 'leftbottom'
      or to-lower-case($direction) == 'b-l'
      or to-lower-case($direction) == 'bl'
      or to-lower-case($direction) == 'l-b'
      or to-lower-case($direction) == 'lb') {
    transform-origin: 0% 50%;
  } @else if (
    to-lower-case($direction) == 'left' or
    to-lower-case($direction) == 'l'
  ) {
    transform-origin: 0% 50%;
    $direction: 'left';
  } @else if (to-lower-case($direction) == 'top-left'
      or to-lower-case($direction) == 'topleft'
      or to-lower-case($direction) == 'left-top'
      or to-lower-case($direction) == 'lefttop'
      or to-lower-case($direction) == 't-l'
      or to-lower-case($direction) == 'tl'
      or to-lower-case($direction) == 'l-t'
      or to-lower-case($direction) == 'lt') {
    transform-origin: 0% 0%;
  } @else if (to-lower-case($direction) == 'center'
      or to-lower-case($direction) != 'centre'
      or to-lower-case($direction) != 'cent'
      or to-lower-case($direction) != 'cen'
      or to-lower-case($direction) != 'c') {
    $direction: 'center';
  } @else {
    @error 'Invalid direction value of `#{inspect($direction)}` for the ' +
    '`scale-up` mixin.';
  }

  @if ($axis and $axis != 'none' and $axis != 'no' and $axis != 'n') {
    @if( $axis == 'vertical' or $axis == 'vert'
        or $axis == 'ver' or $axis == 'v') {
      $trans-val1: scaleY(.4);
      $trans-val2: scaleY(1);
      @if ($direction != 'top' and $direction != 'bottom'
          and $direction != 'center') {
        @error 'You have chosen an axis value of `vertical` that cannot be ' +
            'used with the direction value of `#{inspect($direction)}` for the ' +
            '`scale-up` mixin. A vertical axis must have direction value of ' +
            'either `top`, `bottom`, or `center`.';
      } @else if ($direction == 'top') {
        $trans-origin-val: 100% 0%;
      } @else if ($direction == 'bottom' ){
        $trans-origin-val: 0% 50%;
      }
    } @else if ($axis == 'horizontal' or $axis == 'horz' or $axis == 'hor'
        or $axis == 'h') {
      $trans-val1: scaleX(.4);
      $trans-val2: scaleX(1);
      @if ($direction != 'left' and $direction != 'right'
          and $direction != 'center') {
        @error 'You have chosen an axis value of `horizontal` that cannot be ' +
            'used with the direction value of `#{inspect($direction)}` for the ' +
            '`scale-up` mixin. A horizontal axis must have direction value of ' +
            'either `left`, `right`, or `center`.';
      } @else if ($direction == 'left') {
        $trans-origin-val: 0% 0%;
      } @else if ($direction == 'right') {
        $trans-origin-val: 100% 50%;
      }
    } @else {
      @error 'Invalid $axis value of `#{inspect($axis)}` for the `scale-up` mixin.';
    }
  }

  @if type-of($timing) != 'number' {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `scale-up` ' +
        'mixin. The timing property must be a number.';
  } @else if unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not index('s' 'ms', unit($timing)) {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `scale-up` ' +
        'mixin. The timing property must be in either s or ms units.';
  } @else if (unit($timing) == 'ms' and $timing % 10 == 0ms) {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;
    // Get rid of possible leading zero in front of decimal place
    @if (str-slice($timing + '', 1, 2) == '0.') {
      $timing: unquote(str-slice($timing + '', 2));
    }
  }

  @if (
    $delay == 0 or $delay == 0s or $delay == 0ms or
    $delay == 'none' or $delay == 'no' or $delay == 'n' or
    $delay == 'n/a' or $delay == nil or not $delay
  ) {
    $delay: null;
  }
  @if $delay {
    @if type-of($delay) != 'number' {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `scale-up` ' +
          'mixin. The delay property must be a number.';
    } @else if (unitless($delay)) {
      $delay: $delay * 1s;
    } @else if not index('s' 'ms', unit($delay)) {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `scale-up` ' +
          'mixin. The delay property must be in either s or ms units.';
    } @else if (unit($delay) == 'ms' and $delay % 10 == 0ms) {
      $delay: math.div($delay, 1000ms) * 1s;
      @if (str-slice($delay + '', 1, 2) == '0.') {
        $delay: #{str-slice($delay + '', 2)};
      }
    }
  } @else {
    $delay: null;
  }

  @if ($iterations) {
    @if (
      $iterations == 'infinite' or $iterations == 'inf' or $iterations == 'i'
    ) {
      $iterations: infinite;
    } @else if (
      (unitless($iterations) and type-of($iterations) == 'number') or
      $iterations == initial or $iterations == inherit
    ) {
      $iterations: $iterations;
    } @else {
      @error 'Invalid iteration-count value of `#{inspect($iterations)}` for the ' +
          '`scale-up` mixin.';
    }
  } @else {
    $iterations: null;
  }

  @if (
    not $anim-dir or $anim-dir == 'none' or $anim-dir == 'no' or
    $anim-dir == 'n/a' or $anim-dir == 'n' or $anim-dir == 'default' or
    $anim-dir == 'def' or $anim-dir == 'normal' or $anim-dir == 'nor'
  ) {
    $anim-dir: null;
  } @else if ($anim-dir == 'reverse' or $anim-dir == 'rev' or $anim-dir == 'r') {
    $anim-drection: reverse;
  } @else if ($anim-dir == 'alternate' or $anim-dir == 'alt' or $anim-dir == 'a') {
    $anim-dir: alternate;
  } @else if (
    $anim-dir == 'alternate-reverse' or $anim-dir == 'alternatereverse' or
    $anim-dir == 'alt-rev' or $anim-dir == 'altrev' or $anim-dir == 'a-r' or
    $anim-dir == 'ar'
  ) {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of `#{inspect($anim-dir)}` for the ' +
        '`scale-up` mixin';
  }

  @if (not $timing-func or $timing-func == true or $timing-func == 'none'
      or $timing-func == 'no' or $timing-func == 'n' or $timing-func == 'def'
      or $timing-func == 'default' or $timing-func == 'd') {
    // Take all potential values the user might pass to keep the default setting
    // and ensure that the timing function remains at that default
    $timing-func: cubic-bezier(.39, .575, .565, 1);
  }

  @if not $anim-num {
    $anim-num: null;
  }
  animation: scale-up#{$anim-num} #{$timing} #{$timing-func}
              #{$delay} #{$iterations} #{$anim-dir} both;
  @at-root {
    @keyframes scale-up#{$anim-num} {
      0% {
        transform: $trans-val1;
        @if ($direction != 'center') {
        transform-origin: $t  rans-origin-val1;
        }
      }

      100% {
        transform: $trans-val2;
        @if ($direction != 'center') {
          transform-origin: $trans-origin-val2;
        }
      }
    }
  }
}


/// Applies a fast custom scrollbar to the page, or to an internal element
/// within the page. The effect works the best in webkit based browsers (Chrome,
/// Safari, Opera, etc.), but it will apply the custom foreground and background
/// color to the scrollbar in IE 6+, and in Firefox 64+ it will apply the
/// background and foreground colors and can reduce the size of the bar.
///
/// @param {Length} $size - The height and width of the custom scrollbar.
/// @param {Color|Gradient} $fg-color - The color of the foreground or 'handle'
/// of the scrollbar.
/// @param {Color|Gradient} $bg-color [mix($fg-color, #000, 50%)] - The color
/// of the background of the scrollbar.
/// @param {Lenth-Percentage} $radius [null] - The optional border radius
/// value of the scrollbar.
/// @param {Boolean} $is-internal [false] - Pass a true value if the scrollbar
/// is inside of an element rather than being applied outside of any selector,
/// which is the recommended way of applying this mixin to the browser window's
/// scrollbar.
///
/// @group Utilities
@mixin scrollbar(
  $size,
  $fg-color,
  $bg-color: mix($fg-color, #000, 50%),
  $radius: null,
  $is-internal: false
) {
  $ff-scroll-size: if($size < 15, thin, auto);
  @if $is-internal {
    & {
      scrollbar-face-color: $fg-color; // IE 6+
      scrollbar-track-color: $bg-color; // IE 6+
      scrollbar-shadow-color: mix(#000, $bg-color, 30%); // IE 6+
      scrollbar-color: $fg-color $bg-color; // Firefox 64+
      scrollbar-width: $ff-scroll-size; // Firefox 64+

      &::-webkit-scrollbar {
        height: $size;
        width: $size;

        &-track {
          background: $bg-color;
          @if $radius {
            border-radius: $radius;
          }
        }

        &-thumb {
          background: $fg-color;
          @if $radius {
            border-radius: $radius;
          }

          &:hover { background: mix(#000, $fg-color, 17.5%); }

          &:active {
            background: mix(#000, $fg-color, 35%);
            box-shadow: inset 1px 1px 3px rgba(mix(#fff, $fg-color, 30%), .5);
          }
        }
      }
    }
  } @else {
    html {
      scrollbar-face-color: $fg-color; // IE 6+
      scrollbar-track-color: $bg-color; // IE 6+
      scrollbar-shadow-color: mix(#000, $bg-color, 30%); // IE 6+
      scrollbar-color: $fg-color $bg-color; // Firefox 64+
      scrollbar-width: $ff-scroll-size; // Firefox 64+
    }

    ::-webkit-scrollbar {
      height: $size;
      width: $size;

      &-track {
        background: $bg-color;
        @if $radius {
          border-radius: $radius;
        }
      }

      &-thumb {
        background: $fg-color;
        @if $radius {
          border-radius: $radius;
        }

        &:hover { background: mix(#000, $fg-color, 17.5%); }

        &:active {
          background: mix(#000, $fg-color, 35%);
          box-shadow: inset 1px 1px 3px rgba(mix(#fff, $fg-color, 30%), .5);
        }
      }
    }
  }
}


/// Use on the wrapper for an element with the a clip-path effect applied to add
/// a drop shadow to the clipped shape.
///
/// @param {List} $shadow-vars [-1px 6px 3px] - The values for the drop shadow.
/// @param {Color} $shadow-color [rgba(50, 50, 0, .5)] The shadow's color.
///
/// @group Shapes
@mixin shape-shadow($shadow-vars: -1px 6px 3px, $shadow-color: rgba(50, 50, 0, .5)) {
  filter: drop-shadow(#{$shadow-vars} #{$shadow-color});
}


/// Generates an animation that slides an element in or out from or towards a
/// given direction.
///
/// @param {String|Boolean} $in-or-out [in] - Determines if the element will
/// slide `in` (or true, `i`) our `out` (or false, `o`).
/// @param {String} $direction [top] - Will either slide in from this
/// direction or slide out towards this direction.
/// @param {Time} $timing [.6s] - The duration of the animation (s or ms)
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {Number|String} $iterations [null] - The number of iterations
/// to complete. If the value passed is not a number, it will be set to infinite
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// null assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for the
/// animation. A null value passed here will default to the recommended timing
/// function for this animation of `cubic-bezier(.25, .46, .45, .94)` on a slide
/// in and a timing function of `cubic-bezier(.55, .085, .68, .53)` on a slide
/// out.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $in-or-out value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $iterations value
/// @throw Invalid $anim-dir value
@mixin slide(
  $in-or-out: in,
  $direction: 'top-left',
  $timing: .6s,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: null,
  $anim-num: null
) {
  // Default values for a slide in from the top
  $opacity-val1: 0;
  $opacity-val2: 1;
  $trans-val1: translateY(-1000px);
  $trans-val2: translateY(0);
  $temp-val: null;

  // Input scrubbing
  @if $in-or-out == true or $in-or-out == 'in' or $in-or-out == 'i' {
    $in-or-out: true;
  } @else if $in-or-out == false or $in-or-out == 'out' or $in-or-out == 'o' {
    $in-or-out: false;
  } @else {
    @error 'Invalid $in-or-out value of [#{inspect($in-or-out)}] for the ' +
        '`slide` mixin.';
  }

  @if $direction {
    @if (
      to-lower-case($direction) == 'bottom' or
      to-lower-case($direction) == 'btm' or
      to-lower-case($direction) == 'b'
    ) {
      $trans-val1: translateY(1000px);
    } @else if (
      to-lower-case($direction) == 'left'or to-lower-case($direction) == 'l'
    ) {
      $trans-val1: translateX(-1000px);
      $trans-val2: translateX(0);
    } @else if (
      to-lower-case($direction) == 'right' or to-lower-case($direction) == 'r'
    ) {
      $trans-val1: translateX(1000px);
      $trans-val2: translateX(0);
    } @else if (
      to-lower-case($direction) == 'top-left' or
      to-lower-case($direction) == 'topleft' or
      to-lower-case($direction) == 't-l' or
      to-lower-case($direction) == 'tl' or
      to-lower-case($direction) == 'left-top' or
      to-lower-case($direction) == 'lefttop' or
      to-lower-case($direction) == 'l-t' or
      to-lower-case($direction) == 'lt'
    ) {
      $trans-val1: translateY(-1000px) translateX(-1000px);
      $trans-val2: translateY(0) translateX(0);
    } @else if (
      to-lower-case($direction) == 'top-right' or
      to-lower-case($direction) == 'topright' or
      to-lower-case($direction) == 't-r' or
      to-lower-case($direction) == 'tr' or
      to-lower-case($direction) == 'right-top' or
      to-lower-case($direction) == 'righttop' or
      to-lower-case($direction) == 'r-t' or
      to-lower-case($direction) == 'rt'
    ) {
      $trans-val1: translateY(-1000px) translateX(1000px);
      $trans-val2: translateY(0) translateX(0);
    } @else if (
      to-lower-case($direction) == 'bottom-right' or
      to-lower-case($direction) == 'bottomright' or
      to-lower-case($direction) == 'b-r' or
      to-lower-case($direction) == 'br' or
      to-lower-case($direction) == 'right-bottom' or
      to-lower-case($direction) == 'rightbottom' or
      to-lower-case($direction) == 'r-b' or
      to-lower-case($direction) == 'rb'
    ) {
      $trans-val1: translateY(1000px) translateX(1000px);
      $trans-val2: translateY(0) translateX(0);
    } @else if (
      to-lower-case($direction) == 'bottom-left' or
      to-lower-case($direction) == 'bottomleft' or
      to-lower-case($direction) == 'b-l' or
      to-lower-case($direction) == 'bl' or
      to-lower-case($direction) == 'left-bottom' or
      to-lower-case($direction) == 'leftbottom' or
      to-lower-case($direction) == 'l-b' or
      to-lower-case($direction) == 'lb'
    ) {
      $trans-val1: translateY(1000px) translateX(-1000px);
      $trans-val2: translateY(0) translateX(0);
    } @else {
      @error 'Invalid direction of [#{inspect($direction)}] chosen for the ' +
          '`slide` mixin.';
    }
  } @else {
    $direction: null;
  }

  @if not $in-or-out {
    // Swap values for slide-out state
    $temp-val: $opacity-val1;
    $opacity-val1: $opacity-val2;
    $opacity-val2: $temp-val;

    $temp-val: $trans-val1;
    $trans-val1: $trans-val2;
    $trans-val2: $temp-val;
  }

  @if type-of($timing) != 'number' {
    @error 'Invalid timing value of [#{inspect($timing)}] for the `slide` ' +
        'mixin. The timing property must be a number.';
  } @else if unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not index('s' 'ms', unit($timing)) {
    @error 'Invalid timing value of [#{inspect($timing)}] for the `slide` mixin.' +
        'The timing property must be in either s or ms units.';
  } @else if ($timing % 10 == 0ms) {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;

    // Get rid of possible leading zero in front of decimal place
    @if (str-slice($timing + '', 1, 2) == '0.') {
      $timing: unquote(str-slice($timing + '', 2));
    }
  }

  @if (
    $delay == 0 or $delay == 0s or $delay == 0ms or
    $delay == 'none' or $delay == 'no' or $delay == 'n' or
    $delay == 'n/a' or $delay == nil or not $delay
  ) {
    $delay: null;
  }
  @if $delay {
    @if type-of($delay) != 'number' {
      @error 'Invalid delay value of [#{inspect($delay)}] for the `slide` mixin.' +
          'The delay property must be a number.';
    } @else if unitless($delay) {
      $delay: $delay * 1s;
    } @else if not index('s' 'ms', unit($delay)) {
      @error 'Invalid delay value of [#{inspect($delay)}] for the `slide` mixin.' +
          'The delay property must be in either s or ms units.';
    } @else if $delay % 10 == 0ms {
      $delay: math.div($delay, 1000ms) * 1s;
      @if str-slice($delay + '', 1, 2) == '0.' {
        $delay: #{str-slice($delay + '', 2)};
      }
    }
  }

  @if $iterations {
    @if (
      $iterations == 'infinite' or $iterations == 'inf' or $iterations == 'i'
    ) {
      $iterations: infinite;
    } @else if (
      (unitless($iterations) and type-of($iterations) == 'number') or
      $iterations == initial or $iterations == inherit
    ) {
      $iterations: $iterations;
    } @else {
      @error 'Invalid iteration-count value of [#{inspect($iterations)}] for ' +
          'the `slide` mixin.';
    }
  }

  @if (
    not $anim-dir or $anim-dir == 'none' or $anim-dir == 'no' or
    $anim-dir == 'n/a' or $anim-dir == 'n' or $anim-dir == 'default' or
    $anim-dir == 'def' or $anim-dir == 'normal' or $anim-dir == 'nor'
  ) {
    $anim-dir: null;
  } @else if $anim-dir == 'reverse' or $anim-dir == 'rev' or $anim-dir == 'r' {
    $anim-drection: reverse;
  } @else if $anim-dir == 'alternate' or $anim-dir == 'alt' or $anim-dir == 'a' {
    $anim-dir: alternate;
  } @else if (
    $anim-dir == 'alternate-reverse' or $anim-dir == 'alternatereverse' or
    $anim-dir == 'alt-rev' or $anim-dir == 'altrev' or $anim-dir == 'a-r' or
    $anim-dir == 'ar'
  ) {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of [#{inspect($anim-dir)}] for the ' +
        '`slide` mixin';
  }

  @if (
    not $timing-func or $timing-func == true or $timing-func == 'none' or
    $timing-func == 'no' or $timing-func == 'n' or $timing-func == 'def' or
    $timing-func == 'default' or $timing-func == 'd'
  ) {
    // Take all potential values the user might pass to keep the default setting
    // and ensure that the timing function remains at that default
    $timing-func: if(
      ($in-or-out),
        cubic-bezier(.25, .46, .45, .94),
        cubic-bezier(.55, .085, .68, .53)
    );
  }

  @if not $anim-num {
    $anim-num: null;
  }
  animation:
    slide#{$anim-num} #{$timing} #{$timing-func}
    #{$delay} #{$iterations} #{$anim-dir} both;

  @at-root {
    @keyframes slide#{$anim-num} {
      0% {
        opacity: $opacity-val1;
        transform: $trans-val1;
      }

      100% {
        opacity: $opacity-val2;
        transform: $trans-val2;
      }
    }
  }
}



/// Generates an animation that appears to either slit an element in or out on
/// its axis.
///
/// @param {String|Boolean} $in-or-out [in] - Determines if the element will
/// appear to slit `in` (or true, `i`) or `out` (or false, `o`).
/// @param {String} $axis [right] - The axis on which the animation turns
/// the element.
/// @param {Time} $timing [.5s] - The duration of the animation (s or ms)
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {Number|String} $iterations [null] - The number of iterations
/// to complete. If the value passed is not a number, it will be set to infinite
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// null assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for
/// the animation. A default of null will apply a timing-function of ease-out
/// on a slit-in animation and ease-in on a slit-out animation.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $in-or-out value
/// @throw Invalid $axis value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $iterations value
/// @throw Invalid $anim-dir value
@mixin slit(
  $in-or-out: in,
  $axis: horizontal,
  $timing: .5s,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: null,
  $anim-num: null
) {
  // Default tranform values for slit in on an $axis of 'horizontal'
  $trans-val1: translateZ(-800px) rotateX(90deg);
  $trans-val2: translateZ(-160px) rotateX(87deg);
  $trans-val3: translateZ(0) rotateX(0);
  $opacity-val1: 0;
  $opacity-val2: 1;
  $temp-val: null;
  $is-diagonal: false;

  // Input scrubbing
  @if ($in-or-out == true or $in-or-out == 'in' or $in-or-out == 'i') {
    $in-or-out: true;
  } @else if ($in-or-out == false or $in-or-out == 'out' or $in-or-out == 'o') {
    $in-or-out: false;
  } @else {
    @error 'Invalid $in-or-out value of `#{inspect($in-or-out)}` for the `slit` mixin.';
  }

  @if ($axis) {
    @if (to-lower-case($axis) == 'vertical'
        or to-lower-case($axis) == 'vert' or to-lower-case($axis) == 'ver'
        or to-lower-case($axis) == 'v') {
      $trans-val1: translateZ(-800px) rotateY(90deg);
      $trans-val2: translateZ(-160px) rotateY(87deg);
      $trans-val3: translateZ(0) rotateY(0);
    } @else if (to-lower-case($axis) == 'diagonal'
        or to-lower-case($axis) == 'diagonal1' or to-lower-case($axis) == 'diag'
        or to-lower-case($axis) == 'diag1' or to-lower-case($axis) == 'd'
        or to-lower-case($axis) == 'd1') {
      $trans-val1: translateZ(-800px) rotate3d(1, 1, 0, 90deg);
      $trans-val2: translateZ(-160px) rotate3d(1, 1, 0, 87deg);
      $trans-val3: translateZ(0) rotate3d(1, 1, 0, 0);
      $is-diagonal: true;
    } @else if (to-lower-case($axis) == 'diagonal2'
        or to-lower-case($axis) == 'diag2' or to-lower-case($axis) == 'd2') {
      $trans-val1: translateZ(-800px) rotate3d(-1, 1, 0, -90deg);
      $trans-val2: translateZ(-160px) rotate3d(-1, 1, 0, -87deg);
      $trans-val3: translateZ(0) rotate3d(-1, 1, 0, 0);
      $is-diagonal: true;
    } @else if (to-lower-case($axis) != 'horizontal'
        and to-lower-case($axis) != 'horiz' and to-lower-case($axis) != 'horz'
        and to-lower-case($axis) != 'h') {
      @error 'Invalid axis of (#{inspect($axis)}) chosen for the `slit` mixin.';
    }
  } @else {
    @error 'You must choose an axis for the `slit` mixin.';
  }

  @if not $in-or-out {
    // Swap values for a slit-out state
    $temp-val: $trans-val1;
    $trans-val1: $trans-val3;
    $trans-val3: $temp-val;
    $opacity-val1: 0;
  }

  @if type-of($timing) != 'number' {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `slit` ' +
        'mixin. The timing property must be a number.';
  } @else if unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not index('s' 'ms', unit($timing)) {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `slit` mixin.' +
        'The timing property must be in either s or ms units.';
  } @else if (unit($timing) == 'ms' and $timing % 10 == 0ms) {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;
    // Get rid of possible leading zero in front of decimal place
    @if (str-slice($timing + '', 1, 2) == '0.') {
      $timing: unquote(str-slice($timing + '', 2));
    }
  }

  @if (
    $delay == 0 or $delay == 0s or $delay == 0ms or
    $delay == 'none' or $delay == 'no' or $delay == 'n' or
    $delay == 'n/a' or $delay == nil or not $delay
  ) {
    $delay: null;
  }
  @if $delay {
    @if (type-of($delay) != 'number') {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `slit` mixin.' +
          'The delay property must be a number.';
    } @else if (unitless($delay)) {
      $delay: $delay * 1s;
    } @else if not index('s' 'ms', unit($delay)) {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `slit` mixin.' +
          'The delay property must be in either s or ms units.';
    } @else if (unit($delay) == 'ms' and $delay % 10 == 0ms) {
      $delay: math.div($delay, 1000ms) * 1s;
      @if (str-slice($delay + '', 1, 2) == '0.') {
        $delay: #{str-slice($delay + '', 2)};
      }
    }
  } @else {
    $delay: null;
  }

  @if ($iterations) {
    @if (
      $iterations == 'infinite' or $iterations == 'inf' or $iterations == 'i'
    ) {
      $iterations: infinite;
    } @else if (
      (unitless($iterations) and type-of($iterations) == 'number') or
      $iterations == initial or $iterations == inherit
    ) {
      $iterations: $iterations;
    } @else {
      @error 'Invalid iteration-count value of `#{inspect($iterations)}` for the ' +
          '`slit` mixin.';
    }
  } @else {
    $iteratons: null;
  }

  @if (
    not $anim-dir or $anim-dir == 'none' or $anim-dir == 'no' or
    $anim-dir == 'n/a' or $anim-dir == 'n' or $anim-dir == 'default' or
    $anim-dir == 'def' or $anim-dir == 'normal' or $anim-dir == 'nor'
  ) {
    $anim-dir: null;
  } @else if ($anim-dir == 'reverse' or $anim-dir == 'rev' or $anim-dir == 'r') {
    $anim-drection: reverse;
  } @else if ($anim-dir == 'alternate' or $anim-dir == 'alt' or $anim-dir == 'a') {
    $anim-dir: alternate;
  } @else if (
    $anim-dir == 'alternate-reverse' or $anim-dir == 'alternatereverse' or
    $anim-dir == 'alt-rev' or $anim-dir == 'altrev' or $anim-dir == 'a-r' or
    $anim-dir == 'ar'
  ) {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of `#{inspect($anim-dir)}` for the ' +
        '`slit` mixin';
  }

  @if (not $timing-func or $timing-func == true or $timing-func == 'none'
      or $timing-func == 'no' or $timing-func == 'n' or $timing-func == 'def'
      or $timing-func == 'default' or $timing-func == 'd') {
    // Take all potential values the user might pass to keep the default setting
    // and ensure that the timing function remains at that default
    $timing-func: if(($in-or-out), ease-out, ease-in);
  }

  @if not $anim-num {
    $anim-num: null;
  }
  animation: slit#{$anim-num} #{$timing} #{$timing-func}
              #{$delay} #{$iterations} #{$anim-dir} both;
  transform: translate3d(0, 0, 0);
  transform-style: preserve-3d;
  @include only-moz {
    backface-visibility: hidden;
  }

  @at-root {
    @keyframes slit#{$anim-num} {
      0% {
        @if ($in-or-out and $is-diagonal) {
          animation-timing-function: ease-in;
        }
        opacity: $opacity-val1;
        transform: $trans-val1;
      }

      54% {
        @if ($in-or-out and $is-diagonal) {
          animation-timing-function: ease-in-out;
        }
        opacity: $opacity-val2;
        transform: $trans-val2;
      }

      100% {
        @if ($in-or-out and $is-diagonal) {
          animation-timing-function: ease-out;
        }
        @if not $in-or-out {
          opacity: 0;
        }
        transform: $trans-val3;
      }
    }
  }
}


/// Force grayscale and anti-aliased font-smoothing on Retina and other
/// HiDPI screens.
///
/// @param {Number} $ratio [2] - The pixel ratio used to target Retina and other
/// HiDPI screens. Other common values for this ratio are 1.3 and 1.5.
///
/// @group Utilities
/// @alias smooth-hidpi-fonts
@mixin smooth-retina-fonts($ratio: 2) {
  @media screen and (min-device-pixel-ratio: $ratio),
         screen and (min-resolution: ($ratio * 96dpi)),
         screen and (min-resolution: ($ratio * 1dppx)) {
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
  }
}

/// Force grayscale and anti-aliased font-smoothing on Retina and other
/// HiDPI screens.
///
/// @param {Number} $ratio [2] - The pixel ratio used to target Retina and other
/// HiDPI screens. Other common values for this ratio are 1.25, 1.3 and 1.5.
///
/// @group Utilities
/// @alias smooth-retina-fonts
@mixin smooth-hidpi-fonts($ratio: 2) {
  @include smooth-retina-fonts($ratio);
}


/// Animates an element like it is a rubber band being pulled and snapped.
///
/// @param {String} $direction [horizontal] - The direction of the animation
/// occurs in. Can be horizontal (`horizontal`, `horiz`, or `h`), vertical
/// (`vertical`, `vert`, or `v`), right diagonal (`right-diagonal`, `rd`,
/// `diagonal1` or `d1`) or left-diagonal (`left-diagonal`, `ld`, `diagonal2`,
/// or `d2`).
/// @param {Time} $timing [.9s] - The duration of the animation (s or ms).
/// @param {Time} $delay [null] - The optional delay of the animation (ms or s)
/// @param {Number|String} $iterations [null] - The number of iterations
/// for the animation to complete. If the value passed is not a number, it will
/// be set to infinite.
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// null assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for the
/// animation. A null $timing-func will create an animation with the CSS default
/// timiing-function of ease.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $direction value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $iterations value
/// @throw Invalid $anim-dir value
@mixin snappiness(
  $direction: horizontal,
  $timing: .9s,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: linear,
  $anim-num: null
) {
  // Default $direction values for horizontal
  $dir-val1: scale3d(1, 1, 1);
  $dir-val2: scale3d(1.25, .75, 1);
  $dir-val3: scale3d(.75, 1.25, 1);
  $dir-val4: scale3d(1.15, .85, 1);
  $dir-val5: scale3d(.95, 1.05, 1);
  $dir-val6: scale3d(1.05, .95, 1);

  @if (to-lower-case($direction) == 'vertical'
      or to-lower-case($direction) == 'vert'
      or to-lower-case($direction) == 'v') {
    $dir-val1: scale3d(1, 1, 1);
    $dir-val2: scale3d(.75, 1.25, 1);
    $dir-val3: scale3d(1.25, .75, 1);
    $dir-val4: scale3d(.85, 1.15, 1);
    $dir-val5: scale3d(1.05, .95, 1);
    $dir-val6: scale3d(.95, 1.05, 1);
  } @else if (to-lower-case($direction) == 'right-diagonal'
      or to-lower-case($direction) == 'rd'
      or to-lower-case($direction) == 'diagonal1'
      or to-lower-case($direction) == 'd1') {
    $dir-val1: skew(0, 0);
    $dir-val2: skew(25deg, 25deg);
    $dir-val3: skew(-15deg, -15deg);
    $dir-val4: skew(15deg, 15deg);
    $dir-val5: skew(-5deg, -5deg);
    $dir-val6: skew(5deg, 5deg);
  } @else if (to-lower-case($direction) == 'left-diagonal'
      or to-lower-case($direction) == 'ld'
      or to-lower-case($direction) == 'diagonal2'
      or to-lower-case($direction) == 'd2') {
    $dir-val1: skew(0, 0);
    $dir-val2: skew(-25deg, -25deg);
    $dir-val3: skew(15deg, 15deg);
    $dir-val4: skew(-15deg, -15deg);
    $dir-val5: skew(5deg, 5deg);
    $dir-val6: skew(-5deg, -5deg);
  } @else if (to-lower-case($direction) != 'horizontal'
      and to-lower-case($direction) != 'hor'
      and to-lower-case($direction) != 'h') {
    @error '`#{inspect($direction)}` is not a valid direction for the ' +
        'snappiness mixin.';
  }

  @if type-of($timing) != 'number' {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `snappinesss` ' +
        'mixin. The timing property must be a number.';
  } @else if unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not index('s' 'ms', unit($timing)) {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `snappinesss` ' +
        'mixin. The timing property must be in either s or ms units.';
  } @else if ($timing % 10 == 0ms) {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;
    // Get rid of possible leading zero in front of decimal place
    @if (str-slice($timing + '', 1, 2) == '0.') {
      $timing: unquote(str-slice($timing + '', 2));
    }
  }

  @if ($delay == 0 or $delay == 0s or $delay == 0ms or $delay or $delay == 'none'
      or $delay 'no' or $delay == 'n' or $delay == 'n/a' or $delay == nil) {
    $delay: null;
  }
  @if $delay {
    @if (type-of($delay) != 'number') {
      @error 'Invalid delay value of `#{inspect($delay)}` for the ' +
          '`snappinesss` mixin. The delay property must be a number.';
    } @else if (unitless($delay)) {
      $delay: $delay * 1s;
    } @else if not index('s' 'ms', unit($delay)) {
      @error 'Invalid delay value of `#{inspect($delay)}` for the ' +
          '`snappiness` mixin. The delay property must be in either `s` ' +
          '(seconds) or `ms` (milliseconds) units.';
    } @else if ($delay % 10 == 0ms) {
      $delay: math.div($delay, 1000ms) * 1s;
      @if (str-slice($delay + '', 1, 2) == '0.') {
        $delay: #{str-slice($delay + '', 2)};
      }
    }
  } @else {
    $delay: null;
  }

  @if ($iterations) {
    @if (
      $iterations == 'infinite' or $iterations == 'inf' or $iterations == 'i'
    ) {
      $iterations: infinite;
    } @else if (
      (unitless($iterations) and type-of($iterations) == 'number') or
      $iterations == initial or $iterations == inherit
    ) {
      $iterations: $iterations;
    } @else {
      @error 'Invalid iteration-count value of `#{inspect($iterations)}` for the ' +
          '`snappiness` mixin.';
    }
  } @else {
    $iterations: null;
  }

  @if (
    not $anim-dir or $anim-dir == 'none' or $anim-dir == 'no' or
    $anim-dir == 'n/a' or $anim-dir == 'n' or $anim-dir == 'default' or
    $anim-dir == 'def' or $anim-dir == 'normal' or $anim-dir == 'nor'
  ) {
    $anim-dir: null;
  } @else if (
    $anim-dir == 'reverse' or $anim-dir == 'rev' or $anim-dir == 'r'
  ) {
    $anim-drection: reverse;
  } @else if (
    $anim-dir == 'alternate' or $anim-dir == 'alt' or $anim-dir == 'a'
  ) {
    $anim-dir: alternate;
  } @else if (
    $anim-dir == 'alternate-reverse' or $anim-dir == 'alternatereverse' or
    $anim-dir == 'alt-rev' or $anim-dir == 'altrev' or $anim-dir == 'a-r' or
    $anim-dir == 'ar'
  ) {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of `#{inspect($anim-dir)}` for the ' +
        '`snappiness` mixin';
  }

  @if (
    not $timing-func or $timing-func == true or $timing-func == 'none' or
    $timing-func == 'no' or $timing-func == 'n' or $timing-func == 'def' or
    $timing-func == 'default' or $timing-func == 'd' or
    $timing-func == 'ease'
  ) {
    $timing-func: null;
  }

  @if not $anim-num {
    $anim-num: null;
  }
  animation: snap#{$anim-num} #{$timing} #{$timing-func} #{$delay}
              #{$iterations} #{$anim-dir} both;

  @at-root {
    @keyframes snap#{$anim-num} {
      0%,
      100% {
        transform: #{$dir-val1};
      }

      30% {
        transform: #{$dir-val2};
      }

      40% {
        transform: #{$dir-val3};
      }

      50% {
        transform: #{$dir-val4};
      }

      65% {
        transform: #{$dir-val5};
      }

      75% {
        transform: #{$dir-val6};
      }
    }
  }
}


/// Uses clip path to change an element to the shape of a square speech bubble.
///
/// @param {Color|Mixed} $bg [#fb8c00] The color or background value.
/// @param {Length-Percentage} $size [15rem] - The size of the shape. If
/// the $height property is not set explicitly, it is both height and width, if
/// $height is set explicitly, then this value sets only the width.
/// @param {Color} $fg-color [null] The color of any text in the shape
/// @param {Length-Percentage} $height [$size] The height of the shape.
///
/// @group Utilities
@mixin speech-bubble(
  $bg: #fb8c00,
  $size: 15rem,
  $fg-color: null,
  $height: $size
) {
  background: $bg;

  @if ($fg-color) {
    color: $fg-color;
  }
  clip-path: polygon( 0 0, 100% 0, 100% 75%, 75% 75%,
                      75% 100%, 50% 75%, 0 75% );
  height: $height;
  width: $size;
}


/// Uses clip path to change an element to a star shape
///
/// @param {Color|Mixed} $bg [#fb8c00] The color or background value.
/// @param {Length-Percentage} $size [15rem] - The height and width.
/// @param {Color} $fg-color [null] The color of any text in the shape.
///
/// @group Shapes
@mixin star($bg: #fb8c00, $size: 15rem, $fg-color: null) {
  background: $bg;

  @if ($fg-color) {
    color: $fg-color;
  }
  clip-path: polygon( 50% 0, 61% 35%, 98% 35%, 68% 57%,
                      79% 91%, 50% 70%, 21% 91%, 32% 57%,
                      2% 35%, 39% 35% );
  height: $size;
  width: $size;
}


/// References the octagon clip-path mixin to create a stop sign shape with a
/// background color of red and white text as the defaults.
///
/// @param {Color|Mixed} $bg [#8b0000] - Can be any value that is valid for the
/// background shorthand property.
/// @param {Length-Percentage} $size [15rem] - The height and width of
/// the element.
/// @param {Color} $fg-color [#fff] - Optional argument that sets the color
/// property for the elment.
///
/// @group Shapes
/// @require {mixin} octagon
@mixin stop-sign($bg: #8b0000, $size: 15rem, $fg-color: #fff) {
  @include octagon($bg, $size, $fg);
}


/// Animates text from focused in, to blurred out, to invisible
///
/// @param {String} $style [out] - The style of the blur-out effect. Can be
/// `out` (or `o`, null, `none`, `no`, `n` `default`, or `def`), `expand`
/// (or `exp`, or 'e'), `forward` (or `fwd` or `f`), `contract` (or `cont` or
/// `c`), or `backward` (or `back`, `bck`, or `b`).
/// @param {Time} $timing [1s] - The duration of the animation (s or ms).
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {Number|String} $iterations [null] - The number of iterations
/// for the animation to complete. If the value passed is not a number, it will
/// be set to infinite.
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction
/// property. Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`.
/// Default of null assumes the default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for the
/// animation. If no specific function is passed, the mixin will choose the
/// best custom timing function for the given style.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $style value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $iterations value
/// @throw Invalid $anim-dir value
@mixin text-blur-out(
  $style: in,
  $timing: 1s,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: null,
  $anim-num: null
) {
  @if (not $timing-func) {
    @if (not $style or to-lower-case($style) == 'expand'
        or to-lower-case($style) == 'exp'
        or to-lower-case($style) == 'e' or to-lower-case($style) == 'forward'
        or to-lower-case($style) == 'fwd' or to-lower-case($style) == 'f') {
      $timing-func: cubic-bezier(.25, .46, .45, .94);
    } @else {
      $timing-func: cubic-bezier(.55, .085, .68, .53);
    }
  }

  @if type-of($timing) != 'number' {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `text-blur-out` ' +
        'mixin. The timing property must be a number.';
  } @else if unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not index('s' 'ms', unit($timing)) {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `text-blur-out` ' +
        'mixin. The timing property must be in either s or ms units.';
  } @else if ($timing % 10 == 0ms) {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;
    // Get rid of possible leading zero in front of decimal place
    @if (str-slice($timing + '', 1, 2) == '0.') {
      $timing: unquote(str-slice($timing + '', 2));
    }
  }

  @if (
    $delay == 0 or $delay == 0s or $delay == 0ms or
    $delay == 'none' or $delay == 'no' or $delay == 'n' or
    $delay == 'n/a' or $delay == nil or not $delay
  ) {
    $delay: null;
  }
  @if $delay {
    @if (type-of($delay) != 'number') {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `text-blur-out` ' +
          'mixin. The delay property must be a number.';
    } @else if (unitless($delay)) {
      $delay: $delay * 1s;
    } @else if not index('s' 'ms', unit($delay)) {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `text-blur-out` ' +
          'mixin. The delay property must be in either s or ms units.';
    } @else if ($delay % 10 == 0ms) {
      $delay: math.div($delay, 1000ms) * 1s;
      @if (str-slice($delay + '', 1, 2) == '0.') {
        $delay: #{str-slice($delay + '', 2)};
      }
    }
  } @else {
    $delay: null;
  }

  @if ($iterations) {
    @if (to-lower-case($iterations) == 'infinite'
        or to-lower-case($iterations) == 'inf'
        or to-lower-case($iterations) == 'i') {
      $iterations: infinite;
    } @else if (
      (unitless($iterations) and type-of($iterations) == 'number') or
      $iterations == initial or $iterations == inherit
    ) {
      $iterations: $iterations;
    } @else {
      @error 'Invalid iteration-count value of `#{inspect($iterations)}` for the ' +
          '`text-blur-out` mixin.';
    }
  } @else {
    $iterations: null;
  }

  @if (not $anim-dir or to-lower-case($anim-dir) == 'none'
      or to-lower-case($anim-dir) == 'no'
      or to-lower-case($anim-dir) == 'n/a'
      or to-lower-case($anim-dir) == 'n'
      or to-lower-case($anim-dir) == 'default'
      or to-lower-case($anim-dir) == 'def'
      or to-lower-case($anim-dir) == 'normal'
      or to-lower-case($anim-dir) == 'nor') {
    $anim-dir: null;
  } @else if (to-lower-case($anim-dir) == 'reverse'
      or to-lower-case($anim-dir) == 'rev'
      or to-lower-case($anim-dir) == 'r') {
    $anim-drection: reverse;
  } @else if (to-lower-case($anim-dir) == 'alternate'
      or to-lower-case($anim-dir) == 'alt'
      or to-lower-case($anim-dir) == 'a') {
    $anim-dir: alternate;
  } @else if (to-lower-case($anim-dir) == 'alternate-reverse'
      or to-lower-case($anim-dir) == 'alternatereverse'
      or to-lower-case($anim-dir) == 'alt-rev'
      or to-lower-case($anim-dir) == 'altrev'
      or to-lower-case($anim-dir) == 'a-r'
      or to-lower-case($anim-dir) == 'ar') {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of `#{inspect($anim-dir)}` for the ' +
        '`text-blur-out` mixin';
  }
  animation: txt-blur-out#{$anim-num} #{$timing} #{$timing-func}
              #{$delay} #{$iterations} #{$anim-dir} both;

  @at-root {
    @keyframes txt-blur-out#{$anim-num} {
      0% {
        filter: blur(.01px);
        @if (to-lower-case($style) == 'backward'
            or to-lower-case($style) == 'bck' or to-lower-case($style) == 'back'
            or to-lower-case($style) == 'b' or to-lower-case($style) == 'f'
            or to-lower-case($style) == 'fwd'
            or to-lower-case($style) == 'forward') {
          transform: translateZ(0);
        }
      }

      100% {
        filter: blur(12px) opacity(0);
        @if (to-lower-case($style) == 'contract'
            or to-lower-case($style) == 'cont' or to-lower-case($style) == 'c') {
          letter-spacing: -.5em;
        } @else if (to-lower-case($style) == 'backward'
            or to-lower-case($style) == 'bck' or to-lower-case($style) == 'back'
            or to-lower-case($style) == 'b') {
          letter-spacing: -.5em;
          transform: translateZ(-500px);
        } @else if (to-lower-case($style) == 'expand'
            or to-lower-case($style) == 'exp' or to-lower-case($style) == 'e') {
          letter-spacing: 1em;
        } @else if (to-lower-case($style) == 'forward'
            or to-lower-case($style) == 'fwd' or to-lower-case($style) == 'f') {
          letter-spacing: 1em;
          transform: translateZ(300px);
        }
      }
    }
  }
}


/// Adds a shadow dropping animation to a given element's text
///
/// @param {String} $direction [center] - The direction the shadow will fall.
/// @param {Time} $timing [.7s] The duration of the animation (s or ms).
/// @param {Time} $delay [null] The duration of the optional animation delay.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $direction value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
@mixin text-drop-shadow(
  $direction: center,
  $timing: .7s,
  $delay: null,
  $anim-num: null
) {
  $dir-vals: 0 0 18px; // Default of center

  @if (to-lower-case($direction) == 'bottom'
      or to-lower-case($direction) == 'b') {
    $dir-vals: 0 6px 18px;
  } @else if (to-lower-case($direction) == 'bottom-right'
      or to-lower-case($direction) == 'br') {
    $dir-vals: 6px 6px 18px;
  } @else if (
    to-lower-case($direction) == 'right' or to-lower-case($direction) == 'r'
  ) {
    $dir-vals: 6px 0 18px;
  } @else if (to-lower-case($direction) == 'top-left'
      or to-lower-case($direction) == 'tl') {
    $dir-vals: -6px -6px 18px;
  } @else if (to-lower-case($direction) == 'top-right'
      or to-lower-case($direction) == 'tr') {
    $dir-vals: 6px -6px 18px;
  } @else if (
    to-lower-case($direction) == 'left' or
    to-lower-case($direction) == 'l'
  ) {
    $dir-vals: -6px 0 18px;
  } @else if (to-lower-case($direction) == 'top'
      or to-lower-case($direction) == 't') {
    $dir-vals: 0 -6px 18px;
  } @else if (to-lower-case($direction) == 'bottom-left'
      or to-lower-case($direction) == 'bl') {
    $dir-vals: -6px 6px 18px;
  } @else if (to-lower-case($direction) != 'center'
      and to-lower-case($direction) != 'centre'
      and to-lower-case($direction) != 'cent'
      and to-lower-case($direction) != 'cen'
      and to-lower-case($direction) != 'c') {
    @error '`#{inspect($direction)}` is not a valid direction for the ' +
        '`drop-text-shadow` mixin.';
  }

  @if type-of($timing) != 'number' {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `text-drop-shadow` ' +
        'mixin. The timing property must be a number.';
  } @else if unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not index('s' 'ms', unit($timing)) {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `text-drop-shadow` ' +
        'mixin. The timing property must be in either s or ms units.';
  } @else if ($timing % 10 == 0ms) {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;
    // Get rid of possible leading zero in front of decimal place
    @if (str-slice($timing + '', 1, 2) == '0.') {
      $timing: unquote(str-slice($timing + '', 2));
    }
  }

  @if (
    $delay == 0 or $delay == 0s or $delay == 0ms or
    $delay == 'none' or $delay == 'no' or $delay == 'n' or
    $delay == 'n/a' or $delay == nil or not $delay
  ) {
    $delay: null;
  }
  @if $delay {
    @if (type-of($delay) != 'number') {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `text-drop-shadow` ' +
          'mixin. The delay property must be a number.';
    } @else if (unitless($delay)) {
      // If no there is no unit for $delay, assume seconds
      $delay: $delay * 1s;
    } @else if not index('s' 'ms', unit($delay)) {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `text-drop-shadow` ' +
          'mixin. The delay property must be in either s or ms units.';
    } @else if ($delay % 10 == 0ms) {
      // If time in ms would be shorter as seconds, convert it
      $delay: math.div($delay, 1000ms) * 1s;
      @if (str-slice($delay + '', 1, 2) == '0.') {
        $delay: #{str-slice($delay + '', 2)};
      }
    }
  } @else {
    $delay: null;
  }
  animation: txt-shadow-drop#{$anim-num} #{$timing} #{$delay} both;
  text-transform: none;

  @at-root {
    @keyframes txt-shadow-drop#{$anim-num} {
      0% {
        text-shadow: 0 0 0 rgba(0, 0, 0, 0);
      }

      100% {
        text-shadow: #{$dir-vals} rgba(0, 0, 0, .3);
      }
    }
  }
}


/// Animates text by flickering it into or out of view.
///
/// @param {String|Boolean} $in-or-out [in] - Determines whether the text will
/// flicker into or out of view. Can either be `in` (or true, `i`), or `out`
/// (or `o`, false)
/// @param {Time} $timing [3s] - The duration of the animation (s or ms).
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {Number|String} $iterations [null] - The number of iterations
/// for the animation to complete. If the value passed is not a number, it will
/// be set to infinite.
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// null assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [linear] - The timing function for the
/// animation.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $in-or-out value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $anim-dir value
@mixin text-flicker(
  $in-or-out: 'in',
  $timing: 3s,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: linear,
  $anim-num: null
) {
  @if ($in-or-out == 'in' or $in-or-out == 'i' or $in-or-out == true) {
    $in-or-out: true;
  } @else if (not $in-or-out or $in-or-out == 'out' or $in-or-out == 'o') {
    $in-or-out: false;
  } @else {
    @error 'Invalid in-out value of `#{inspect($in-or-out)}` for the `text-flicer` mixin';
  }

  @if type-of($timing) != 'number' {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `text-flicker` ' +
        'mixin. The timing property must be a number.';
  } @else if unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not index('s' 'ms', unit($timing)) {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `text-flicker` ' +
        'mixin. The timing property must be in either s or ms units.';
  } @else if ($timing % 10 == 0ms) {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;
    // Get rid of possible leading zero in front of decimal place
    @if (str-slice($timing + '', 1, 2) == '0.') {
      $timing: unquote(str-slice($timing + '', 2));
    }
  }

  @if (
    $delay == 0 or $delay == 0s or $delay == 0ms or
    $delay == 'none' or $delay == 'no' or $delay == 'n' or
    $delay == 'n/a' or $delay == nil or not $delay
  ) {
    $delay: null;
  }
  @if $delay {
    @if (type-of($delay) != 'number') {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `text-tracking-in` ' +
          'mixin. The delay property must be a number.';
    } @else if (unitless($delay)) {
      $delay: $delay * 1s;
    } @else if not index('s' 'ms', unit($delay)) {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `text-tracking-in` ' +
          'mixin. The delay property must be in either s or ms units.';
    } @else if ($delay % 10 == 0ms) {
      $delay: math.div($delay, 1000ms) * 1s;
      @if (str-slice($delay + '', 1, 2) == '0.') {
        $delay: #{str-slice($delay + '', 2)};
      }
    }
  } @else {
    $delay: null;
  }

  @if ($iterations) {
    @if (
      $iterations == 'infinite' or $iterations == 'inf' or $iterations == 'i'
    ) {
      $iterations: infinite;
    } @else if (
      (unitless($iterations) and type-of($iterations) == 'number') or
      $iterations == initial or $iterations == inherit
    ) {
      $iterations: $iterations;
    } @else {
      @error 'Invalid iteration-count value of `#{inspect($iterations)}` for the ' +
          '`text-flicker` mixin.';
    }
  }

  @if (
    not $anim-dir or $anim-dir == 'none' or $anim-dir == 'no' or
    $anim-dir == 'n/a' or $anim-dir == 'n' or $anim-dir == 'default' or
    $anim-dir == 'def' or $anim-dir == 'normal' or $anim-dir == 'nor'
  ) {
    $anim-dir: null;
  } @else if (
    $anim-dir == 'reverse' or $anim-dir == 'rev' or $anim-dir == 'r'
  ) {
    $anim-drection: reverse;
  } @else if (
    $anim-dir == 'alternate' or $anim-dir == 'alt' or $anim-dir == 'a'
  ) {
    $anim-dir: alternate;
  } @else if (
    $anim-dir == 'alternate-reverse' or $anim-dir == 'alternatereverse' or
    $anim-dir == 'alt-rev' or $anim-dir == 'altrev' or $anim-dir == 'a-r' or
    $anim-dir == 'ar'
  ) {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of `#{inspect($anim-dir)}` for the ' +
        '`text-flicker` mixin';
  }

  @if (
    not $timing-func or $timing-func == true or $timing-func == 'none' or
    $timing-func == 'no' or $timing-func == 'n' or $timing-func == 'def' or
    $timing-func == 'default' or $timing-func == 'd' or $timing-func == 0
  ) {
    // Take all potential values the user might pass to keep the default setting
    // and ensure that the timing function remains at that default
    $timing-func: linear;
  }

  @if not $anim-num {
    $anim-num: null;
  }
  animation: txt-flicker#{$anim-num} #{$timing} #{$timing-func}
              #{$delay} #{$iterations} #{$anim-dir} both;

  @at-root {
    @keyframes txt-flicker#{$anim-num} {
      @if ($in-or-out) {
        0% {
          opacity: 0;
        }

        10%,
        10.2%,
        20%,
        20.6%,
        30%,
        30.6%,
        45%,
        55.1%,
        57%,
        60.1%,
        65%,
        75.1%,
        77%,
        85.1%,
        86% {
          opacity: 0;
          text-shadow: none;
        }

        10.1% {
          opacity: 1;
          text-shadow: none;
        }

        20.1% {
          opacity: 1;
          text-shadow: 0 0 30px rgba(255, 255, 255, .25);
        }

        30.1%,
        30.5%,
        45.1%,
        50%,
        55% {
          opacity: 1;
          text-shadow: 0 0 30px rgba(255, 255, 255, .45),
                       0 0 60px rgba(255, 255, 255, .25);
        }

        57.1%,
        60% {
          opacity: 1;
          text-shadow: 0 0 30px rgba(255, 255, 255, .55),
                       0 0 60px rgba(255, 255, 255, .35);
        }

        65.1%,
        75% {
          opacity: 1;
          text-shadow: 0 0 30px rgba(255, 255, 255, .55),
                       0 0 60px rgba(255, 255, 255, .35),
                       0 0 100px rgba(255, 255, 255, .1);
        }

        77.1%,
        85% {
          opacity: 1;
          text-shadow: 0 0 30px rgba(255, 255, 255, .55),
                       0 0 60px rgba(255, 255, 255, .4),
                       0 0 110px rgba(255, 255, 255, .2),
                       0 0 100px rgba(255, 255, 255, .1);
        }

        86.1%,
        100% {
          opacity: 1;
          text-shadow: 0 0 30px rgba(255, 255, 255, .6),
                       0 0 60px rgba(255, 255, 255, .45),
                       0 0 110px rgba(255, 255, 255, .25),
                       0 0 100px rgba(255, 255, 255, .1);
        }
      } @else {
        0%,
        13.9% {
          opacity: 1;
          text-shadow: 0 0 30px rgba(255, 255, 255, .6),
                       0 0 60px rgba(255, 255, 255, .45),
                       0 0 110px rgba(255, 255, 255, .25),
                       0 0 100px rgba(255, 255, 255, .1);
        }

        14%,
        14.9%,
        23%,
        24.9%,
        35%,
        39.9%,
        43%,
        44.9%,
        55%,
        69.4%,
        70%,
        79.4%,
        80%,
        89.8%,
        90% {
          opacity: 0;
          text-shadow: none;
        }

        15%,
        22.9% {
          opacity: 1;
          text-shadow: 0 0 30px rgba(255, 255, 255, .55),
                       0 0 60px rgba(255, 255, 255, .4),
                       0 0 110px rgba(255, 255, 255, .2),
                       0 0 100px rgba(255, 255, 255, .1);
        }

        25%,
        34.9% {
          opacity: 1;
          text-shadow: 0 0 30px rgba(255, 255, 255, .55),
                       0 0 60px rgba(255, 255, 255, .35),
                       0 0 100px rgba(255, 255, 255, .1);
        }

        40%,
        42.9% {
          opacity: 1;
          text-shadow: 0 0 30px rgba(255, 255, 255, .55),
                       0 0 60px rgba(255, 255, 255, .35);
        }

        45%,
        50%,
        54.9%,
        69.5%,
        69.9% {
          opacity: 1;
          text-shadow: 0 0 30px rgba(255, 255, 255, .45),
                       0 0 60px rgba(255, 255, 255, .25);
        }

        79.9% {
          opacity: 1;
          text-shadow: 0 0 30px rgba(255, 255, 255, .25);
        }

        89.9% {
          opacity: 1;
          text-shadow: none;
        }

        100% {
          opacity: 0;
        }
      }
    }
  }
}


/// Animates text from a blurred to a focused state
///
/// @param {String} $style [in] - The style of the focus-in effect. Can be
/// `in` (or `i`, null, `none`, `no`, `n` `default`, or `def`), `expand`
/// (or `exp`, or 'e'), `forward` (or `fwd` or `f`), `contract` (or `cont` or
/// `c`), or `backward` (or `back`, `bck`, or `b`).
/// @param {Time} $timing [.9s] - The duration of the animation (s or ms).
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {Number|String} $iterations [null] - The number of iterations
/// for the animation to complete. If the value passed is not a number, it will
/// be set to infinite.
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction
/// property. Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`.
/// Default of null assumes the default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for the
/// animation. If no specific function is passed, the mixin will choose the
/// best custom timing function for the given style.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $style value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $anim-dir value
@mixin text-focus-in(
  $style: in,
  $timing: 0.9s,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: null,
  $anim-num: null
) {
  @if (not $timing-func) {
    @if (not $style or $style == 'in' or $style == 'i' or $style == 'default'
        or $style == 'def' or $style == 'no' or $style == 'none') {
      $timing-func: cubic-bezier(.55, .085, .68, .53);
    } @else {
      $timing-func: cubic-bezier(.25, .46, .45, .94);
    }
  }

  @if type-of($timing) != 'number' {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `text-focus-in` ' +
        'mixin. The timing property must be a number.';
  } @else if unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not index('s' 'ms', unit($timing)) {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `text-focus-in` ' +
        'mixin. The timing property must be in either s or ms units.';
  } @else if ($timing % 10 == 0ms) {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;
    // Get rid of possible leading zero in front of decimal place
    @if (str-slice($timing + '', 1, 2) == '0.') {
      $timing: unquote(str-slice($timing + '', 2));
    }
  }

  @if (
    $delay == 0 or $delay == 0s or $delay == 0ms or
    $delay == 'none' or $delay == 'no' or $delay == 'n' or
    $delay == 'n/a' or $delay == nil or not $delay
  ) {
    $delay: null;
  }
  @if $delay {
    @if type-of($delay) != 'number' {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `text-focus-in` ' +
          'mixin. The delay property must be a number.';
    } @else if (unitless($delay)) {
      $delay: $delay * 1s;
    } @else if not index('s' 'ms', unit($delay)) {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `text-focus-in` ' +
          'mixin. The delay property must be in either s or ms units.';
    } @else if ($delay % 10 == 0ms) {
      $delay: math.div($delay, 1000ms) * 1s;
      @if (str-slice($delay + '', 1, 2) == '0.') {
        $delay: #{str-slice($delay + '', 2)};
      }
    }
  } @else {
    $delay: null;
  }

  @if ($iterations) {
    @if (
      $iterations == 'infinite' or $iterations == 'inf' or $iterations == 'i'
    ) {
      $iterations: infinite;
    } @else if (
      (unitless($iterations) and type-of($iterations) == 'number') or
      $iterations == initial or $iterations == inherit
    ) {
      $iterations: $iterations;
    } @else {
      @error 'Invalid iteration-count value of `#{inspect($iterations)}` for the ' +
          '`text-focus-in` mixin.';
    }
  }

  @if (
    not $anim-dir or $anim-dir == 'none' or $anim-dir == 'no' or
    $anim-dir == 'n/a' or $anim-dir == 'n' or $anim-dir == 'default' or
    $anim-dir == 'def' or $anim-dir == 'normal' or $anim-dir == 'nor'
  ) {
    $anim-dir: null;
  } @else if (
    $anim-dir == 'reverse' or $anim-dir == 'rev' or $anim-dir == 'r'
  ) {
    $anim-drection: reverse;
  } @else if (
    $anim-dir == 'alternate' or $anim-dir == 'alt' or $anim-dir == 'a'
  ) {
    $anim-dir: alternate;
  } @else if (
    $anim-dir == 'alternate-reverse' or $anim-dir == 'alternatereverse' or
    $anim-dir == 'alt-rev' or $anim-dir == 'altrev' or $anim-dir == 'a-r' or
    $anim-dir == 'ar'
  ) {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of `#{inspect($anim-dir)}` for the ' +
        '`text-focus-in` mixin';
  }

  @if not $anim-num {
    $anim-num: null;
  }
  animation: txt-focus-in#{$anim-num} #{$timing} #{$timing-func}
              #{$delay} #{$iterations} #{$anim-dir} both;
  @if ($style == 'forward' or $style == 'fwd' or $style == 'f'
      or $style == 'backward' or $style == 'bck' or $style == 'back'
      or $style == 'b') {
    transform: translate3d(0, 0, 0);
    transform-style: preserve-3d;
  }

  @at-root {
    @keyframes txt-focus-in#{$anim-num} {
      0% {
        filter: blur(12px);
        opacity: 0;
        @if ($style == 'expand' or $style == 'exp' or $style == 'e') {
          letter-spacing: -.5em;
        } @else if ($style == 'forward' or $style == 'fwd' or $style == 'f') {
          letter-spacing: -.5em;
          transform: translateZ(-800px);
        } @else if ($style == 'contract' or $style == 'cont' or $style == 'c') {
          letter-spacing: 1em;
        } @else if ($style == 'backward' or $style == 'bck' or $style == 'back'
            or $style == 'b') {
          letter-spacing: 1em;
          transform: translateZ(300px);
        } @else if ($style and $style != 'none'
            and $style != 'no' and $style != 'n'
            and $style != 'default'
            and $style != 'def'
            and $style != 'in' and $style != 'i') {
          @error 'Invalid style of `#{inspect($style)}` for the `text-focus-in` mixin';
        }
      }

      100% {
        filter: blur(0);
        opacity: 1;
        @if ($style == 'forward' or $style == 'fwd'
            or $style == 'f') {
          transform: translateZ(0);
        } @else if ($style == 'backward'
            or $style == 'bck' or $style == 'back'
            or $style == 'b') {
          transform: translateZ(12px);
        }
      }
    }
  }
}


/// Animates text by making it appear to be glitching out.
///
/// @param {Time} $timing [.5s] - The duration of the animation (s or ms).
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {Number|String} $iterations [null] - The number of iterations
/// for the animation to complete. If the value passed is not a number, it will
/// be set to infinite.
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// null assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for the
/// animation. A null timing function will cause the CSS default timing-function
/// of `ease`.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $anim-dir value
@mixin text-glitch(
  $timing: .5s,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: null,
  $anim-num: null
) {
  $red: rgb(192, 20, 124);
  $blue: rgb(0, 170, 255);
  $yellow: rgb(255, 238, 0);
  $green: rgb(0, 255, 128);
  $colors: $red $blue $yellow $green;

  @if type-of($timing) != 'number' {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `text-glitch` ' +
        'mixin. The timing property must be a number.';
  } @else if unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not index('s' 'ms', unit($timing)) {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `text-glitch` ' +
        'mixin. The timing property must be in either s or ms units.';
  } @else if (unit($timing) == 'ms' and $timing % 10 == 0ms) {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;
    // Get rid of possible leading zero in front of decimal place
    @if (str-slice($timing + '', 1, 2) == '0.') {
      $timing: unquote(str-slice($timing + '', 2));
    }
  }

  @if (
    $delay == 0 or $delay == 0s or $delay == 0ms or
    $delay == 'none' or $delay == 'no' or $delay == 'n' or
    $delay == 'n/a' or $delay == nil or not $delay
  ) {
    $delay: null;
  }
  @if $delay {
    @if (type-of($delay) != 'number') {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `text-glitch` ' +
          'mixin. The delay property must be a number.';
    } @else if (unitless($delay)) {
      $delay: $delay * 1s;
    } @else if not index('s' 'ms', unit($delay)) {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `text-glitch` ' +
          'mixin. The delay property must be in either s or ms units.';
    } @else if (unit($delay) == 'ms' and $delay % 10 == 0ms) {
      $delay: math.div($delay, 1000ms) * 1s;
      @if (str-slice($delay + '', 1, 2) == '0.') {
        $delay: #{str-slice($delay + '', 2)};
      }
    }
  } @else {
    $delay: null;
  }

  @if ($iterations) {
    @if (
      $iterations == 'infinite' or $iterations == 'inf' or $iterations == 'i'
    ) {
      $iterations: infinite;
    } @else if (
      (unitless($iterations) and type-of($iterations) == 'number') or
      $iterations == initial or $iterations == inherit
    ) {
      $iterations: $iterations;
    } @else {
      @error 'Invalid iteration-count value of `#{inspect($iterations)}` for the ' +
          '`text-glitch` mixin.';
    }
  } @else {
    $iterations: null;
  }

  @if (
    not $anim-dir or $anim-dir == 'none' or $anim-dir == 'no' or
    $anim-dir == 'n/a' or $anim-dir == 'n' or $anim-dir == 'default' or
    $anim-dir == 'def' or $anim-dir == 'normal' or $anim-dir == 'nor'
  ) {
    $anim-dir: null;
  } @else if (
    $anim-dir == 'reverse' or $anim-dir == 'rev' or $anim-dir == 'r'
  ) {
    $anim-drection: reverse;
  } @else if (
    $anim-dir == 'alternate' or $anim-dir == 'alt' or $anim-dir == 'a'
  ) {
    $anim-dir: alternate;
  } @else if (
    $anim-dir == 'alternate-reverse' or $anim-dir == 'alternatereverse' or
    $anim-dir == 'alt-rev' or $anim-dir == 'altrev' or $anim-dir == 'a-r' or
    $anim-dir == 'ar'
  ) {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of `#{inspect($anim-dir)}` for the ' +
        '`text-glitch` mixin';
  }

  @if (
    not $timing-func or $timing-func == true or $timing-func == 'none' or
    $timing-func == 'no' or $timing-func == 'n' or $timing-func == 'def' or
    $timing-func == 'default' or $timing-func == 'd' or $timing-func == 0
  ) {
    // Take all potential values the user might pass to keep the default setting
    // and ensure that the timing function remains at that default
    $timing-func: null;
  }

  @if not $anim-num {
    $anim-num: null;
  }

  animation: txt-glitch#{$anim-num} #{$timing} #{$timing-func}
              #{$delay} #{$iterations} #{$anim-dir} both;

  @at-root {
    @keyframes txt-glitch {

      @for $i from 0 through 100 {
        $percent: 0% + $i;

        #{$percent} {
          $color: list.nth($colors, math.random(list.length($colors)));
          text-shadow: math.random(70px) - 35px 0px 0px $color;
          left: math.random(12px) - 6px;
        }
      }
    }
  }
}


/// Adds a colored text outline to a font.
///
/// @param {Color} $color [#0a0a0a] - The outline color for the font.
///
/// @group Utilities
@mixin text-outline($color: #0a0a0a) {
  text-shadow: -1px -1px 0 #{$color}, 1px -1px 0 #{$color},
               -1px 1px 0 #{$color}, 1px 1px 0 #{$color};
}


/// Adds a colored shadowy blur behind text to make it easier to see on an image
///
/// @param {Color} $color - The color for the shadow
///
/// @group Utilities
@mixin text-bg-blur($color) {
  text-shadow:
      0 0 5px $color,
      0 0 10px $color,
      0 0 20px $color;
}


/// Animates text by popping forward out from a shadow.
///
/// @param {String} $direction [top] - The direction the shadow will be
/// facing. Recommended to use this mixin with the animation-stage mixin or just
/// the perspective property on the parent element.
/// @param {Time} $timing [.6s] - The duration of the animation (s or ms).
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {Number|String} $iterations [null] - The number of iterations
/// for the animation to complete. If the value passed is not a number, it will
/// be set to infinite.
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// null assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for the
/// animation. Default value of null will be the default CSS timing-function
/// propertiy's value of ease.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $direction value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $anim-dir value
@mixin text-pop-shadow(
  $direction: 'top',
  $timing: .6s,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: null,
  $anim-num: null
) {
  //  Default value for the 'top' direction
  $trans-val1: translateY(0);
  $shadow-val: 0 -1px #555, 0 -2px #555, 0 -3px #555, 0 -4px #555,
               0 -5px #555, 0 -6px #555, 0 -7px #555, 0 -8px #555;
  $trans-val2: translateY(8px);
  @if (to-lower-case($direction) == 'top-right'
      or to-lower-case($direction) == 'topright'
      or to-lower-case($direction) == 'right-top'
      or to-lower-case($direction) == 'righttop'
      or to-lower-case($direction) == 't-r'
      or to-lower-case($direction) == 'tr'
      or to-lower-case($direction) == 'r-t'
      or to-lower-case($direction) == 'rt') {
    $trans-val1: translateX(0) translateY(0);
    $trans-val2: translateX(-8px) translateY(8px);
    $shadow-val: 1px -1px #555, 2px -2px #555, 3px -3px #555, 4px -4px #555,
                 5px -5px #555, 6px -6px #555, 7px -7px #555, 8px -8px #555;
  } @else if (
    to-lower-case($direction) == 'right' or to-lower-case($direction) == 'r'
  ) {
    $trans-val1: translateX(0);
    $trans-val2: translateX(-8px);
    $shadow-val: 1px 0 #555, 2px 0 #555, 3px 0 #555, 4px 0 #555,
                 5px 0 #555, 6px 0 #555, 7px 0 #555, 8px 0 #555;
  } @else if (to-lower-case($direction) == 'bottom-right'
      or to-lower-case($direction) == 'bottomright'
      or to-lower-case($direction) == 'right-bottom'
      or to-lower-case($direction) == 'rightbottom'
      or to-lower-case($direction) == 'b-r'
      or to-lower-case($direction) == 'br'
      or to-lower-case($direction) == 'r-b'
      or to-lower-case($direction) == 'r-b') {
    $trans-val1: translateX(0) translateY(0);
    $trans-val2: translateX(-8px) translateY(-8px);
    $shadow-val: 1px 1px #555, 2px 2px #555, 3px 3px #555, 4px 4px #555,
                 5px 5px #555, 6px 6px #555, 7px 7px #555, 8px 8px #555;
  } @else if (to-lower-case($direction) == 'bottom'
      or to-lower-case($direction) == 'btm'
      or to-lower-case($direction) == 'b') {
    $trans-val2: translateY(-8px);
    $shadow-val: 0 1px #555, 0 2px #555, 0 3px #555, 0 4px #555,
                 0 5px #555, 0 6px #555, 0 7px #555, 0 8px #555;
  } @else if (to-lower-case($direction) == 'bottom-left'
      or to-lower-case($direction) == 'bottomleft'
      or to-lower-case($direction) == 'left-bottom'
      or to-lower-case($direction) == 'leftbottom'
      or to-lower-case($direction) == 'b-l'
      or to-lower-case($direction) == 'bl'
      or to-lower-case($direction) == 'l-b'
      or to-lower-case($direction) == 'lb') {
    $trans-val1: translateX(0) translateY(0);
    $trans-val2: translateX(8px) translateY(-8px);
    $shadow-val: -1px 1px #555, -2px 2px #555, -3px 3px #555, -4px 4px #555,
                 -5px 5px #555, -6px 6px #555, -7px 7px #555, -8px 8px #555;
  } @else if (to-lower-case($direction) == 'left'
  or to-lower-case($direction) == 'l') {
    $trans-val1: translateX(0);
    $trans-val2: translateX(8px);
    $shadow-val: -1px 0 #555, -2px 0 #555, -3px 0 #555, -4px 0 #555,
                 -5px 0 #555, -6px 0 #555, -7px 0 #555, -8px 0 #555;
  } @else if (to-lower-case($direction) == 'top-left'
      or to-lower-case($direction) == 'topleft'
      or to-lower-case($direction) == 'left-top'
      or to-lower-case($direction) == 'lefttop'
      or to-lower-case($direction) == 't-l'
      or to-lower-case($direction) == 'tl'
      or to-lower-case($direction) == 'l-t'
      or to-lower-case($direction) == 'lt') {
    $trans-val1: translateX(0) translateY(0);
    $trans-val2: translateX(8px) translateY(8px);
    $shadow-val: -1px -1px #555, -2px -2px #555, -3px -3px #555,
                 -4px -4px #555, -5px -5px #555, -6px -6px #555,
                 -7px -7px #555, -8px -8px #555;
  } @else if (to-lower-case($direction) != 'top'
      and to-lower-case($direction) != 't') {
    @error 'Invalid direction value of `#{inspect($direction)}` for the ' +
        '`text-pop-shadow` mixin.';
  }

  @if type-of($timing) != 'number' {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `text-pop-shadow` ' +
        'mixin. The timing property must be a number.';
  } @else if unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not index('s' 'ms', unit($timing)) {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `text-pop-shadow` ' +
        'mixin. The timing property must be in either s or ms units.';
  } @else if ($timing % 10 == 0ms) {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;
    // Get rid of possible leading zero in front of decimal place
    @if (str-slice($timing + '', 1, 2) == '0.') {
      $timing: unquote(str-slice($timing + '', 2));
    }
  }

  @if ($delay == 0 or $delay == 0s or $delay == 0ms or $delay == 'none'
      or $delay 'no' or $delay == 'n' or $delay == 'n/a' or $delay == nil) {
    $delay: null;
  }
  @if $delay {
    @if (type-of($delay) != 'number') {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `text-pop-shadow` ' +
          'mixin. The delay property must be a number.';
    } @else if (unitless($delay)) {
      // If no there is no unit for $delay, assume seconds
      $delay: $delay * 1s;
    } @else if not index('s' 'ms', unit($delay)) {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `text-pop-shadow` ' +
          'mixin. The delay property must be in either s or ms units.';
    } @else if ($delay % 10 == 0ms) {
      $delay: math.div($delay, 1000ms) * 1s;
      @if (str-slice($delay + '', 1, 2) == '0.') {
        $delay: #{str-slice($delay + '', 2)};
      }
    }
  } @else {
    $delay: null;
  }

  @if ($iterations) {
    @if (
      $iterations == 'infinite' or $iterations == 'inf' or $iterations == 'i'
    ) {
      $iterations: infinite;
    } @else if (
      (unitless($iterations) and type-of($iterations) == 'number') or
      $iterations == initial or $iterations == inherit
    ) {
      $iterations: $iterations;
    } @else {
      @error 'Invalid iteration-count value of `#{inspect($iterations)}` for the ' +
          '`text-pop-shadow` mixin.';
    }
  } @else {
    $iterations: null;
  }

  @if (
    not $anim-dir or $anim-dir == 'none' or $anim-dir == 'no' or
    $anim-dir == 'n/a' or $anim-dir == 'n' or $anim-dir == 'default' or
    $anim-dir == 'def' or $anim-dir == 'normal' or $anim-dir == 'nor'
  ) {
    $anim-dir: null;
  } @else if (
    $anim-dir == 'reverse' or $anim-dir == 'rev' or $anim-dir == 'r'
  ) {
    $anim-drection: reverse;
  } @else if (
    $anim-dir == 'alternate' or $anim-dir == 'alt' or $anim-dir == 'a'
  ) {
    $anim-dir: alternate;
  } @else if (
    $anim-dir == 'alternate-reverse' or $anim-dir == 'alternatereverse' or
    $anim-dir == 'alt-rev' or $anim-dir == 'altrev' or $anim-dir == 'a-r' or
    $anim-dir == 'ar'
  ) {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of `#{inspect($anim-dir)}` for the ' +
        '`text-pop-shadow` mixin';
  }

  @if (not $timing-func or $timing-func == true or $timing-func == 'none'
      or $timing-func == 'no' or $timing-func == 'n' or $timing-func == 'def'
      or $timing-func == 'default' or $timing-func == 'd') {
    // Take all potential values the user might pass to keep the default setting
    // and ensure that the timing function remains at that default
    $timing-func: null;
  }

  @if not $anim-num {
    $anim-num: null;
  }
  animation: txt-shadow-pop#{$anim-num} #{$timing} #{$timing-func}
              #{$delay} #{$iterations} #{$anim-dir} both;

  @at-root {
    @keyframes txt-shadow-pop#{$anim-num} {
      0% {
        text-shadow: 0 0 #555, 0 0 #555, 0 0 #555, 0 0 #555,
                     0 0 #555, 0 0 #555, 0 0 #555, 0 0 #555;
        transform: #{$trans-val1};
      }

      100% {
        text-shadow: #{$shadow-val};
        transform: #{$trans-val2};
      }
    }
  }
}


/// Adds a text pop-up animation to a given element.
///
/// @param {String} $direction [top] - The direction the animation will appear
/// to be going in.
/// @param {Time} $timing [.5s] The duration of the animation (s or ms).
/// @param {Length-Percentage} $size [15rem] - The size of the element. If
/// the $height property is not set explicitly, it is both height and width, if
/// $height is set explicitly, then this value sets only the width.
/// @param {Time} $delay [null] - The duration of the optional delay of the
/// animation (s or ms).
/// @param {Timing-Function} $timing-func [cubic-bezier(.25, .46, .45, .94)] -
/// The timing function for the animation.
/// @param {*} $infinite [null] If any value other than null, or false is
/// passed, the `infinite alternate` values will be applied to the animation.
/// @param {Length-Percentage} $height [$size] - The height of the element.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $direction value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $iterations value
/// @throw Invalid $anim-dir value
@mixin text-pop-up(
  $direction: top,
  $timing: .5s,
  $size: 15rem,
  $delay: null,
  $timing-func: cubic-bezier(.25, .46, .45, .94),
  $infinite: null,
  $height: $size,
  $anim-num: null
) {
  $dir-val: translateY(-50px);

  @if $infinite {
    $infinite: infinite alternate
  }

  @if ($direction == 'bottom' or $direction == 'b' or $direction == 'down') {
    $dir-val: translateY(50px);
  } @else if ($direction == 'left' or $direction == 'l' or
      $direction == 'left-side') {
    $dir-val: translateX(-50px);
  } @else if ($direction == 'right' or $direction == 'r' or
      $direction == 'right-side') {
    $dir-val: translateX(50px);
  } @else if ($direction == 'top-right' or $direction == 'tr') {
    $dir-val: translateY(-50px) translateX(50px);
  } @else if ($direction == 'top-left' or $direction == 'tl') {
    $dir-val: translateY(-50px) translateX(-50px);
  } @else if ($direction == 'bottom-right' or $direction == 'br') {
    $dir-val: translateY(50px) translateX(50px);
  } @else if ($direction == 'bottom-left' or $direction == 'bl') {
    $dir-val: translateY(50px) translateX(-50px);
  } @else if ($direction != 'top' and $direction != 't' and $direction != 'up') {
    @error '`#{inspect($direction)}` is not a valid direction for the ' +
        'text-pop-up mixin.';
  }

  @if type-of($timing) != 'number' {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `text-pop-up` ' +
        'mixin. The timing property must be a number.';
  } @else if unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not index('s' 'ms', unit($timing)) {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `text-pop-up` ' +
        'mixin. The timing property must be in either s or ms units.';
  } @else if ($timing % 10 == 0ms) {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;
    // Get rid of possible leading zero in front of decimal place
    @if (str-slice($timing + '', 1, 2) == '0.') {
      $timing: unquote(str-slice($timing + '', 2));
    }
  }

  @if (
    $delay == 0 or $delay == 0s or $delay == 0ms or
    $delay == 'none' or $delay == 'no' or $delay == 'n' or
    $delay == 'n/a' or $delay == nil or not $delay
  ) {
    $delay: null;
  }
  @if $delay {
    @if (type-of($delay) != 'number') {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `text-pop-up` ' +
          'mixin. The delay property must be a number.';
    } @else if (unitless($delay)) {
      // If no there is no unit for $delay, assume seconds
      $delay: $delay * 1s;
    } @else if not index('s' 'ms', unit($delay)) {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `text-pop-up` ' +
          'mixin. The delay property must be in either s or ms units.';
    } @else if ($delay % 10 == 0ms) {
      $delay: math.div($delay, 1000ms) * 1s;
      @if (str-slice($delay + '', 1, 2) == '0.') {
        $delay: #{str-slice($delay + '', 2)};
      }
    }
  } @else {
    $delay: null;
  }


  @if not $anim-num {
    $anim-num: null;
  }
  animation: txt-pop-up#{$anim-num} #{$timing} #{$timing-func}
              #{$delay} #{$infinite} both;
  height: $height;
  text-transform: none;
  width: $size;

  @at-root {
    @keyframes txt-pop-up#{$anim-num} {
      0% {
        transform: translateY(0);
        transform-origin: 50% 50%;
        text-shadow: none;
      }

      100% {
        transform: #{$dir-val};
        transform-origin: 50% 50%;
        text-shadow:  0 1px 0 #ccc, 0 2px 0 #ccc, 0 3px 0 #ccc, 0 4px 0 #ccc,
                      0 5px 0 #ccc, 0 6px 0 #ccc, 0 7px 0 #ccc, 0 8px 0 #ccc,
                      0 9px 0 #ccc, 0 50px 30px rgba(0, 0, 0, .3);
      }
    }
  }
}


/// Apply a text shadow effect.
///
/// @param {Length} $x [2px] - The x-axis offset of the shadow.
/// @param {Length} $y [2px] - The x-axis offset of the shadow.
/// @param {Length} $blur [5px] - The blur range of the shadow.
/// @param {Color} $color [rgba(0, 0, 0, .4)] - The color of the shadow.
///
/// @group Utilities
@mixin text-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0, 0, 0, .4)) {
  $x: if((unitless($x)), $x*1px, $x);
  $y: if((unitless($y)), $y*1px, $y);
  $blur: if((unitless($blur)), $blur*1px, $blur);
  @if (not $blur or $blur == 0px or $blur == 0 or $blur == 'none'
        or $blur == 'no' or $blur == 'n' $blur == 'n/a') {
    text-shadow: $x $y $color;
  } @else {
    text-shadow: $x $y $blur $color;
  }
}

/// Animates text by tracking it into view
///
/// @param {String|Boolean} $expand-contract [expand] - Determines whether the
/// text will expand or contract as it animates.
/// @param {Boolean|String} $direction [false] - If true, will track in from a
/// direction, appearing to come from a forward direction on an expand animation
/// and appearing to come from the back, behind the point of view, on a contract
/// animation. If false (or null, `f`, `none`, `n/a`, `no`, `n`) the animation
/// will remain in one place.
/// @param {String} $origin [null] - The orientation the animation appears to
/// be coming from. Can be `top` (or `t`), `bottom` (or `btm`, `b`), or null
/// (or false, `default`, `def`, `no`, `n/a`, `none`, `n`)
/// @param {Time} $timing [.9s] - The duration of the animation (s or ms).
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {Number|String} $iterations [null] - The number of iterations
/// for the animation to complete. If the value passed is not a number, it will
/// be set to infinite.
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction
/// property. Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`.
/// Default of null assumes the default of `normal`.
/// @param {Timing-Function} $timing-func [cubic-bezier(.215, .61, .355, 1)] -
/// The timing function for the animation. Using the default is recommended
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $expand-contract value
/// @throw Invalid $direction value
/// @throw Invalid $origin value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $anim-dir value
@mixin text-tracking-in(
  $expand-contract: 'expand',
  $direction: null,
  $origin: null,
  $timing: .9s,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: cubic-bezier(.215, .61, .355, 1),
  $anim-num: null
) {
  @if (
    $expand-contract == 'expand' or $expand-contract == true or
    $expand-contract == 'exp' or $expand-contract == 'e'
  ) {
    $expand-contract: true;
  } @else if (not $expand-contract or $expand-contract == 'c'
      or str-slice($expand-contract + '', 1, 3) == 'con') {
    $expand-contract: false;
  }

  @if ($direction == true or $direction == 't') {
    $direction: true;
  } @else if (
    not $direction or $direction =='f' or $direction == 'none' or
    $direction == 'n' or $direction == 'n/a' or $direction == 'no'
  ) {
    $direction: false;
  } @else {
    @error 'Invalid $direction value of [#{inspect($direction)}] for the ' +
        '`text-tracking-in` mixin.';
  }

  @if ($origin == 'top' or $origin == 't') {
    $origin: 'top';
  } @else if ($origin == 'bottom' or $origin == 'btm' or $origin == 'b') {
    $origin: 'bottom';
  } @else if (
    not $origin or $origin == 'default' or $origin == 'def' or
    $origin == 'd' or $origin == 'no' or $origin == 'none' or
    $origin == 'n/a' or $origin == 'n'
  ) {
   $origin: null;
  } @else {
    @error 'Invalid origin value of `#{inspect($origin)}` for the ' +
        '`text-tracking-in` mixin';
  }

  @if type-of($timing) != 'number' {
    @error 'Invalid timing value of [#{inspect($timing)}] for the `text-tracking-in` ' +
        'mixin. The timing property must be a number.';
  } @else if unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not index('s' 'ms', unit($timing)) {
    @error 'Invalid timing value of [#{inspect($timing)}] for the `text-tracking-in` ' +
        'mixin. The timing property must be in either s or ms units.';
  } @else if ($timing % 10 == 0ms) {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;

    // Get rid of possible leading zero in front of decimal place
    @if (str-slice($timing + '', 1, 2) == '0.') {
      $timing: unquote(str-slice($timing + '', 2));
    }
  }

  @if (
    $delay == 0 or $delay == 0s or $delay == 0ms or
    $delay == 'none' or $delay == 'no' or $delay == 'n' or
    $delay == 'n/a' or $delay == nil or not $delay
  ) {
    $delay: null;
  }
  @if $delay {
    @if type-of($delay) != 'number' {
      @error 'Invalid delay value of [#{inspect($delay)}] for the `text-tracking-in` ' +
          'mixin. The delay property must be a number.';
    } @else if unitless($delay) {
      $delay: $delay * 1s;
    } @else if not index('s' 'ms', unit($delay)) {
      @error 'Invalid delay value of [#{inspect($delay)}] for the `text-tracking-in` ' +
          'mixin. The delay property must be in either s or ms units.';
    } @else if $delay % 10 == 0ms {
      $delay: math.div($delay, 1000ms) * 1s;
      @if str-slice($delay + '', 1, 2) == '0.' {
        $delay: #{str-slice($delay + '', 2)};
      }
    }
  }

  @if $iterations {
    @if (
      $iterations == 'infinite' or $iterations == 'inf' or $iterations == 'i'
    ) {
      $iterations: infinite;
    } @else if (
      (unitless($iterations) and type-of($iterations) == 'number') or
      $iterations == initial or $iterations == inherit
    ) {
      $iterations: $iterations;
    } @else {
      @error 'Invalid iteration-count value of [#{inspect($iterations)}] for the ' +
          '`text-tracking-in` mixin.';
    }
  } @else {
    $iterations: null;
  }

  @if (
    not $anim-dir or $anim-dir == 'none' or $anim-dir == 'no' or
    $anim-dir == 'n/a' or $anim-dir == 'n' or $anim-dir == 'default' or
    $anim-dir == 'def' or $anim-dir == 'normal' or $anim-dir == 'nor'
  ) {
    $anim-dir: null;
  } @else if (
    $anim-dir == 'reverse' or $anim-dir == 'rev' or $anim-dir == 'r'
  ) {
    $anim-drection: reverse;
  } @else if (
    $anim-dir == 'alternate' or $anim-dir == 'alt' or $anim-dir == 'a'
  ) {
    $anim-dir: alternate;
  } @else if (
    $anim-dir == 'alternate-reverse' or $anim-dir == 'alternatereverse' or
    $anim-dir == 'alt-rev' or $anim-dir == 'altrev' or $anim-dir == 'a-r' or
    $anim-dir == 'ar'
  ) {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of [#{inspect($anim-dir)}] ' +
        'for the `text-tracking-in` mixin';
  }

  @if (
    not $timing-func or $timing-func == 'none' or $timing-func == 'no' or
    $timing-func == 'n' or $timing-func == true or $timing-func == 'def' or
    $timing-func == 'default' or $timing-func == 'd' or $timing-func == 0
  ) {
    // Take all potential values the user might pass to keep the default setting
    // and ensure that the timing function remains at that default
    $timing-func: cubic-bezier(.215, .61, .355, 1);
  }

  @if not $anim-num {
    $anim-num: null;
  } @else {
    $anim-num: #{-$anim-num};
  }

  animation: txt-track-in#{$anim-num} #{$timing} #{$timing-func}
              #{$delay} #{$iterations} #{$anim-dir} both;
  @if $direction {
    transform: translate3d(0, 0, 0);
    transform-style: preserve-3d;
  }

  @at-root {
    @keyframes txt-track-in#{$anim-num} {
      0% {
        @if $expand-contract {
          letter-spacing: -.5em;
          @if $direction {
            @if not $origin {
              transform: translateZ(-700px);
            } @else if $origin == 'top' {
              transform: translateZ(-700px) translateY(-500px);
            } @else {
              transform: translateZ(-700px) translateY(500px);
            }
          }
        } @else {
          letter-spacing: 1em;
          @if $direction {
            @if not $origin {
              transform: translateZ(400px);
            } @else if $origin == 'top' {
              transform: translateZ(400px) translateY(-300px);
            } @else {
              transform: translateZ(400px) translateY(300px);
            }
          }
        }
        opacity: 0;
      }

      40% {
        opacity: .6;
      }

      100% {
        @if $expand-contract {
          @if $direction {
            @if not $origin {
              transform: translateZ(0);
            } @else {
              transform: translateZ(0) translateY(0);
            }
          }
        } @else {
          letter-spacing: normal;
          @if $direction {
            @if not $origin {
              transform: translateZ(0);
            } @else {
              transform: translateZ(0) translateY(0);
            }
          }
        }
        opacity: 1;
      }
    }
  }
}


/// Animates text by tracking it out of view
///
/// @param {String|Boolean} $expand-contract [contract] - Determines whether
///  the text will expand or contract as it animates.
/// @param {Boolean|String} $direction [false] - If true, will track in from a
/// direction, appearing to come from a forward direction on an expand animation
/// and appearing to come from the back, behind the point of view, on a contract
/// animation. If false (or null, `f`, `none`, `n/a`, `no`, `n`) the animation
/// will remain in one place.
/// @param {String} $origin [null] - The orientation the animation appears to
/// be extracting from or contracting towards. Can be `top` (or `t`), `bottom`
/// (or `btm`, `b`), or null (or false, `default`, `def`, `no`, `n/a`,
/// `none`, `n`).
/// @param {Time} $timing [.9s] - The duration of the animation (s or ms).
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {Number|String} $iterations [null] - The number of iterations
/// for the animation to complete. If the value passed is not a number, it will
/// be set to infinite.
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction
/// property. Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`.
/// Default of null assumes the default of `normal`.
/// @param {Timing-Function} $timing-func [cubic-bezier(.55, .085, .68, .53)] -
/// The timing function for the animation. Using the default is recommended.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $expand-contract value
/// @throw Invalid $direction value
/// @throw Invalid $origin value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $anim-dir value
@mixin text-tracking-out(
  $expand-contract: 'contract',
  $direction: null,
  $origin: null,
  $timing: .8s,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: cubic-bezier(.55, .085, .68, .53),
  $anim-num: null
) {
  @if (
    $expand-contract == 'expand' or $expand-contract == true or
    $expand-contract == 'exp' or $expand-contract == 'e'
  ) {
    $expand-contract: true;
  } @else if (
    not $expand-contract or $expand-contract == 'c' or
    str-slice($expand-contract + '', 1, 3) == 'con'
  ) {
    $expand-contract: false;
  }

  @if ($direction == true or $direction == 't') {
    $direction: true;
  } @else if (
    not $direction or $direction =='f' or $direction == 'none' or
    $direction == 'n' or $direction == 'n/a' or $direction == 'no'
  ) {
    $direction: false;
  } @else {
    @error 'Invalid $direction value of `#{inspect($direction)}` for the ' +
        '`text-tracking-out` mixin.';
  }

  @if ($origin == 'top' or $origin == 't') {
    $origin: 'top';
  } @else if ($origin == 'bottom' or $origin == 'btm' or $origin == 'b') {
    $origin: 'bottom';
  } @else if (
    not $origin or $origin == 'default' or $origin == 'def' or
    $origin == 'd' or $origin == 'no' or $origin == 'none' or
    $origin == 'n/a' or $origin == 'n'
  ) {
   $origin: null;
  } @else {
    @error 'Invalid origin value of `#{inspect($origin)}` for the ' +
        '`text-tracking-out` mixin.';
  }

  @if type-of($timing) != 'number' {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `text-tracking-out` ' +
        'mixin. The timing property must be a number.';
  } @else if unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not index('s' 'ms', unit($timing)) {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `text-tracking-out` ' +
        'mixin. The timing property must be in either s or ms units.';
  } @else if ($timing % 10 == 0ms) {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;
    // Get rid of possible leading zero in front of decimal place
    @if (str-slice($timing + '', 1, 2) == '0.') {
      $timing: unquote(str-slice($timing + '', 2));
    }
  }

  @if (
    $delay == 0 or $delay == 0s or $delay == 0ms or
    $delay == 'none' or $delay == 'no' or $delay == 'n' or
    $delay == 'n/a' or $delay == nil or not $delay
  ) {
    $delay: null;
  }
  @if $delay {
    @if (type-of($delay) != 'number') {
      @error 'Invalid delay value of `#{inspect($delay)}` for the ' +
          '`text-tracking-out` mixin. The delay property must be a number.';
    } @else if (unitless($delay)) {
      // If no there is no unit for $delay, assume seconds
      $delay: $delay * 1s;
    } @else if not index('s' 'ms', unit($delay)) {
      @error 'Invalid delay value of `#{inspect($delay)}` for the ' +
          '`text-tracking-out` mixin. The delay property must be in either ' +
          '`s` (seconds) or `ms` (milliseconds) units.';
    } @else if ($delay % 10 == 0ms) {
      // If time in ms would be shorter as seconds, convert it
      $delay: math.div($delay, 1000ms) * 1s;
      @if (str-slice($delay + '', 1, 2) == '0.') {
        $delay: #{str-slice($delay + '', 2)};
      }
    }
  } @else {
    $delay: null;
  }

  @if ($iterations) {
    @if(
      $iterations == 'infinite' or $iterations == 'inf' or $iterations == 'i'
    ) {
      $iterations: infinite;
    } @else if (
      (unitless($iterations) and type-of($iterations) == 'number') or
      $iterations == initial or $iterations == inherit
    ) {
      $iterations: $iterations;
    } @else {
      @error 'Invalid iteration-count value of `#{inspect($iterations)}` for the ' +
          '`text-tracking-out` mixin.';
    }
  } @else {
    $iterations: null;
  }

  @if (
    not $anim-dir or $anim-dir == 'none' or $anim-dir == 'no' or
    $anim-dir == 'n/a' or $anim-dir == 'n' or $anim-dir == 'default' or
    $anim-dir == 'def' or $anim-dir == 'normal' or $anim-dir == 'nor'
  ) {
    $anim-dir: null;
  } @else if (
    $anim-dir == 'reverse' or $anim-dir == 'rev' or $anim-dir == 'r'
  ) {
    $anim-drection: reverse;
  } @else if (
    $anim-dir == 'alternate' or $anim-dir == 'alt' or $anim-dir == 'a'
  ) {
    $anim-dir: alternate;
  } @else if (
    $anim-dir == 'alternate-reverse' or $anim-dir == 'alternatereverse' or
    $anim-dir == 'alt-rev' or $anim-dir == 'altrev' or $anim-dir == 'a-r' or
    $anim-dir == 'ar'
  ) {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of `#{inspect($anim-dir)}` for the ' +
        '`text-tracking-out` mixin';
  }

  @if (
    not $timing-func or $timing-func == true or $timing-func == 'none' or
    $timing-func == 'no' or $timing-func == 'n' or $timing-func == 'def' or
    $timing-func == 'default' or $timing-func == 'd' or $timing-func == 0
  ) {
    // Take all potential values the user might pass to keep the default setting
    // and ensure that the timing function remains at that default
    $timing-func: cubic-bezier(.55, .085, .68, .53);
  }

  @if not $anim-num {
    $anim-num: null;
  }
  animation:
    txt-track-out#{$anim-num} #{$timing} #{$timing-func}
    #{$delay} #{$iterations} #{$anim-dir} both;
  @if $direction {
    transform: translate3d(0, 0, 0);
    transform-style: preserve-3d;
  }

  @at-root {
    @keyframes txt-track-out#{$anim-num} {
      0% {
        opacity: 1;
        @if (not $expand-contract) {
          @if $direction {
            @if not $origin {
              transform: translateZ(0);
            } @else {
              transform: translateZ(0) translateY(0);
            }
          }
        } @else {
          @if $direction {
            @if not $origin {
              transform: translateZ(0);
            } @else {
              transform: translateZ(0) translateY(0);
            }
          }
        }
      }
      @if (not $expand-contract and not $direction and not $origin) {
        50% {
          opacity: 1;
        }
      } @else {
        60% {
          @if (not $expand-contract) {
            opacity: 1;
          } @else {
            opacity: .8;
          }
        }
      }

      100% {
        opacity: 0;
        @if (not $expand-contract) {
          letter-spacing: -.5em;
          @if $direction {
            @if not $origin {
              transform: translateZ(-500px);
            } @else if $origin == 'top' {
              transform: translateZ(-500px) translateY(-300px);
            } @else {
              transform: translateZ(-500px) translateY(300px);
            }
          }
        } @else {
          letter-spacing: 1em;
          @if $direction {
            @if not $origin {
              transform: translateZ(300px);
            } @else if $origin == 'top' {
              transform: translateZ(300px) translateY(-200px);
            } @else {
              transform: translateZ(300px) translateY(200px);
            }
          }
        }
      }
    }
  }
}


/// Creates a CSS triangle, which can be used for dropdown arrows, dropdown
/// pips, and more. Use this mixin inside a `&::before` or `&::after` selector,
/// to attach the triangle to an existing element.
///
/// @param {String} $direction [down] - Direction that the triangle points.
/// Can be `up` (or `u`), `right` (or `r`), `down` (or `d`), or `left` (or `l`).
/// @param {Number} $size [9px] - Width of the triangle.
/// @param {Color} $color [#3e3e3e] - Color of the triangle.
///
/// @group Shapes
/// @throw Invalid $direction value
@mixin triangle($direction: down, $size: 9px, $color: #3e3e3e) {
  border: inset $size;
  @if (to-lower-case($direction) == 'down'
      or to-lower-case($direction) == 'd') {
    border-bottom-width: 0;
    border-color: $color transparent transparent;
    border-top-style: solid;
  } @else if (
    to-lower-case($direction) == 'up' or to-lower-case($direction) == 'u'
  ) {
    border-bottom-style: solid;
    border-color: transparent transparent $color;
    border-top-width: 0;
  } @else if (
    to-lower-case($direction) == 'right' or to-lower-case($direction) == 'r'
  ) {
    border-color: transparent transparent transparent $color;
    border-left-style: solid;
    border-right-width: 0;
  } @else if (
    to-lower-case($direction) == 'left' or
    to-lower-case($direction) == 'l'
  ) {
    border-color: transparent $color transparent transparent;
    border-left-width: 0;
    border-right-style: solid;
  } @else {
    @error 'Invalid direction of `#{inspect($direction)}` for the `triangle` mixin.';
  }
  content: '';
  display: block;
  height: 0;
  width: 0;
}


/// Truncates a given field with ellipses by default.
///
/// @param {Length-Percentage} $max-width [100%] - The max width for the element.
/// @param {Keyword} $display [null] - The display value.
/// @param {Keyword|String} $overflow [ellipsis] - The text-overflow value.
///
/// @group Utilities
@mixin truncate($max-width: 100%, $display: null, $overflow: ellipsis) {
  @if $display {
    display: $display;
  }
  max-width: $max-width;
  overflow: hidden;
  text-overflow: $overflow;
  white-space: nowrap;
  word-wrap: normal;
}


/// Adds a wobble animation to a given element
///
/// @param {String} $direction [bottom] - The base from which the wobble is
/// generated. Takes 'top`, `t`, or `up` for the top, `left` or `l` for `left`,
/// `right` or `r` for right, and either `bottom`, `b`, `down`, or `d` for the
/// bottom.
/// @param {Time} $timing [.8s] - The full duration of the animation
/// @param {Time} $delay [null] - A time value either in milliseconds (ms) or
/// seconds (s)
/// @param {Number|String} $iterations [null] - The number of iterations
/// to complete. If the value passed is not a number, it will be set to infinite
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// null assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for the
/// animation. The default of null will set it to the default timing function
/// of ease.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Incorrect keyword value for $direction
/// @throw Invalid $timing value
/// @throw Invalid $delay value
@mixin wobbliness(
  $direction: bottom,
  $timing: .8s,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: null,
  $anim-num: null
) {
  // Default $direction values for bottom $direction
  $dir-val1: translateX(0);
  $dir-val2: translateX(-30px) rotate(-6deg);
  $dir-val3: translateX(15px) rotate(6deg);
  $dir-val4: translateX(-15px) rotate(-3.6deg);
  $dir-val5: translateX(9px) rotate(2.4deg);
  $dir-val6: translateX(-6px) rotate(-1.2deg);

  @if (
    to-lower-case($direction) == 'top' or to-lower-case($direction) == 't' or
    to-lower-case($direction) == 'up' or to-lower-case($direction) == 'u'
  ) {
    $dir-val1: translateX(0);
    $dir-val2: translateX(-30px) rotate(6deg);
    $dir-val3: translateX(15px) rotate(-6deg);
    $dir-val4: translateX(-15px) rotate(3.6deg);
    $dir-val5: translateX(9px) rotate(-2.4deg);
    $dir-val6: translateX(-6px) rotate(1.2deg);
  } @else if (
    to-lower-case($direction) == 'left' or
    to-lower-case($direction) == 'l'
  ) {
    $dir-val1: translateY(0) rotate(0);
    $dir-val2: translateY(-30px) rotate(-6deg);
    $dir-val3: translateY(15px) rotate(6deg);
    $dir-val4: translateY(-15px) rotate(-3.6deg);
    $dir-val5: translateY(9px) rotate(2.4deg);
    $dir-val6: translateY(-6px) rotate(-1.2deg);
  } @else if (
    to-lower-case($direction) == 'right' or to-lower-case($direction) == 'r'
  ) {
    $dir-val1: translateY(0) rotate(0);
    $dir-val2: translateY(-30px) rotate(6deg);
    $dir-val3: translateY(15px) rotate(-6deg);
    $dir-val4: translateY(-15px) rotate(3.6deg);
    $dir-val5: translateY(9px) rotate(-2.4deg);
    $dir-val6: translateY(-6px) rotate(1.2deg);
  } @else if (to-lower-case($direction) != 'bottom' and
      to-lower-case($direction) != 'b' and
      to-lower-case($direction) != 'down' and to-lower-case($direction) != 'd') {
    @error 'Invalid direction of `#{inspect($direction)}` for the `wobbliness` mixin.';
  }

  @if type-of($timing) != 'number' {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `wobbliness` ' +
        'mixin. The timing property must be a number.';
  } @else if unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not index('s' 'ms', unit($timing)) {
    @error 'Invalid timing value of `#{inspect($timing)}` for the `wobbliness` ' +
        'mixin. The timing property must be in either s or ms units.';
  } @else if ($timing % 10 == 0ms) {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;
    // Get rid of possible leading zero in front of decimal place
    @if (str-slice($timing + '', 1, 2) == '0.') {
      $timing: unquote(str-slice($timing + '', 2));
    }
  }

  @if (
    $delay == 0 or $delay == 0s or $delay == 0ms or
    $delay == 'none' or $delay == 'no' or $delay == 'n' or
    $delay == 'n/a' or $delay == nil or not $delay
  ) {
    $delay: null;
  }
  @if $delay {
    @if (type-of($delay) != 'number') {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `wobbliness` ' +
          'mixin. The delay property must be a number.';
    } @else if (unitless($delay)) {
      $delay: $delay * 1s;
    } @else if not index('s' 'ms', unit($delay)) {
      @error 'Invalid delay value of `#{inspect($delay)}` for the `wobbliness` ' +
          'mixin. The delay property must be in either s or ms units.';
    } @else if ($delay % 10 == 0ms ){
      $delay: math.div($delay, 1000ms) * 1s;
      @if (str-slice($delay + '', 1, 2) == '0.') {
        $delay: #{str-slice($delay + '', 2)};
      }
    }
  } @else {
    $delay: null;
  }

  @if ($iterations) {
    @if (
      $iterations == 'infinite' or $iterations == 'inf' or $iterations == 'i'
    ) {
      $iterations: infinite;
    } @else if (
      (unitless($iterations) and type-of($iterations) == 'number') or
      $iterations == initial or $iterations == inherit
    ) {
      $iterations: $iterations;
    } @else {
      @error 'Invalid iteration-count value of `#{inspect($iterations)}` for the ' +
          '`wobbliness` mixin.';
    }
  } @else {
    $iterations: null;
  }

  @if (
    not $anim-dir or $anim-dir == 'none' or $anim-dir == 'no' or
    $anim-dir == 'n/a' or $anim-dir == 'n' or $anim-dir == 'default' or
    $anim-dir == 'def' or $anim-dir == 'normal' or $anim-dir == 'nor'
  ) {
    $anim-dir: null;
  } @else if (
    $anim-dir == 'reverse' or $anim-dir == 'rev' or $anim-dir == 'r'
  ) {
    $anim-drection: reverse;
  } @else if (
    $anim-dir == 'alternate' or $anim-dir == 'alt' or $anim-dir == 'a'
  ) {
    $anim-dir: alternate;
  } @else if (
    $anim-dir == 'alternate-reverse' or $anim-dir == 'alternatereverse' or
    $anim-dir == 'alt-rev' or $anim-dir == 'altrev' or $anim-dir == 'a-r' or
    $anim-dir == 'ar'
  ) {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of `#{inspect($anim-dir)}` for the ' +
        '`wobbliness` mixin';
  }

  @if (
    not $timing-func or $timing-func == true or $timing-func == 'none' or
    $timing-func == 'no' or $timing-func == 'n' or $timing-func == 'def' or
    $timing-func == 'default' or $timing-func == 'd' or
    $timing-func == 'ease'
  ) {
    // Take all potential values the user might pass to keep the default setting
    // and ensure that the timing function remains at that default
    $timing-func: null;
  }

  @if not $anim-num {
    $anim-num: null;
  }
  animation:
    wobble#{$anim-num} #{$timing} #{$timing-func}
    #{$delay} #{$iterations} #{$anim-dir} both;

  @at-root {
    @keyframes wobble#{$anim-num} {
      0%,
      100% {
        transform: #{$dir-val1};
        transform-origin: 50% 50%;
      }

      15% {
        transform: #{$dir-val2};
      }

      30% {
        transform: #{$dir-val3};
      }

      45% {
        transform: #{$dir-val4};
      }

      60% {
        transform: #{$dir-val5};
      }

      75% {
        transform: #{$dir-val6};
      }
    }
  }
}


/// Uses clip path to change an element to the shape of an X
///
/// @param {Color|Mixed} $bg [#fb8c00] The color or background value.
/// @param {Length-Percentage} $size [15rem] - The height and width.
/// @param {Color} $fg-color [null] The color of any text in the shape
///
/// @group Shapes
@mixin x-shape($bg: #fb8c00, $size: 15rem, $fg-color: null) {
  background: $bg;

  @if ($fg-color) {
    color: $fg-color;
  }
  clip-path: polygon( 20% 0, 0 20%, 30% 50%, 0 80%, 20% 100%,
                      50% 70%, 80% 100%, 100% 80%, 70% 50%,
                      100% 20%, 80% 0, 50% 30%);
  height: $size;
  width: $size;
}


/// Does a slow, artistic, Ken Burns style zoom in on a background image in an element
///
/// @param {Keyword} $direction [bottom] - The direction of the angle the
/// zoom-in will have. Accepts `top`, `t`, `up`, or `u` in any case for the top,
/// `left` or `l` in any case for `left`, `right` or `r` in any case for right,
/// and either `bottom`, `b`, `down`, or `d` in any case for the bottom. It also
/// accepts `bottom-right` or `right-bottom` or rb` or `br` for the
/// bottom-right, `top-right`, `right-top`, `rt`, or `tr` for the top-right,
/// `bottom-left`, `left-bottom`, `lb`, or `bl` for the bottom-left, and
/// `top-left`, `left-top`, `lt`, or `tl` for the top-left, all in any case.
/// @param {Value} $timing [5s] - The duration of the animation's effect.
/// @param {Value} $delay [null] - An optional delay before starting the effect.
/// @throw Invalid keyword for $direction
@mixin zoom-in($direction: bottom, $timing: 5s, $delay: null) {
  // Default values for bottom $direction
  $dir-val1: scale(1) translateY(0);
  $dir-val2: 50% 16%;
  $dir-val3: scale(1.25) translateY(15px);
  $dir-val4: bottom;
  @if to-lower-case($direction) == 'top' or to-lower-case($direction) == 't' or
      to-lower-case($direction) == 'up' or to-lower-case($direction) == 'u' {
    $dir-val1: scale(1) translateY(0);
    $dir-val2: 50% 84%;
    $dir-val3: scale(1.25) translateY(-15px);
    $dir-val4: top;
  } @else if to-lower-case($direction) == 'left' or
      to-lower-case($direction) == 'l' {
    $dir-val1: scale(1) translate(0, 0);
    $dir-val2: 16% 50%;
    $dir-val3: scale(1.25) translate(-20px, 15px);
    $dir-val4: left;
  } @else if (
    to-lower-case($direction) == 'right' or
    to-lower-case($direction) == 'r'
  ) {
    $dir-val1: scale(1) translateX(0);
    $dir-val2: 84% 50%;
    $dir-val3: scale(1.25) translateX(20px);
    $dir-val4: right;
  } @else if (
      to-lower-case($direction) == 'bottom-right' or
      to-lower-case($direction) == 'right-bottom' or
      to-lower-case($direction) == 'br' or
      to-lower-case($direction) == 'rb'
  ) {
    $dir-val1: scale(1) translate(0, 0);
    $dir-val2: 84% 84%;
    $dir-val3: scale(1.25) translate(20px, 15px);
    $dir-val4: right bottom;
  } @else if to-lower-case($direction) == 'top-right' or
      to-lower-case($direction) == 'right-top' or
      to-lower-case($direction) == 'rt' or
      to-lower-case($direction) == 'tr' {
    $dir-val1: scale(1) translate(0, 0);
    $dir-val2: 84% 16%;
    $dir-val3: scale(1.25) translate(20px, -15px);
    $dir-val4: right top;
  } @else if (
      to-lower-case($direction) == 'bottom-left' or
      to-lower-case($direction) == 'left-bottom' or
      to-lower-case($direction) == 'lb' or
      to-lower-case($direction) == 'bl'
  ) {
    $dir-val1: scale(1) translate(0, 0);
    $dir-val2: 16% 84%;
    $dir-val3: scale(1.25) translate(-20px, 15px);
    $dir-val4: left bottom;
  } @else if (
    to-lower-case($direction) == 'top-left' or
    to-lower-case($direction) == 'left-top' or
    to-lower-case($direction) == 'lt' or
    to-lower-case($direction) == 'tl'
  ) {
    $dir-val1: scale(1) translate(0, 0);
    $dir-val2: 16% 16%;
    $dir-val3: scale(1.25) translate(-20px, -15px);
    $dir-val4: left top;
  } @else if (
    to-lower-case($direction) != 'bottom' and
    to-lower-case($direction) != 'b' and
    to-lower-case($direction) != 'down' and
    to-lower-case($direction) != 'd'
  ) {
    @error '`#{$direction}` is not a valid direction for the ' +
        'zoom-in mixin.';
  }
  animation: zoom-in #{$timing} ease-out #{$delay} both;

  @at-root {
    @keyframes zoom-in {
      0% {
          transform: #{$dir-val1};
          transform-origin: #{$dir-val2};
      }

      100% {
          transform: #{$dir-val3};
          transform-origin: #{$dir-val4};
      }
    }
  }
}

/// Media query mixin that targets phones and tiny screens
///
/// @type query
/// @content Apply the given styles inside the media query
@mixin target-phones-and-tiny-width-screens {
  @media screen and (max-width: $bp-308),

         screen
         and (max-width: $bp-max-phone-width)
         and (-webkit-min-device-pixel-ratio: 2),

         screen
         and (max-width: $bp-max-phone-width)
         and (min-resolution: 192dpi),

         screen
         and (max-width: $bp-max-phone-width)
         and (min-resolution: 2dppx),

         screen and (max-height: $bp-height)
  {
    @content;
  }
}

@mixin target-small-screens {
  @media screen and (max-width: $bp-max-phone-width) {
    @content;
  }
}

/// Media query mixin that targets phones in landscape and with a view height
/// less than 600px as well as any screen lower than 364px view height.
///
/// @type query
/// @content Apply the given styles inside the media query
@mixin target-tiny-height-screens {
  @media
    screen and (max-height: $bp-height-tiny),
    screen and (orientation: landscape) and (max-height: $bp-height)
  {
    @content;
  }
}
